[
    {
        "id": "course-1",
        "title": "Full Stack Web Development",
        "description": "Learn frontend and backend development with modern technologies.",
        "chapters": [
            {
                "chapterId": "ch-1",
                "title": "Introduction to Web Development",
                "unlocked": true,
                "modules": [
                    {
                        "moduleId": "mod-1-1",
                        "title": "HTML Basics",
                        "content": "Introduction to HTML and its basic structure.",
                        "unlocked": true,
                        "questions": [
                            {
                                "questionId": "q-1-1",
                                "question": "What does HTML stand for?",
                                "options": [
                                    "Hyper Text Markup Language",
                                    "High Tech Machine Learning",
                                    "Hyper Transfer Markup Language"
                                ],
                                "correctAnswer": "Hyper Text Markup Language",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-1-2",
                                "question": "Which tag is used for paragraphs?",
                                "options": [
                                    "<p>",
                                    "<div>",
                                    "<span>"
                                ],
                                "correctAnswer": "<p>",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-1-3",
                                "question": "What is the purpose of the <title> tag?",
                                "options": [
                                    "Defines the document's title",
                                    "Displays an image",
                                    "Links to a CSS file"
                                ],
                                "correctAnswer": "Defines the document's title",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-1-2",
                        "title": "CSS Basics",
                        "content": "Introduction to CSS styling and selectors.",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-1-4",
                                "question": "What does CSS stand for?",
                                "options": [
                                    "Cascading Style Sheets",
                                    "Creative Styling System",
                                    "Custom Sheet Styles"
                                ],
                                "correctAnswer": "Cascading Style Sheets",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-1-5",
                                "question": "Which property changes text color?",
                                "options": [
                                    "color",
                                    "text-style",
                                    "font-color"
                                ],
                                "correctAnswer": "color",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-1-6",
                                "question": "Which selector targets all elements?",
                                "options": [
                                    "*",
                                    "#",
                                    "."
                                ],
                                "correctAnswer": "*",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-1-3",
                        "title": "JavaScript Basics",
                        "content": "Introduction to JavaScript variables, data types, and basic functions.",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-1-7",
                                "question": "Which keyword declares a variable?",
                                "options": [
                                    "var",
                                    "declare",
                                    "define"
                                ],
                                "correctAnswer": "var",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-1-8",
                                "question": "Which symbol is used for comments in JavaScript?",
                                "options": [
                                    "//",
                                    "<!-- -->",
                                    "#"
                                ],
                                "correctAnswer": "//",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-1-9",
                                "question": "What does `typeof null` return?",
                                "options": [
                                    "null",
                                    "object",
                                    "undefined"
                                ],
                                "correctAnswer": "object",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-1-4",
                        "title": "DOM Manipulation",
                        "content": "Introduction to modifying HTML elements using JavaScript.",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-1-10",
                                "question": "Which method selects an element by ID?",
                                "options": [
                                    "getElementById",
                                    "querySelector",
                                    "getElementsByClassName"
                                ],
                                "correctAnswer": "getElementById",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-1-11",
                                "question": "Which property changes an element’s inner text?",
                                "options": [
                                    "innerText",
                                    "textValue",
                                    "contentText"
                                ],
                                "correctAnswer": "innerText",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-1-12",
                                "question": "Which event is triggered when a button is clicked?",
                                "options": [
                                    "onchange",
                                    "onclick",
                                    "onhover"
                                ],
                                "correctAnswer": "onclick",
                                "userAnswer": ""
                            }
                        ]
                    }
                ],
                "assessment": {
                    "questions": [
                        {
                            "questionId": "assess-1-1",
                            "question": "What is the full form of HTML?",
                            "options": [
                                "Hyper Text Markup Language",
                                "Hyper Transfer Markup Language",
                                "High Tech Machine Learning"
                            ],
                            "correctAnswer": "Hyper Text Markup Language",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-1-2",
                            "question": "Which CSS property changes background color?",
                            "options": [
                                "background-color",
                                "color",
                                "bg-color"
                            ],
                            "correctAnswer": "background-color",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-1-3",
                            "question": "Which JavaScript method adds an element to an array?",
                            "options": [
                                "push()",
                                "add()",
                                "append()"
                            ],
                            "correctAnswer": "push()",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-1-4",
                            "question": "What is the default flex direction?",
                            "options": [
                                "row",
                                "column",
                                "inherit"
                            ],
                            "correctAnswer": "row",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-1-5",
                            "question": "Which HTML tag is used for linking CSS?",
                            "options": [
                                "<link>",
                                "<style>",
                                "<css>"
                            ],
                            "correctAnswer": "<link>",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-1-6",
                            "question": "What is the output of `2 + '2'` in JavaScript?",
                            "options": [
                                "4",
                                "22",
                                "Error"
                            ],
                            "correctAnswer": "22",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-1-7",
                            "question": "Which HTTP method is used for data submission?",
                            "options": [
                                "POST",
                                "GET",
                                "DELETE"
                            ],
                            "correctAnswer": "POST",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-1-8",
                            "question": "What does JSON stand for?",
                            "options": [
                                "JavaScript Object Notation",
                                "Java Source Object Notation",
                                "Java Syntax Oriented Notation"
                            ],
                            "correctAnswer": "JavaScript Object Notation",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-1-9",
                            "question": "Which tag is used for creating tables?",
                            "options": [
                                "<table>",
                                "<tr>",
                                "<td>"
                            ],
                            "correctAnswer": "<table>",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-1-10",
                            "question": "Which database is NoSQL?",
                            "options": [
                                "MongoDB",
                                "MySQL",
                                "PostgreSQL"
                            ],
                            "correctAnswer": "MongoDB",
                            "userAnswer": ""
                        }
                    ]
                }
            },
            {
                "chapterId": "ch-2",
                "title": "Advanced Frontend Development",
                "unlocked": false,
                "modules": [
                    {
                        "moduleId": "mod-2-1",
                        "title": "CSS Grid",
                        "content": "Learn how to use CSS Grid to create powerful and responsive layouts.",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-2-1",
                                "question": "Which CSS property enables the use of CSS Grid?",
                                "options": [
                                    "display: flex;",
                                    "display: grid;",
                                    "grid-template"
                                ],
                                "correctAnswer": "display: grid;",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-2-2",
                                "question": "Which property defines the number of columns in a grid?",
                                "options": [
                                    "grid-rows",
                                    "grid-template-columns",
                                    "column-width"
                                ],
                                "correctAnswer": "grid-template-columns",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-2-3",
                                "question": "What is the default value of 'grid-auto-flow'?",
                                "options": [
                                    "row",
                                    "column",
                                    "dense"
                                ],
                                "correctAnswer": "row",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-2-2",
                        "title": "CSS Flexbox",
                        "content": "Understand Flexbox for arranging elements efficiently in a row or column.",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-2-4",
                                "question": "Which property is used to align items in a flex container?",
                                "options": [
                                    "justify-content",
                                    "align-items",
                                    "flex-wrap"
                                ],
                                "correctAnswer": "align-items",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-2-5",
                                "question": "Which of the following is NOT a valid Flexbox property?",
                                "options": [
                                    "flex-grow",
                                    "grid-gap",
                                    "order"
                                ],
                                "correctAnswer": "grid-gap",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-2-6",
                                "question": "What does 'flex-wrap: wrap;' do?",
                                "options": [
                                    "Keeps all items in a single line",
                                    "Moves items to the next row if needed",
                                    "Aligns items to the start"
                                ],
                                "correctAnswer": "Moves items to the next row if needed",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-2-3",
                        "title": "Responsive Design",
                        "content": "Learn how to create layouts that adapt to different screen sizes.",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-2-7",
                                "question": "Which unit is best for responsive typography?",
                                "options": [
                                    "px",
                                    "em",
                                    "rem"
                                ],
                                "correctAnswer": "rem",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-2-8",
                                "question": "Which CSS property makes an element adjust to different screen sizes?",
                                "options": [
                                    "width",
                                    "max-width",
                                    "height"
                                ],
                                "correctAnswer": "max-width",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-2-9",
                                "question": "Which media query condition targets screens smaller than 768px?",
                                "options": [
                                    "@media (max-width: 768px)",
                                    "@media (min-width: 768px)",
                                    "@media (screen-width: 768px)"
                                ],
                                "correctAnswer": "@media (max-width: 768px)",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-2-4",
                        "title": "CSS Animations",
                        "content": "Explore CSS animations for adding motion to web elements.",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-2-10",
                                "question": "Which property defines an animation?",
                                "options": [
                                    "@keyframes",
                                    "animation-name",
                                    "transition"
                                ],
                                "correctAnswer": "animation-name",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-2-11",
                                "question": "Which property controls the duration of an animation?",
                                "options": [
                                    "animation-delay",
                                    "animation-timing-function",
                                    "animation-duration"
                                ],
                                "correctAnswer": "animation-duration",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-2-12",
                                "question": "What value makes an animation repeat infinitely?",
                                "options": [
                                    "repeat",
                                    "loop",
                                    "infinite"
                                ],
                                "correctAnswer": "infinite",
                                "userAnswer": ""
                            }
                        ]
                    }
                ],
                "assessment": {
                    "questions": [
                        {
                            "questionId": "assess-2-1",
                            "question": "Which property sets a flexible grid layout?",
                            "options": [
                                "display: block;",
                                "display: flex;",
                                "display: grid;"
                            ],
                            "correctAnswer": "display: grid;",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-2-2",
                            "question": "Which flexbox property defines spacing between items?",
                            "options": [
                                "gap",
                                "space-between",
                                "margin"
                            ],
                            "correctAnswer": "gap",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-2-3",
                            "question": "What is the purpose of media queries?",
                            "options": [
                                "Changing colors",
                                "Applying different styles for different devices",
                                "Modifying JavaScript functions"
                            ],
                            "correctAnswer": "Applying different styles for different devices",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-2-4",
                            "question": "Which unit is relative to the root font size?",
                            "options": [
                                "px",
                                "rem",
                                "em"
                            ],
                            "correctAnswer": "rem",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-2-5",
                            "question": "Which CSS property is used for animations?",
                            "options": [
                                "transition",
                                "animation",
                                "keyframes"
                            ],
                            "correctAnswer": "animation",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-2-6",
                            "question": "Which function is used to delay an animation?",
                            "options": [
                                "animation-duration",
                                "animation-delay",
                                "animation-iteration"
                            ],
                            "correctAnswer": "animation-delay",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-2-7",
                            "question": "Which property is NOT part of flexbox?",
                            "options": [
                                "justify-content",
                                "align-items",
                                "grid-template-rows"
                            ],
                            "correctAnswer": "grid-template-rows",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-2-8",
                            "question": "Which property controls the speed curve of an animation?",
                            "options": [
                                "animation-speed",
                                "animation-timing-function",
                                "animation-iteration"
                            ],
                            "correctAnswer": "animation-timing-function",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-2-9",
                            "question": "Which flexbox property sets the direction of items?",
                            "options": [
                                "flex-flow",
                                "flex-direction",
                                "align-items"
                            ],
                            "correctAnswer": "flex-direction",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-2-10",
                            "question": "Which CSS feature allows a webpage to be viewed on different devices?",
                            "options": [
                                "Flexbox",
                                "Responsive Design",
                                "Transitions"
                            ],
                            "correctAnswer": "Responsive Design",
                            "userAnswer": ""
                        }
                    ]
                }
            },
            {
                "chapterId": "ch-3",
                "title": "JavaScript & ES6+ Features",
                "unlocked": false,
                "modules": [
                    {
                        "moduleId": "mod-3-1",
                        "title": "JavaScript Functions",
                        "content": "Learn about functions, function expressions, and arrow functions in JavaScript.",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-3-1",
                                "question": "Which keyword is used to define a function in JavaScript?",
                                "options": [
                                    "func",
                                    "function",
                                    "define"
                                ],
                                "correctAnswer": "function",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-3-2",
                                "question": "What is an arrow function?",
                                "options": [
                                    "A function without a name",
                                    "A function defined with '=>'",
                                    "A function that executes automatically"
                                ],
                                "correctAnswer": "A function defined with '=>'",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-3-3",
                                "question": "Which statement correctly calls a function named 'myFunction'?",
                                "options": [
                                    "call myFunction;",
                                    "myFunction();",
                                    "execute myFunction;"
                                ],
                                "correctAnswer": "myFunction();",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-3-2",
                        "title": "Async/Await in JavaScript",
                        "content": "Understand asynchronous programming using async/await.",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-3-4",
                                "question": "Which keyword is used to define an asynchronous function?",
                                "options": [
                                    "async",
                                    "await",
                                    "promise"
                                ],
                                "correctAnswer": "async",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-3-5",
                                "question": "Which statement is correct about 'await'?",
                                "options": [
                                    "It can only be used inside an async function",
                                    "It makes a function synchronous",
                                    "It waits for all promises to resolve"
                                ],
                                "correctAnswer": "It can only be used inside an async function",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-3-6",
                                "question": "What does 'await fetch()' return?",
                                "options": [
                                    "A JSON object",
                                    "A promise",
                                    "A resolved response"
                                ],
                                "correctAnswer": "A promise",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-3-3",
                        "title": "JavaScript Promises",
                        "content": "Learn how JavaScript Promises work for handling asynchronous operations.",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-3-7",
                                "question": "Which states does a JavaScript Promise have?",
                                "options": [
                                    "Pending, Fulfilled, Rejected",
                                    "Waiting, Resolved, Rejected",
                                    "Start, Complete, Fail"
                                ],
                                "correctAnswer": "Pending, Fulfilled, Rejected",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-3-8",
                                "question": "Which method is used to handle a fulfilled Promise?",
                                "options": [
                                    ".then()",
                                    ".catch()",
                                    ".finally()"
                                ],
                                "correctAnswer": ".then()",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-3-9",
                                "question": "What does '.catch()' do in a Promise?",
                                "options": [
                                    "Handles resolved values",
                                    "Handles errors",
                                    "Executes the next promise"
                                ],
                                "correctAnswer": "Handles errors",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-3-4",
                        "title": "JavaScript Modules",
                        "content": "Explore ES6 Modules and how to import/export JavaScript code.",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-3-10",
                                "question": "Which keyword is used to export a module in JavaScript?",
                                "options": [
                                    "export",
                                    "module.exports",
                                    "export default"
                                ],
                                "correctAnswer": "export",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-3-11",
                                "question": "How do you import a named export from a module?",
                                "options": [
                                    "import myFunc from './module.js';",
                                    "import { myFunc } from './module.js';",
                                    "require('./module.js');"
                                ],
                                "correctAnswer": "import { myFunc } from './module.js';",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-3-12",
                                "question": "Which file extension is commonly used for JavaScript modules?",
                                "options": [
                                    ".mjs",
                                    ".jsx",
                                    ".es6"
                                ],
                                "correctAnswer": ".mjs",
                                "userAnswer": ""
                            }
                        ]
                    }
                ],
                "assessment": {
                    "questions": [
                        {
                            "questionId": "assess-3-1",
                            "question": "Which function type does not have its own 'this' keyword?",
                            "options": [
                                "Arrow function",
                                "Named function",
                                "Anonymous function"
                            ],
                            "correctAnswer": "Arrow function",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-3-2",
                            "question": "Which method handles errors in a Promise?",
                            "options": [
                                ".resolve()",
                                ".catch()",
                                ".finally()"
                            ],
                            "correctAnswer": ".catch()",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-3-3",
                            "question": "What is the purpose of 'async' keyword in JavaScript?",
                            "options": [
                                "Makes a function asynchronous",
                                "Waits for a promise",
                                "Creates a new thread"
                            ],
                            "correctAnswer": "Makes a function asynchronous",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-3-4",
                            "question": "What does 'import defaultExport from' do?",
                            "options": [
                                "Imports all functions",
                                "Imports the default export",
                                "Exports a module"
                            ],
                            "correctAnswer": "Imports the default export",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-3-5",
                            "question": "Which method resolves a JavaScript Promise?",
                            "options": [
                                "resolve()",
                                "reject()",
                                "return()"
                            ],
                            "correctAnswer": "resolve()",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-3-6",
                            "question": "Which ES6 feature allows using template literals?",
                            "options": [
                                "${variable}",
                                "let",
                                "const"
                            ],
                            "correctAnswer": "${variable}",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-3-7",
                            "question": "Which method is used to execute a function after a specified delay?",
                            "options": [
                                "setTimeout()",
                                "setInterval()",
                                "clearTimeout()"
                            ],
                            "correctAnswer": "setTimeout()",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-3-8",
                            "question": "Which keyword is used to define block-scoped variables?",
                            "options": [
                                "var",
                                "let",
                                "const"
                            ],
                            "correctAnswer": "let",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-3-9",
                            "question": "Which function converts a JSON string into a JavaScript object?",
                            "options": [
                                "JSON.parse()",
                                "JSON.stringify()",
                                "JSON.toObject()"
                            ],
                            "correctAnswer": "JSON.parse()",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-3-10",
                            "question": "Which JavaScript feature allows spreading elements of an array?",
                            "options": [
                                "Rest operator",
                                "Spread operator",
                                "Concat method"
                            ],
                            "correctAnswer": "Spread operator",
                            "userAnswer": ""
                        }
                    ]
                }
            },
            {
                "chapterId": "ch-4",
                "title": "Backend Development with Node.js",
                "unlocked": false,
                "modules": [
                    {
                        "moduleId": "mod-4-1",
                        "title": "Introduction to Express.js",
                        "content": "Learn the basics of Express.js and how to set up a Node.js server.",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-4-1",
                                "question": "Which command is used to install Express.js?",
                                "options": [
                                    "npm install express",
                                    "express new app",
                                    "node install express"
                                ],
                                "correctAnswer": "npm install express",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-4-2",
                                "question": "Which method is used to create an Express app?",
                                "options": [
                                    "express()",
                                    "new Express()",
                                    "createExpress()"
                                ],
                                "correctAnswer": "express()",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-4-3",
                                "question": "Which HTTP method is used to retrieve data from a server?",
                                "options": [
                                    "GET",
                                    "POST",
                                    "DELETE"
                                ],
                                "correctAnswer": "GET",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-4-2",
                        "title": "Building REST APIs with Express",
                        "content": "Learn how to create RESTful APIs using Express.js and handle different HTTP requests.",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-4-4",
                                "question": "Which middleware is commonly used to parse JSON data in Express?",
                                "options": [
                                    "express.json()",
                                    "bodyParser.json()",
                                    "jsonParser()"
                                ],
                                "correctAnswer": "express.json()",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-4-5",
                                "question": "What status code represents a successful HTTP request?",
                                "options": [
                                    "200",
                                    "404",
                                    "500"
                                ],
                                "correctAnswer": "200",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-4-6",
                                "question": "Which method is used to define a route in Express?",
                                "options": [
                                    "app.route()",
                                    "app.get()",
                                    "app.use()"
                                ],
                                "correctAnswer": "app.get()",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-4-3",
                        "title": "Database Integration with MongoDB",
                        "content": "Understand how to connect Express.js with MongoDB using Mongoose.",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-4-7",
                                "question": "Which library is commonly used to interact with MongoDB in Node.js?",
                                "options": [
                                    "Sequelize",
                                    "Mongoose",
                                    "MongoJS"
                                ],
                                "correctAnswer": "Mongoose",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-4-8",
                                "question": "Which command is used to connect to a MongoDB database in Mongoose?",
                                "options": [
                                    "mongoose.connect()",
                                    "mongo.connect()",
                                    "db.connect()"
                                ],
                                "correctAnswer": "mongoose.connect()",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-4-9",
                                "question": "Which MongoDB operation is used to insert data into a collection?",
                                "options": [
                                    "insertOne()",
                                    "create()",
                                    "addData()"
                                ],
                                "correctAnswer": "insertOne()",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-4-4",
                        "title": "Authentication & Security in Node.js",
                        "content": "Learn how to implement user authentication and security best practices in Node.js applications.",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-4-10",
                                "question": "Which library is commonly used for user authentication in Express apps?",
                                "options": [
                                    "JWT",
                                    "OAuth",
                                    "Passport.js"
                                ],
                                "correctAnswer": "Passport.js",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-4-11",
                                "question": "What is the purpose of bcrypt in Node.js applications?",
                                "options": [
                                    "Encrypting passwords",
                                    "Handling API requests",
                                    "Storing user data"
                                ],
                                "correctAnswer": "Encrypting passwords",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-4-12",
                                "question": "Which HTTP status code represents an unauthorized request?",
                                "options": [
                                    "403",
                                    "401",
                                    "500"
                                ],
                                "correctAnswer": "401",
                                "userAnswer": ""
                            }
                        ]
                    }
                ],
                "assessment": {
                    "questions": [
                        {
                            "questionId": "assess-4-1",
                            "question": "Which framework is used to build backend applications in Node.js?",
                            "options": [
                                "Django",
                                "Express.js",
                                "Flask"
                            ],
                            "correctAnswer": "Express.js",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-4-2",
                            "question": "Which middleware function is used to serve static files in Express?",
                            "options": [
                                "express.static()",
                                "app.useStatic()",
                                "staticFiles()"
                            ],
                            "correctAnswer": "express.static()",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-4-3",
                            "question": "What is the default port number for a Node.js application?",
                            "options": [
                                "8080",
                                "3000",
                                "5000"
                            ],
                            "correctAnswer": "3000",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-4-4",
                            "question": "Which method is used to send a JSON response in Express?",
                            "options": [
                                "res.send()",
                                "res.json()",
                                "res.data()"
                            ],
                            "correctAnswer": "res.json()",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-4-5",
                            "question": "Which module is required to work with MongoDB in a Node.js application?",
                            "options": [
                                "mongoose",
                                "express",
                                "body-parser"
                            ],
                            "correctAnswer": "mongoose",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-4-6",
                            "question": "What does CORS stand for?",
                            "options": [
                                "Cross-Origin Resource Sharing",
                                "Client-Origin Request Security",
                                "Cross-Over Routing System"
                            ],
                            "correctAnswer": "Cross-Origin Resource Sharing",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-4-7",
                            "question": "Which method is used to update a document in MongoDB?",
                            "options": [
                                "updateOne()",
                                "modifyOne()",
                                "changeDocument()"
                            ],
                            "correctAnswer": "updateOne()",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-4-8",
                            "question": "Which hashing algorithm is commonly used with bcrypt?",
                            "options": [
                                "SHA-256",
                                "MD5",
                                "Blowfish"
                            ],
                            "correctAnswer": "Blowfish",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-4-9",
                            "question": "Which method is used to handle errors globally in Express?",
                            "options": [
                                "app.error()",
                                "app.use(errorHandler)",
                                "app.catch()"
                            ],
                            "correctAnswer": "app.use(errorHandler)",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-4-10",
                            "question": "What is the purpose of middleware in Express?",
                            "options": [
                                "Handling requests and responses",
                                "Connecting to databases",
                                "Compiling JavaScript files"
                            ],
                            "correctAnswer": "Handling requests and responses",
                            "userAnswer": ""
                        }
                    ]
                }
            },
            {
                "chapterId": "ch-5",
                "title": "MongoDB & Database Design",
                "unlocked": false,
                "modules": [
                    {
                        "moduleId": "mod-5-1",
                        "title": "Introduction to MongoDB & NoSQL",
                        "content": "Learn the basics of MongoDB, its advantages over relational databases, and NoSQL concepts.",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-5-1",
                                "question": "What type of database is MongoDB?",
                                "options": [
                                    "Relational",
                                    "NoSQL",
                                    "Graph"
                                ],
                                "correctAnswer": "NoSQL",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-5-2",
                                "question": "Which command is used to check the available databases in MongoDB?",
                                "options": [
                                    "show dbs",
                                    "list databases",
                                    "get databases"
                                ],
                                "correctAnswer": "show dbs",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-5-3",
                                "question": "Which data format does MongoDB use for storing documents?",
                                "options": [
                                    "XML",
                                    "JSON",
                                    "BSON"
                                ],
                                "correctAnswer": "BSON",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-5-2",
                        "title": "CRUD Operations in MongoDB",
                        "content": "Understand how to create, read, update, and delete documents in MongoDB collections.",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-5-4",
                                "question": "Which method is used to insert a single document into a MongoDB collection?",
                                "options": [
                                    "insertOne()",
                                    "addOne()",
                                    "createOne()"
                                ],
                                "correctAnswer": "insertOne()",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-5-5",
                                "question": "Which method is used to retrieve all documents from a collection?",
                                "options": [
                                    "find()",
                                    "getAll()",
                                    "fetch()"
                                ],
                                "correctAnswer": "find()",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-5-6",
                                "question": "Which method is used to delete a single document from a collection?",
                                "options": [
                                    "deleteOne()",
                                    "removeOne()",
                                    "dropOne()"
                                ],
                                "correctAnswer": "deleteOne()",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-5-3",
                        "title": "Indexing in MongoDB",
                        "content": "Learn how indexing improves query performance and how to create indexes in MongoDB.",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-5-7",
                                "question": "Which method is used to create an index in MongoDB?",
                                "options": [
                                    "createIndex()",
                                    "addIndex()",
                                    "setIndex()"
                                ],
                                "correctAnswer": "createIndex()",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-5-8",
                                "question": "What is the default index created on every MongoDB collection?",
                                "options": [
                                    "_id index",
                                    "name index",
                                    "primary index"
                                ],
                                "correctAnswer": "_id index",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-5-9",
                                "question": "Which type of index supports geospatial queries in MongoDB?",
                                "options": [
                                    "2dsphere",
                                    "text",
                                    "hashed"
                                ],
                                "correctAnswer": "2dsphere",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-5-4",
                        "title": "Aggregation in MongoDB",
                        "content": "Learn how to perform data analysis and transformation using MongoDB’s aggregation framework.",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-5-10",
                                "question": "Which method is used to perform aggregation operations in MongoDB?",
                                "options": [
                                    "aggregate()",
                                    "groupBy()",
                                    "pipeline()"
                                ],
                                "correctAnswer": "aggregate()",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-5-11",
                                "question": "Which aggregation stage is used to group documents?",
                                "options": [
                                    "$group",
                                    "$match",
                                    "$sort"
                                ],
                                "correctAnswer": "$group",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-5-12",
                                "question": "Which stage in aggregation is used to filter documents?",
                                "options": [
                                    "$match",
                                    "$filter",
                                    "$where"
                                ],
                                "correctAnswer": "$match",
                                "userAnswer": ""
                            }
                        ]
                    }
                ],
                "assessment": {
                    "questions": [
                        {
                            "questionId": "assess-5-1",
                            "question": "Which query is used to find a document in MongoDB?",
                            "options": [
                                "find()",
                                "search()",
                                "query()"
                            ],
                            "correctAnswer": "find()",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-5-2",
                            "question": "Which command is used to delete a collection?",
                            "options": [
                                "drop()",
                                "delete()",
                                "remove()"
                            ],
                            "correctAnswer": "drop()",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-5-3",
                            "question": "What does NoSQL stand for?",
                            "options": [
                                "Not Only SQL",
                                "Non-Structured Query Language",
                                "New SQL"
                            ],
                            "correctAnswer": "Not Only SQL",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-5-4",
                            "question": "Which command is used to update multiple documents in a collection?",
                            "options": [
                                "updateMany()",
                                "modifyMany()",
                                "editMany()"
                            ],
                            "correctAnswer": "updateMany()",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-5-5",
                            "question": "Which MongoDB operator is used for sorting query results?",
                            "options": [
                                "$sort",
                                "$order",
                                "$arrange"
                            ],
                            "correctAnswer": "$sort",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-5-6",
                            "question": "What is the purpose of a capped collection?",
                            "options": [
                                "Fixed-size collection",
                                "Automatically indexed collection",
                                "Temporary collection"
                            ],
                            "correctAnswer": "Fixed-size collection",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-5-7",
                            "question": "Which MongoDB feature supports full-text search?",
                            "options": [
                                "Text Index",
                                "Full Index",
                                "Search Index"
                            ],
                            "correctAnswer": "Text Index",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-5-8",
                            "question": "Which MongoDB command is used to create a new database?",
                            "options": [
                                "use <dbname>",
                                "createDatabase()",
                                "newDB()"
                            ],
                            "correctAnswer": "use <dbname>",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-5-9",
                            "question": "What is the purpose of the `$lookup` stage in aggregation?",
                            "options": [
                                "Joins collections",
                                "Filters documents",
                                "Sorts data"
                            ],
                            "correctAnswer": "Joins collections",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-5-10",
                            "question": "Which MongoDB method returns the total count of documents in a collection?",
                            "options": [
                                "countDocuments()",
                                "totalDocs()",
                                "getCount()"
                            ],
                            "correctAnswer": "countDocuments()",
                            "userAnswer": ""
                        }
                    ]
                }
            },
            {
                "chapterId": "ch-6",
                "title": "Full-Stack Project & Deployment",
                "unlocked": false,
                "modules": [
                    {
                        "moduleId": "mod-6-1",
                        "title": "Authentication & Authorization",
                        "content": "Learn about user authentication, JWT, OAuth, and role-based access control (RBAC).",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-6-1",
                                "question": "Which authentication method uses tokens to validate users?",
                                "options": [
                                    "Session-based",
                                    "JWT",
                                    "OAuth"
                                ],
                                "correctAnswer": "JWT",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-6-2",
                                "question": "What is the purpose of OAuth?",
                                "options": [
                                    "Encrypt data",
                                    "Allow third-party authentication",
                                    "Store user credentials"
                                ],
                                "correctAnswer": "Allow third-party authentication",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-6-3",
                                "question": "Which HTTP status code represents an unauthorized request?",
                                "options": [
                                    "200",
                                    "403",
                                    "401"
                                ],
                                "correctAnswer": "401",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-6-2",
                        "title": "Continuous Integration & Continuous Deployment (CI/CD)",
                        "content": "Understand CI/CD pipelines, GitHub Actions, and deployment automation.",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-6-4",
                                "question": "What does CI/CD stand for?",
                                "options": [
                                    "Continuous Improvement / Code Deployment",
                                    "Continuous Integration / Continuous Deployment",
                                    "Code Implementation / Continuous Development"
                                ],
                                "correctAnswer": "Continuous Integration / Continuous Deployment",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-6-5",
                                "question": "Which tool is commonly used for CI/CD pipelines?",
                                "options": [
                                    "Jenkins",
                                    "Postman",
                                    "MongoDB"
                                ],
                                "correctAnswer": "Jenkins",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-6-6",
                                "question": "What is the purpose of a CI/CD pipeline?",
                                "options": [
                                    "Manually deploy code",
                                    "Automate testing and deployment",
                                    "Store project backups"
                                ],
                                "correctAnswer": "Automate testing and deployment",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-6-3",
                        "title": "Hosting & Deployment",
                        "content": "Explore cloud platforms, Docker, and hosting services like AWS, Vercel, and Heroku.",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-6-7",
                                "question": "Which cloud provider offers serverless deployment?",
                                "options": [
                                    "AWS Lambda",
                                    "MongoDB",
                                    "Docker"
                                ],
                                "correctAnswer": "AWS Lambda",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-6-8",
                                "question": "Which command is used to build a Docker image?",
                                "options": [
                                    "docker build",
                                    "docker create",
                                    "docker compose"
                                ],
                                "correctAnswer": "docker build",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-6-9",
                                "question": "Which service is commonly used for deploying frontend applications?",
                                "options": [
                                    "Vercel",
                                    "Postman",
                                    "MongoDB Atlas"
                                ],
                                "correctAnswer": "Vercel",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-6-4",
                        "title": "Monitoring & Security",
                        "content": "Learn how to monitor server performance, handle logs, and improve security.",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-6-10",
                                "question": "Which tool is used for monitoring server performance?",
                                "options": [
                                    "Prometheus",
                                    "Git",
                                    "Figma"
                                ],
                                "correctAnswer": "Prometheus",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-6-11",
                                "question": "Which HTTP header helps prevent Cross-Site Scripting (XSS)?",
                                "options": [
                                    "Content-Security-Policy",
                                    "Authorization",
                                    "User-Agent"
                                ],
                                "correctAnswer": "Content-Security-Policy",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-6-12",
                                "question": "Which security measure helps protect passwords?",
                                "options": [
                                    "Hashing",
                                    "Plain text storage",
                                    "Logging"
                                ],
                                "correctAnswer": "Hashing",
                                "userAnswer": ""
                            }
                        ]
                    }
                ],
                "assessment": {
                    "questions": [
                        {
                            "questionId": "assess-6-1",
                            "question": "What does RBAC stand for?",
                            "options": [
                                "Role-Based Access Control",
                                "Restricted Backend API Control",
                                "Role-Based Account Configuration"
                            ],
                            "correctAnswer": "Role-Based Access Control",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-6-2",
                            "question": "Which protocol is commonly used for secure web communication?",
                            "options": [
                                "HTTPS",
                                "FTP",
                                "SMTP"
                            ],
                            "correctAnswer": "HTTPS",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-6-3",
                            "question": "What is Docker primarily used for?",
                            "options": [
                                "Containerization",
                                "Database Management",
                                "Code Compilation"
                            ],
                            "correctAnswer": "Containerization",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-6-4",
                            "question": "Which CI/CD tool is integrated with GitHub?",
                            "options": [
                                "GitHub Actions",
                                "Postman",
                                "Terraform"
                            ],
                            "correctAnswer": "GitHub Actions",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-6-5",
                            "question": "Which service provides scalable cloud hosting?",
                            "options": [
                                "AWS EC2",
                                "MongoDB Atlas",
                                "Photoshop"
                            ],
                            "correctAnswer": "AWS EC2",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-6-6",
                            "question": "Which command is used to start a Docker container?",
                            "options": [
                                "docker run",
                                "docker start",
                                "docker create"
                            ],
                            "correctAnswer": "docker run",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-6-7",
                            "question": "Which logging service is commonly used in cloud applications?",
                            "options": [
                                "ELK Stack",
                                "GitHub",
                                "CSS"
                            ],
                            "correctAnswer": "ELK Stack",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-6-8",
                            "question": "Which platform is used for frontend hosting with serverless functions?",
                            "options": [
                                "Vercel",
                                "Postman",
                                "Git"
                            ],
                            "correctAnswer": "Vercel",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-6-9",
                            "question": "Which of the following improves application security?",
                            "options": [
                                "SSL Certificates",
                                "Plain text passwords",
                                "Disabling firewalls"
                            ],
                            "correctAnswer": "SSL Certificates",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-6-10",
                            "question": "Which cloud provider offers Firebase Hosting?",
                            "options": [
                                "Google Cloud",
                                "AWS",
                                "Microsoft Azure"
                            ],
                            "correctAnswer": "Google Cloud",
                            "userAnswer": ""
                        }
                    ]
                }
            }
        ]
    },
    {
        "id": "course-2",
        "title": "Data Structures and Algorithms",
        "description": "Learn fundamental concepts of data structures and algorithms with hands-on practice.",
        "chapters": [
            {
                "chapterId": "ch-1",
                "title": "Introduction to Data Structures and Algorithms",
                "unlocked": true,
                "modules": [
                    {
                        "moduleId": "mod-1-1",
                        "title": "Introduction to Data Structures",
                        "content": "## Introduction to Data Structures and Algorithms (DSA)\n\nWelcome to the world of Data Structures and Algorithms! 🚀\n\nDSA is the foundation of efficient problem-solving and software development. Mastering DSA enables you to write optimized and scalable code.\n\n## What is a Data Structure?\n\nA **Data Structure** is a way of organizing and storing data so that operations like access, insertion, deletion, and traversal can be performed efficiently.\n\n### Types of Data Structures:\n\n- **Array**: Fixed-size collection of elements of the same type.\n- **Linked List**: A linear collection of data elements where each element points to the next.\n- **Stack**: Follows LIFO (Last In, First Out) principle.\n- **Queue**: Follows FIFO (First In, First Out) principle.\n- **HashMap**: Stores key-value pairs for fast lookup.\n\n### Example: Array in Java\n\n```java\npublic class ArrayExample {\n    public static void main(String[] args) {\n        int[] numbers = {10, 20, 30, 40, 50};\n        System.out.println(numbers[2]); // Output: 30\n    }\n}\n```",
                        "unlocked": true,
                        "questions": [
                            {
                                "questionId": "q-1-1",
                                "question": "What is the primary purpose of data structures?",
                                "options": [
                                    "Store and organize data efficiently",
                                    "Execute algorithms faster",
                                    "Improve coding speed"
                                ],
                                "correctAnswer": "Store and organize data efficiently",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-1-2",
                                "question": "Which of the following is a linear data structure?",
                                "options": [
                                    "Tree",
                                    "Graph",
                                    "Array"
                                ],
                                "correctAnswer": "Array",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-1-3",
                                "question": "Which data structure uses LIFO (Last In, First Out) order?",
                                "options": [
                                    "Queue",
                                    "Stack",
                                    "Array"
                                ],
                                "correctAnswer": "Stack",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-1-2",
                        "title": "Introduction to Algorithms",
                        "content": "## Learn the Basics of Algorithms, Their Complexity, and Types of Algorithms\n\n## What is an Algorithm?\n\nAn **algorithm** is a step-by-step procedure or formula for solving a problem.\nIn programming, an algorithm defines a clear set of instructions to perform a specific task or solve a given problem.\n\n> **Example:**\n> A cooking recipe is an algorithm! It tells you the steps to follow to prepare a dish.\n\n### Why are Algorithms Important?\n\n- Algorithms help in solving problems efficiently.\n- They improve the performance of software.\n- They enable you to write clean, structured, and optimized code.\n- Understanding algorithms is crucial for technical interviews and real-world development.\n\n---\n\n## Algorithm Complexity\n\n### Time Complexity\n\nTime complexity measures how the time to complete a task grows as the size of the input increases.\n\n- **Best Case:** The fastest the algorithm can complete.\n- **Average Case:** Typical time taken for random input.\n- **Worst Case:** Maximum time taken for any input.\n\nCommon time complexities:\n\n- **O(1):** Constant time\n- **O(log n):** Logarithmic time\n- **O(n):** Linear time\n- **O(n log n):** Linearithmic time\n- **O(n²):** Quadratic time\n\n### Space Complexity\n\nSpace complexity refers to the amount of memory an algorithm uses relative to the input size.\n\n> Efficient algorithms aim for both low time complexity and low space complexity.\n\n### Big O Notation\n\nBig O notation expresses the upper bound of an algorithm's runtime or space requirements, helping to compare algorithm efficiency.\n\n> **Example:**\n> Searching in an unsorted array: **O(n)**\n> Binary search in a sorted array: **O(log n)**\n\n---\n\n## Types of Algorithms\n\n### 1. Brute Force Algorithm\n\nTries all possible solutions until the correct one is found.\n- **Example:** Linear search.\n\n### 2. Divide and Conquer\n\nBreaks the problem into smaller sub-problems, solves them individually, and combines their solutions.\n- **Example:** Merge Sort, Quick Sort.\n\n### 3. Greedy Algorithm\n\nMakes the best possible choice at each step to ensure the final solution is optimal.\n- **Example:** Dijkstra's algorithm.\n\n### 4. Dynamic Programming\n\nSolves complex problems by breaking them down into simpler subproblems and storing their results for future use.\n- **Example:** Fibonacci sequence, Knapsack problem.\n\n### 5. Backtracking\n\nTries different solutions and abandons them (\"backtracks\") if they do not lead to a valid answer.\n- **Example:** Sudoku solver, N-Queens problem.\n\n### 6. Recursive Algorithm\n\nThe function calls itself with a subset of the original input.\n- **Example:** Factorial calculation, Tree traversals.\n\n### 7. Randomized Algorithm\n\nUses random numbers to make decisions within the algorithm.\n- **Example:** Randomized Quick Sort.\n\n---\n\n## Summary\n\n- **Algorithm:** Step-by-step solution to a problem.\n- **Complexity:** Measure of performance (time and space).\n- **Types:** Brute force, divide and conquer, greedy, dynamic programming, backtracking, recursive, and randomized algorithms.\n\nBy understanding these concepts, you'll be better equipped to solve problems efficiently and write optimal code!\n\n---",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-1-4",
                                "question": "What is the time complexity of a binary search algorithm?",
                                "options": [
                                    "O(n)",
                                    "O(log n)",
                                    "O(n^2)"
                                ],
                                "correctAnswer": "O(log n)",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-1-5",
                                "question": "Which algorithmic paradigm involves breaking down a problem into smaller sub-problems?",
                                "options": [
                                    "Greedy",
                                    "Divide and Conquer",
                                    "Dynamic Programming"
                                ],
                                "correctAnswer": "Divide and Conquer",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-1-6",
                                "question": "Which notation describes the upper bound of an algorithm?",
                                "options": [
                                    "Big O",
                                    "Theta",
                                    "Omega"
                                ],
                                "correctAnswer": "Big O",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-1-3",
                        "title": "Complexity Analysis",
                        "content": "## Understand the Importance of Time and Space Complexity in Algorithm Design\n\n## What is Time and Space Complexity?\n\nWhen designing algorithms, it is crucial to consider:\n\n- **Time Complexity:** How fast does the algorithm run as the input size grows?\n- **Space Complexity:** How much memory does the algorithm need as the input size increases?\n\nBoth of these factors determine how efficient and scalable your algorithm is.\n\n---\n\n## Why is Time Complexity Important?\n\n- Helps predict performance.\n- Avoids algorithms that take too long for large inputs.\n- Optimizes user experience by ensuring fast responses.\n\n> **Example:**\n> Searching in an array:\n> - **Linear Search:** O(n)\n> - **Binary Search (sorted array):** O(log n)\n\n### Java Example: Linear vs. Binary Search\n```java\n// Linear Search: O(n)\nint linearSearch(int[] arr, int target) {\n  for (int i = 0; i < arr.length; i++) {\n    if (arr[i] == target) return i;\n  }\n  return -1;\n}\n\n// Binary Search: O(log n) - Array must be sorted\nint binarySearch(int[] arr, int target) {\n  int left = 0, right = arr.length - 1;\n  while (left <= right) {\n    int mid = left + (right - left) / 2;\n    if (arr[mid] == target) return mid;\n    if (arr[mid] < target) left = mid + 1;\n    else right = mid - 1;\n  }\n  return -1;\n}\n```",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-1-7",
                                "question": "What does space complexity measure?",
                                "options": [
                                    "Time taken by an algorithm",
                                    "Memory required by an algorithm",
                                    "Efficiency of sorting algorithms"
                                ],
                                "correctAnswer": "Memory required by an algorithm",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-1-8",
                                "question": "Which complexity class represents exponential growth?",
                                "options": [
                                    "O(n)",
                                    "O(2^n)",
                                    "O(log n)"
                                ],
                                "correctAnswer": "O(2^n)",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-1-9",
                                "question": "What is the best-case complexity of linear search?",
                                "options": [
                                    "O(1)",
                                    "O(n)",
                                    "O(log n)"
                                ],
                                "correctAnswer": "O(1)",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-1-4",
                        "title": "Types of Data Structures",
                        "content": "## Linear and Non-Linear Data Structures\n\nUnderstanding the types of data structures is essential for organizing data efficiently and solving problems effectively. Data structures can be broadly classified into **linear** and **non-linear** categories.\n\n## Linear Data Structures\nIn a linear data structure, elements are arranged sequentially, and each element is connected to its previous and next element. Traversal of the data structure is done in a single run, one after the other.\n\n### Characteristics of Linear Data Structures:\n\n- **Sequential Access:** Data is accessed in a linear or sequential manner.\n- **Easy Implementation:** They are easier to implement and use because of their straightforward structure.\n- **Memory Utilization:** May require more memory due to fixed size (like arrays).\n\n### Examples:\n\n- **Array:** Stores elements at contiguous memory locations.\n- **Linked List:** Elements are connected using pointers.\n- **Stack:** Follows **Last In First Out (LIFO)** principle.\n- **Queue:** Follows **First In First Out (FIFO)** principle.\n\n### Advantages:\n\n- Simple to implement and understand.\n- Efficient for small data sets and simple operations.\n- Predictable traversal.\n\n### Disadvantages:\n\n- Not suitable for representing hierarchical data.\n- Insertion and deletion operations can be costly (in some cases).\n\n---\n\n## Non-Linear Data Structures\nIn non-linear data structures, elements are not stored sequentially. Instead, they are stored in a hierarchical or interconnected manner, where a single level of traversal does not suffice.\n\n### Characteristics of Non-Linear Data Structures:\n\n- **Hierarchical Relationship:** Elements form a hierarchy (parent-child relationships).\n- **Efficient Representation:** Suitable for representing complex relationships.\n- **Dynamic Nature:** Flexible in terms of growth and connections.\n\n### Examples:\n\n- **Tree:** A hierarchical structure with nodes connected in parent-child relationships.\n- **Graph:** A set of nodes connected by edges, useful for representing networks.\n\n### Advantages:\n\n- Efficient for representing complex data relationships.\n- Dynamic memory utilization.\n- Easier to model real-world relationships (like maps, networks, hierarchies).\n\n### Disadvantages:\n\n- More complex to implement and understand.\n- Requires more complex algorithms for traversal and manipulation.\n\n---\n\n## Summary:\n\n- **Linear Data Structures:** Involve sequential access and simpler implementations, but may not be suitable for hierarchical data.\n- **Non-Linear Data Structures:** Suitable for complex relationships and dynamic data, but more complex to implement and use.\n\nBy understanding both linear and non-linear data structures, you can choose the right tool for your data handling needs and write efficient programs!",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-1-10",
                                "question": "Which of the following is a non-linear data structure?",
                                "options": [
                                    "Queue",
                                    "Linked List",
                                    "Graph"
                                ],
                                "correctAnswer": "Graph",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-1-11",
                                "question": "What is a linked list primarily used for?",
                                "options": [
                                    "Storing elements in contiguous memory",
                                    "Dynamically allocating memory",
                                    "Sorting data"
                                ],
                                "correctAnswer": "Dynamically allocating memory",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-1-12",
                                "question": "Which data structure is best for implementing a priority queue?",
                                "options": [
                                    "Array",
                                    "Stack",
                                    "Heap"
                                ],
                                "correctAnswer": "Heap",
                                "userAnswer": ""
                            }
                        ]
                    }
                ],
                "assessment": {
                    "questions": [
                        {
                            "questionId": "assess-1-1",
                            "question": "Which data structure uses the Last In, First Out (LIFO) principle?",
                            "options": [
                                "Queue",
                                "Stack",
                                "Array"
                            ],
                            "correctAnswer": "Stack",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-1-2",
                            "question": "What is the time complexity of accessing an element in an array?",
                            "options": [
                                "O(1)",
                                "O(n)",
                                "O(log n)"
                            ],
                            "correctAnswer": "O(1)",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-1-3",
                            "question": "Which of the following data structures is used to implement recursion?",
                            "options": [
                                "Queue",
                                "Stack",
                                "Linked List"
                            ],
                            "correctAnswer": "Stack",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-1-4",
                            "question": "What is the worst-case time complexity of linear search?",
                            "options": [
                                "O(1)",
                                "O(n)",
                                "O(log n)"
                            ],
                            "correctAnswer": "O(n)",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-1-5",
                            "question": "Which algorithm is used to find the shortest path in a graph?",
                            "options": [
                                "Dijkstra's algorithm",
                                "Bubble sort",
                                "Merge sort"
                            ],
                            "correctAnswer": "Dijkstra's algorithm",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-1-6",
                            "question": "What is the primary advantage of a linked list over an array?",
                            "options": [
                                "Constant time access",
                                "Dynamic memory allocation",
                                "Less memory usage"
                            ],
                            "correctAnswer": "Dynamic memory allocation",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-1-7",
                            "question": "Which data structure follows the First In, First Out (FIFO) principle?",
                            "options": [
                                "Stack",
                                "Queue",
                                "Array"
                            ],
                            "correctAnswer": "Queue",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-1-8",
                            "question": "Which of the following is a divide-and-conquer algorithm?",
                            "options": [
                                "Bubble sort",
                                "Quick sort",
                                "Insertion sort"
                            ],
                            "correctAnswer": "Quick sort",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-1-9",
                            "question": "What is the space complexity of an adjacency matrix for a graph with n vertices?",
                            "options": [
                                "O(n)",
                                "O(n^2)",
                                "O(log n)"
                            ],
                            "correctAnswer": "O(n^2)",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-1-10",
                            "question": "Which operation is used to add an element to the end of a queue?",
                            "options": [
                                "Push",
                                "Enqueue",
                                "Insert"
                            ],
                            "correctAnswer": "Enqueue",
                            "userAnswer": ""
                        }
                    ]
                }
            },
            {
                "chapterId": "ch-2",
                "title": "Arrays, Strings, and Linked Lists",
                "unlocked": false,
                "modules": [
                    {
                        "moduleId": "mod-2-1",
                        "title": "Introduction to Arrays",
                        "content": "## Arrays: Basics, Accessing Elements, and Basic Operations\n\n## Introduction to Arrays\n\nAn array is a collection of elements stored at contiguous memory locations.\n\n- Arrays can store multiple values of the same type.\n- Each element in an array is identified by its index (starting from 0).\n\n**Example:**\n\n```java\nint[] numbers = {10, 20, 30, 40, 50};\n```\n\nHere, `numbers` is an array of integers.\n\n---\n\n## Accessing Elements in an Array\n\nUse the index to access or modify elements.\n\n**Syntax:**\n\n```java\narrayName[index];\n```\n\n**Example:**\n\n```java\nint firstElement = numbers[0]; // Accessing the first element: 10\nnumbers[2] = 35; // Modifying the third element to 35\n```\n\n---\n\n## Basic Operations on Arrays\n\n### 1. Traversing an Array\n\n- Loop through each element using a `for` loop or `for-each` loop.\n\n**Example:**\n\n```java\nfor (int i = 0; i < numbers.length; i++) {\n    System.out.println(numbers[i]);\n}\n```\n\n---\n\n### 2. Inserting an Element\n\n- Arrays have a fixed size, and to insert at a specific position, you need to shift elements manually.\n\n**Example:**\n\n```java\nint[] numbers = {10, 20, 30, 40, 50};\nint position = 2;\nint newElement = 25;\nfor (int i = numbers.length - 1; i > position; i--) {\n    numbers[i] = numbers[i - 1];\n}\nnumbers[position] = newElement;\n```\n\n---\n\n### 3. Updating an Element\n\n- Directly assign a new value to a specific index.\n\n**Example:**\n\n```java\nnumbers[1] = 22; // Update second element to 22\n```\n\n---\n\n### 4. Deleting an Element\n\n- Deleting involves shifting elements to the left.\n\n**Example:**\n\n```java\nint position = 3;\nfor (int i = position; i < numbers.length - 1; i++) {\n    numbers[i] = numbers[i + 1];\n}\nnumbers[numbers.length - 1] = 0; // Optional: Set last element to 0\n```\n\n---\n\n### 5. Finding an Element\n\n- Use a loop to check if the element exists.\n\n**Example:**\n\n```java\nint target = 40;\nboolean found = false;\nfor (int number : numbers) {\n    if (number == target) {\n        found = true;\n        break;\n    }\n}\nSystem.out.println(found ? \"Element found\" : \"Element not found\");\n```\n\n---\n\n## Summary\n\n- Arrays store fixed-size collections of elements of the same type.\n- Elements are accessed using indices.\n- Common operations include:\n  - Traversing\n  - Inserting\n  - Updating\n  - Deleting\n  - Searching\n- Arrays are foundational structures in programming, useful for managing lists of data efficiently.",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-2-1",
                                "question": "What is the time complexity of inserting an element at the end of an array?",
                                "options": [
                                    "O(1)",
                                    "O(n)",
                                    "O(log n)"
                                ],
                                "correctAnswer": "O(1)",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-2-2",
                                "question": "Which operation in an array requires shifting elements?",
                                "options": [
                                    "Insert at the end",
                                    "Insert at the beginning",
                                    "Accessing an element"
                                ],
                                "correctAnswer": "Insert at the beginning",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-2-3",
                                "question": "What is the index of the first element in a zero-indexed array?",
                                "options": [
                                    "0",
                                    "1",
                                    "-1"
                                ],
                                "correctAnswer": "0",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-2-2",
                        "title": "Strings and String Manipulation",
                        "content": "## Learn How to Manipulate Strings and Perform Operations Like Concatenation and Substring Search\n\n## Introduction to Strings\n- Strings in Java are objects that represent sequences of characters.\n- Strings are **immutable**, meaning once created, they cannot be changed.\n\n**Example:**\n\n```java\nString greeting = \"Hello\";\n```\n\n---\n\n## String Concatenation\nConcatenation means joining two or more strings together.\n\n### 1. Using `+` Operator\n```java\nString firstName = \"John\";\nString lastName = \"Doe\";\nString fullName = firstName + \" \" + lastName;\nSystem.out.println(fullName); // Output: John Doe\n```\n\n### 2. Using `concat()` Method\n```java\nString hello = \"Hello\";\nString world = \"World\";\nString result = hello.concat(\" \").concat(world);\nSystem.out.println(result); // Output: Hello World\n```\n\n---\n\n## Substring Search\nTo check if a string contains a specific sequence of characters.\n\n### 1. Using `contains()` Method\n```java\nString sentence = \"Java is powerful.\";\nboolean hasJava = sentence.contains(\"Java\");\nSystem.out.println(hasJava); // Output: true\n```\n\n### 2. Using `indexOf()` Method\nFinds the position of the substring. Returns `-1` if not found.\n```java\nString text = \"Learn Java programming.\";\nint position = text.indexOf(\"Java\");\nSystem.out.println(position); // Output: 6\n```\n\n### 3. Using `startsWith()` and `endsWith()`\n```java\nString filename = \"example.txt\";\nSystem.out.println(filename.endsWith(\".txt\")); // Output: true\nSystem.out.println(filename.startsWith(\"exam\")); // Output: true\n```\n\n---\n\n## Extracting Substrings\nUse `substring()` method to extract parts of a string.\n```java\nString message = \"Hello, World!\";\nString extracted = message.substring(7, 12);\nSystem.out.println(extracted); // Output: World\n```\n\n---\n\n## Summary\n- Strings are immutable sequences of characters.\n- Concatenation can be done using `+` or `concat()`.\n- Substring search methods include `contains()`, `indexOf()`, `startsWith()`, and `endsWith()`.\n- Use `substring()` to extract parts of a string.\n- String manipulation is essential for tasks like parsing input, formatting output, and data validation.",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-2-4",
                                "question": "Which function is used to find the length of a string in Java?",
                                "options": [
                                    "size()",
                                    "length()",
                                    "getSize()"
                                ],
                                "correctAnswer": "length()",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-2-5",
                                "question": "Which of the following methods is used to concatenate two strings?",
                                "options": [
                                    "concat()",
                                    "append()",
                                    "merge()"
                                ],
                                "correctAnswer": "concat()",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-2-6",
                                "question": "Which of the following returns a substring from a string?",
                                "options": [
                                    "substring()",
                                    "sublist()",
                                    "subarray()"
                                ],
                                "correctAnswer": "substring()",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-2-3",
                        "title": "Introduction to Linked Lists",
                        "content": "## Understand the Structure and Types of Linked Lists and Basic Operations\n\n## What is a Linked List?\n- A **Linked List** is a linear data structure where elements (nodes) are connected using pointers.\n- Each node contains:\n  - **Data**: The value stored in the node.\n  - **Next**: Reference to the next node in the list.\n\n**Basic Node Structure:**\n\n```java\nclass Node {\nint data;\nNode next;\nNode(int data) {\nthis.data = data;\nthis.next = null;\n}\n}\n```\n\n---\n\n## Types of Linked Lists\n\n### 1. Singly Linked List\n- Each node points to the next node.\n- Traversal is one-directional.\n\n### 2. Doubly Linked List\n- Each node has two references: to the next and previous nodes.\n- Allows traversal in both directions.\n\n### 3. Circular Linked List\n- Last node points back to the first node.\n- Can be singly or doubly circular.\n\n---\n\n## Basic Operations on Linked Lists\n\n### 1. Insertion at the Beginning\n```java\nNode head = null;\nNode newNode = new Node(10);\nnewNode.next = head;\nhead = newNode;\n```\n\n### 2. Insertion at the End\n```java\nNode newNode = new Node(20);\nif (head == null) {\nhead = newNode;\n} else {\nNode temp = head;\nwhile (temp.next != null) {\ntemp = temp.next;\n}\ntemp.next = newNode;\n}\n```\n\n### 3. Deletion of a Node (by Value)\n```java\nint key = 10;\nNode temp = head, prev = null;\n// If head node holds the key\nif (temp != null && temp.data == key) {\nhead = temp.next;\n} else {\nwhile (temp != null && temp.data != key) {\nprev = temp;\ntemp = temp.next;\n}\nif (temp != null) {\nprev.next = temp.next;\n}\n}\n```\n\n### 4. Traversal of the Linked List\n```java\nNode temp = head;\nwhile (temp != null) {\nSystem.out.print(temp.data + \" \");\ntemp = temp.next;\n}\n// Output: Data of each node\n```\n\n### 5. Searching for an Element\n```java\nint target = 30;\nNode temp = head;\nboolean found = false;\nwhile (temp != null) {\nif (temp.data == target) {\nfound = true;\nbreak;\n}\ntemp = temp.next;\n}\nSystem.out.println(found ? \"Element found\" : \"Element not found\");\n```\n\n---\n\n## Summary\n- Linked Lists consist of nodes connected through pointers.\n- Types include **Singly**, **Doubly**, and **Circular** Linked Lists.\n- Common operations:\n  - Insertion (beginning, end)\n  - Deletion\n  - Traversal\n  - Search\n- Linked Lists offer dynamic memory allocation, unlike arrays.\n- Efficient insertions and deletions but slower random access.",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-2-7",
                                "question": "What is the main advantage of a linked list over an array?",
                                "options": [
                                    "Faster access",
                                    "Dynamic memory allocation",
                                    "Fixed size"
                                ],
                                "correctAnswer": "Dynamic memory allocation",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-2-8",
                                "question": "Which pointer in a singly linked list points to the next node?",
                                "options": [
                                    "prev",
                                    "next",
                                    "head"
                                ],
                                "correctAnswer": "next",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-2-9",
                                "question": "Which type of linked list has nodes with pointers to both the next and previous nodes?",
                                "options": [
                                    "Singly linked list",
                                    "Doubly linked list",
                                    "Circular linked list"
                                ],
                                "correctAnswer": "Doubly linked list",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-2-4",
                        "title": "Operations on Linked Lists",
                        "content" : "## Perform Insertion, Deletion, and Traversal Operations on Linked Lists\n\n## What is a Linked List?\n\nA **Linked List** is a linear data structure where elements (nodes) are connected by pointers. Each node contains:\n- **Data:** Value of the node.\n- **Next:** Reference to the next node in the list.\n\n```java\nclass Node {\n int data;\n Node next;\n\n Node(int data) {\n this.data = data;\n this.next = null;\n }\n}\n```\n\n---\n\n## Insertion Operations\n\n### 1. Insertion at the Beginning\n\n- Add a new node before the current head.\n\n```java\nNode newNode = new Node(10);\nnewNode.next = head;\nhead = newNode;\n```\n\n### 2. Insertion at the End\n\n- Traverse to the last node and insert.\n\n```java\nNode newNode = new Node(20);\nif (head == null) {\n head = newNode;\n} else {\n Node temp = head;\n while (temp.next != null) {\n temp = temp.next;\n }\n temp.next = newNode;\n}\n```\n\n### 3. Insertion at a Specific Position\n\n- Insert after traversing to the desired position.\n\n```java\nint position = 2;\nNode newNode = new Node(30);\nNode temp = head;\nfor (int i = 0; i < position - 1 && temp != null; i++) {\n temp = temp.next;\n}\nif (temp != null) {\n newNode.next = temp.next;\n temp.next = newNode;\n}\n```\n\n---\n\n## Deletion Operations\n\n### 1. Delete by Value\n\n- Find the node and adjust pointers.\n\n```java\nint key = 10;\nNode temp = head, prev = null;\n\nif (temp != null && temp.data == key) {\n head = temp.next;\n} else {\n while (temp != null && temp.data != key) {\n prev = temp;\n temp = temp.next;\n }\n if (temp != null) {\n prev.next = temp.next;\n }\n}\n```\n\n### 2. Delete at a Specific Position\n\n```java\nint position = 2;\nNode temp = head;\n\nif (position == 0 && head != null) {\n head = head.next;\n} else {\n for (int i = 0; temp != null && i < position - 1; i++) {\n temp = temp.next;\n }\n if (temp != null && temp.next != null) {\n temp.next = temp.next.next;\n }\n}\n```\n\n---\n\n## Traversal Operation\n\n- Go through each node and print data.\n\n```java\nNode temp = head;\nwhile (temp != null) {\n System.out.print(temp.data + \" \");\n temp = temp.next;\n}\n// Output: Data of each node\n```\n\n---\n\n## Summary\n\n- **Insertion:** Add nodes at beginning, end, or specific positions.\n- **Deletion:** Remove nodes by value or position.\n- **Traversal:** Visit each node to access or display data.\n- Linked Lists provide flexibility with dynamic memory allocation.\n\n> Mastering these operations builds a strong foundation for working with complex data structures like stacks, queues, and graphs!",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-2-10",
                                "question": "What is the time complexity of inserting an element at the beginning of a singly linked list?",
                                "options": [
                                    "O(1)",
                                    "O(n)",
                                    "O(log n)"
                                ],
                                "correctAnswer": "O(1)",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-2-11",
                                "question": "Which operation involves updating the next pointer of the last node in a linked list?",
                                "options": [
                                    "Insertion at beginning",
                                    "Insertion at end",
                                    "Deletion from end"
                                ],
                                "correctAnswer": "Insertion at end",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-2-12",
                                "question": "How do you traverse a singly linked list?",
                                "options": [
                                    "Using next pointers",
                                    "Using prev pointers",
                                    "Using head pointer only"
                                ],
                                "correctAnswer": "Using next pointers",
                                "userAnswer": ""
                            }
                        ]
                    }
                ],
                "assessment": {
                    "questions": [
                        {
                            "questionId": "assess-2-1",
                            "question": "What is the time complexity of searching an element in an unsorted array?",
                            "options": [
                                "O(1)",
                                "O(n)",
                                "O(log n)"
                            ],
                            "correctAnswer": "O(n)",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-2-2",
                            "question": "Which data structure is best for implementing undo functionality?",
                            "options": [
                                "Queue",
                                "Stack",
                                "Linked List"
                            ],
                            "correctAnswer": "Stack",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-2-3",
                            "question": "What is the time complexity of reversing a linked list?",
                            "options": [
                                "O(1)",
                                "O(n)",
                                "O(log n)"
                            ],
                            "correctAnswer": "O(n)",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-2-4",
                            "question": "Which of the following is a mutable data structure?",
                            "options": [
                                "String",
                                "Array",
                                "Tuple"
                            ],
                            "correctAnswer": "Array",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-2-5",
                            "question": "What is the space complexity of storing a string of length n?",
                            "options": [
                                "O(1)",
                                "O(n)",
                                "O(log n)"
                            ],
                            "correctAnswer": "O(n)",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-2-6",
                            "question": "Which of the following is true for a circular linked list?",
                            "options": [
                                "Last node points to null",
                                "Last node points to the head",
                                "Nodes point in both directions"
                            ],
                            "correctAnswer": "Last node points to the head",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-2-7",
                            "question": "What is the time complexity for accessing an element in a linked list?",
                            "options": [
                                "O(1)",
                                "O(n)",
                                "O(log n)"
                            ],
                            "correctAnswer": "O(n)",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-2-8",
                            "question": "Which function is used to compare two strings in Java?",
                            "options": [
                                "equals()",
                                "compareTo()",
                                "compare()"
                            ],
                            "correctAnswer": "equals()",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-2-9",
                            "question": "Which linked list operation requires updating the previous node's next pointer?",
                            "options": [
                                "Insertion at the end",
                                "Deletion from the middle",
                                "Traversal"
                            ],
                            "correctAnswer": "Deletion from the middle",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-2-10",
                            "question": "Which property ensures that a linked list does not end?",
                            "options": [
                                "Singly linked list",
                                "Doubly linked list",
                                "Circular linked list"
                            ],
                            "correctAnswer": "Circular linked list",
                            "userAnswer": ""
                        }
                    ]
                }
            },
            {
                "chapterId": "ch-3",
                "title": "Stacks, Queues, and Hashing",
                "unlocked": false,
                "modules": [
                    {
                        "moduleId": "mod-3-1",
                        "title": "Introduction to Stacks",
                        "content": "## Learn the Basics of Stacks, LIFO Principle, and Operations such as Push, Pop, and Peek\n\n\n\nA **Stack** is a linear data structure that follows the **LIFO** principle:\n- **LIFO:** Last In, First Out.\n- The last element added is the first one to be removed.\n\nCommon real-world examples:\n- Pile of plates.\n- Undo operations in text editors.\n\n---\n\n## Stack Operations\n\n### 1. Push (Insert Element)\n- Add an element to the top of the stack.\n\n```java\nStack stack = new Stack<>();\nstack.push(10);\nstack.push(20);\nstack.push(30);\n// Stack: [10, 20, 30]\n```\n\n### 2. Pop (Remove Element)\n- Remove the top element from the stack.\n\n```java\nint removedElement = stack.pop();\nSystem.out.println(\"Popped element: \" + removedElement);\n// Output: Popped element: 30\n// Stack after pop: [10, 20]\n```\n\n### 3. Peek (View Top Element)\n- View the top element without removing it.\n\n```java\nint topElement = stack.peek();\nSystem.out.println(\"Top element: \" + topElement);\n// Output: Top element: 20\n```\n\n### 4. isEmpty (Check if Stack is Empty)\n- Check whether the stack has elements.\n\n```java\nif (stack.isEmpty()) {\n System.out.println(\"Stack is empty\");\n} else {\n System.out.println(\"Stack is not empty\");\n}\n```\n\n### 5. Size (Get Stack Size)\n- Get the number of elements in the stack.\n\n```java\nSystem.out.println(\"Stack size: \" + stack.size());\n```\n\n---\n\n## LIFO Principle Explained\n\n- The last element **pushed** is the first one to be **popped**.\n- Stack behaves like a container where additions and removals happen at one end (the top).\n\n> **Example:**\n> Push: 10 → 20 → 30\n> Stack: [10, 20, 30]\n> Pop: 30 (removed first)\n\n---\n\n## Summary\n\n- **Stack** uses LIFO order for operations.\n- **Push:** Add element to top.\n- **Pop:** Remove element from top.\n- **Peek:** View top element without removing.\n- **isEmpty & size:** Useful utility methods.\n\n> Stacks are widely used in function call management, expression evaluation, undo mechanisms, and more!",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-3-1",
                                "question": "Which principle does a stack follow?",
                                "options": [
                                    "FIFO",
                                    "LIFO",
                                    "Random Access"
                                ],
                                "correctAnswer": "LIFO",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-3-2",
                                "question": "What is the time complexity of pushing an element onto a stack?",
                                "options": [
                                    "O(1)",
                                    "O(n)",
                                    "O(log n)"
                                ],
                                "correctAnswer": "O(1)",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-3-3",
                                "question": "Which operation removes the top element from a stack?",
                                "options": [
                                    "push()",
                                    "pop()",
                                    "peek()"
                                ],
                                "correctAnswer": "pop()",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-3-2",
                        "title": "Introduction to Queues",
                        "content": "## Understand Queues, FIFO Principle, and Operations like Enqueue, Dequeue, and Peek\n\n## What is a Queue?\n\nA **Queue** is a linear data structure that follows the **FIFO** principle:\n- **FIFO:** First In, First Out.\n- The element that is added first is the one to be removed first.\n\nReal-world examples:\n- Waiting line at a ticket counter.\n- Print queue in a printer.\n\n---\n\n## Queue Operations\n\n### 1. Enqueue (Insert Element)\n- Add an element to the end (rear) of the queue.\n\n```java\nQueue queue = new LinkedList<>();\nqueue.add(10);\nqueue.add(20);\nqueue.add(30);\n// Queue: [10, 20, 30]\n```\n\n### 2. Dequeue (Remove Element)\n- Remove the element from the front of the queue.\n\n```java\nint removedElement = queue.poll();\nSystem.out.println(\"Dequeued element: \" + removedElement);\n// Output: Dequeued element: 10\n// Queue after dequeue: [20, 30]\n```\n\n### 3. Peek (View Front Element)\n- View the front element without removing it.\n\n```java\nint frontElement = queue.peek();\nSystem.out.println(\"Front element: \" + frontElement);\n// Output: Front element: 20\n```\n\n### 4. isEmpty (Check if Queue is Empty)\n- Check whether the queue has elements.\n\n```java\nif (queue.isEmpty()) {\n System.out.println(\"Queue is empty\");\n} else {\n System.out.println(\"Queue is not empty\");\n}\n```\n\n### 5. Size (Get Queue Size)\n- Get the number of elements in the queue.\n\n```java\nSystem.out.println(\"Queue size: \" + queue.size());\n```\n\n---\n\n## FIFO Principle Explained\n\n- The first element **enqueued** is the first to be **dequeued**.\n- Queue behaves like a line where the first person to enter is the first one to exit.\n\n> **Example:**\n> Enqueue: 10 → 20 → 30\n> Queue: [10, 20, 30]\n> Dequeue: 10 (removed first)\n\n---\n\n## Summary\n\n- **Queue** uses FIFO order for operations.\n- **Enqueue:** Add element at the rear.\n- **Dequeue:** Remove element from the front.\n- **Peek:** View front element without removing.\n- **isEmpty & size:** Useful utility methods.\n\n> Queues are commonly used in scheduling, buffering, and breadth-first search algorithms!",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-3-4",
                                "question": "Which principle does a queue follow?",
                                "options": [
                                    "FIFO",
                                    "LIFO",
                                    "Random Access"
                                ],
                                "correctAnswer": "FIFO",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-3-5",
                                "question": "What is the time complexity of inserting an element at the end of a queue?",
                                "options": [
                                    "O(1)",
                                    "O(n)",
                                    "O(log n)"
                                ],
                                "correctAnswer": "O(1)",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-3-6",
                                "question": "Which operation removes an element from the front of a queue?",
                                "options": [
                                    "enqueue()",
                                    "dequeue()",
                                    "peek()"
                                ],
                                "correctAnswer": "dequeue()",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-3-3",
                        "title": "Introduction to Hashing",
                        "content": "## Learn the Basics of Hashing, Hash Functions, and Collision Handling Techniques\n\n## What is Hashing?\n\n**Hashing** is a technique to convert a large amount of data into a fixed-size value (called a hash code) using a hash function.\n\n- Used in data structures like **HashMap**, **HashSet**, etc.\n- Provides fast access to data — ideally O(1) time complexity for insertion, deletion, and search.\n\n---\n\n## What is a Hash Function?\n\nA **Hash Function** maps keys to positions (buckets) in a hash table.\n\n- Good hash functions minimize collisions.\n- They uniformly distribute the data across the hash table.\n\n> **Example:**\n> ```java\n> int hashCode = key.hashCode();\n> int index = hashCode % tableSize;\n> ```\n\n### Java Example: Using HashMap\n\n```java\nMap map = new HashMap<>();\nmap.put(\"apple\", 2);\nmap.put(\"banana\", 5);\nmap.put(\"orange\", 3);\n\nSystem.out.println(map.get(\"banana\")); // Output: 5\n```\n\n---\n\n## Collision Handling Techniques\n\n**Collision** occurs when two keys map to the same index.\n\n### 1. Chaining (Separate Chaining)\n- Use a linked list (or another data structure) at each index to store multiple entries.\n\n> **Example:**\n> Multiple values stored at the same bucket.\n\n```java\n// Java's HashMap internally uses chaining to handle collisions.\nMap map = new HashMap<>();\nmap.put(1, \"One\");\nmap.put(17, \"Seventeen\"); // Assume table size is 16; both may hash to same bucket.\n```\n\n### 2. Open Addressing\n- Find the next open slot in the array if a collision occurs.\n- Techniques:\n - **Linear Probing**: Move to the next index.\n - **Quadratic Probing**: Use quadratic intervals.\n - **Double Hashing**: Use a second hash function.\n\n> **Example:**\n> Linear Probing: If index `i` is taken, check `i + 1`, `i + 2`, etc.\n\n---\n\n## Advantages of Hashing\n\n- Fast data access (on average O(1)).\n- Efficient for large datasets.\n- Widely used in caches, sets, and maps.\n\n## Disadvantages\n\n- Poorly designed hash functions can lead to many collisions.\n- Performance degrades with high load factors.\n\n---\n\n## Summary\n\n- **Hashing** maps data to a fixed-size index using hash functions.\n- A good hash function minimizes collisions.\n- **Collision handling techniques** include:\n - **Chaining** (storing multiple values at one index).\n - **Open Addressing** (finding alternative positions).\n- Hashing is essential for efficient data retrieval in real-world applications!\n\n> Hashing is the backbone of efficient lookup operations.",

                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-3-7",
                                "question": "What is the purpose of a hash function?",
                                "options": [
                                    "To sort data",
                                    "To map keys to indices",
                                    "To store elements sequentially"
                                ],
                                "correctAnswer": "To map keys to indices",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-3-8",
                                "question": "Which technique is used to handle collisions in hashing?",
                                "options": [
                                    "Chaining",
                                    "Sorting",
                                    "Merging"
                                ],
                                "correctAnswer": "Chaining",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-3-9",
                                "question": "Which of the following is an example of an ideal hash function property?",
                                "options": [
                                    "Minimal collisions",
                                    "Sequential storage",
                                    "Fixed key length"
                                ],
                                "correctAnswer": "Minimal collisions",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-3-4",
                        "title": "Applications of Stacks, Queues, and Hashing",
                        "content": "## Explore Real-World Applications of Stacks, Queues, and Hashing\n\n## Applications of Stacks\n\nStacks follow the **LIFO (Last In, First Out)** principle.\n\n### 1. Expression Evaluation\n- Used to evaluate **infix, prefix, and postfix** expressions.\n- Especially useful for parsing mathematical expressions and implementing calculators.\n\n> **Example:** Convert infix to postfix and then evaluate.\n\n```java\n// Simplified postfix evaluation\nStack stack = new Stack<>();\nfor (String token : postfixExpression) {\n if (isNumber(token)) {\n stack.push(Integer.parseInt(token));\n } else {\n int b = stack.pop();\n int a = stack.pop();\n stack.push(applyOperator(a, b, token));\n }\n}\nint result = stack.pop();\n```\n\n### 2. Undo Mechanism in Text Editors\n- Stacks store previous states.\n- Each operation is pushed onto the stack.\n- Undo pops the last state.\n\n### 3. Syntax Parsing\n- Compilers use stacks to check for balanced parentheses, braces, and brackets.\n\n---\n\n## Applications of Queues\n\nQueues follow the **FIFO (First In, First Out)** principle.\n\n### 1. Task Scheduling\n- Operating systems use queues to manage process scheduling.\n- Tasks are enqueued and executed in order.\n\n> **Example:** CPU scheduling queue\n\n```java\nQueue taskQueue = new LinkedList<>();\ntaskQueue.add(\"Task1\");\ntaskQueue.add(\"Task2\");\n\nwhile (!taskQueue.isEmpty()) {\n System.out.println(\"Processing: \" + taskQueue.poll());\n}\n```\n\n### 2. Printer Spooling\n- Print jobs are stored in a queue.\n- Jobs are processed in the order they arrive.\n\n### 3. Breadth-First Search (BFS) in Graphs\n- BFS uses a queue to explore nodes level by level.\n\n---\n\n## Applications of Hashing\n\nHashing provides **fast data access** and is widely used in many real-world applications.\n\n### 1. Indexing in Databases\n- Hashing helps in indexing database records for faster query performance.\n- Speeds up lookups and retrieval operations.\n\n### 2. Caching\n- Hash tables (like HashMap) are used in caching frequently accessed data.\n- Example: Web browsers cache pages.\n\n### 3. Password Storage (with Salted Hashing)\n- Passwords are stored as hashes for security.\n- Even if the database is compromised, raw passwords remain secure.\n\n> **Example:** Using Java's built-in hash code\n\n```java\nString password = \"mySecurePassword\";\nint hashedPassword = password.hashCode();\nSystem.out.println(hashedPassword);\n```\n\n### 4. Data Deduplication\n- Hashing identifies duplicate data by comparing hash values.\n\n---\n\n## Summary\n\n- **Stacks**: Ideal for expression evaluation, undo mechanisms, and syntax parsing.\n- **Queues**: Best for task scheduling, print spooling, and BFS traversal.\n- **Hashing**: Powers fast data access in indexing, caching, password storage, and more.\n\n> Mastering these applications will help you build efficient, real-world solutions!",

                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-3-10",
                                "question": "Which data structure is used for expression evaluation?",
                                "options": [
                                    "Queue",
                                    "Stack",
                                    "Linked List"
                                ],
                                "correctAnswer": "Stack",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-3-11",
                                "question": "Which data structure is commonly used for task scheduling?",
                                "options": [
                                    "Stack",
                                    "Queue",
                                    "Hash Table"
                                ],
                                "correctAnswer": "Queue",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-3-12",
                                "question": "What is the average time complexity of searching in a hash table with a good hash function?",
                                "options": [
                                    "O(1)",
                                    "O(n)",
                                    "O(log n)"
                                ],
                                "correctAnswer": "O(1)",
                                "userAnswer": ""
                            }
                        ]
                    }
                ],
                "assessment": {
                    "questions": [
                        {
                            "questionId": "assess-3-1",
                            "question": "What is the time complexity of accessing the top element of a stack?",
                            "options": [
                                "O(1)",
                                "O(n)",
                                "O(log n)"
                            ],
                            "correctAnswer": "O(1)",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-3-2",
                            "question": "Which data structure is used to implement recursion?",
                            "options": [
                                "Queue",
                                "Stack",
                                "Hash Table"
                            ],
                            "correctAnswer": "Stack",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-3-3",
                            "question": "What is the time complexity of inserting an element in a queue implemented using an array?",
                            "options": [
                                "O(1)",
                                "O(n)",
                                "O(log n)"
                            ],
                            "correctAnswer": "O(1)",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-3-4",
                            "question": "Which data structure is most suitable for implementing a priority queue?",
                            "options": [
                                "Stack",
                                "Queue",
                                "Heap"
                            ],
                            "correctAnswer": "Heap",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-3-5",
                            "question": "Which collision handling technique involves maintaining a list of all elements with the same hash value?",
                            "options": [
                                "Chaining",
                                "Open Addressing",
                                "Rehashing"
                            ],
                            "correctAnswer": "Chaining",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-3-6",
                            "question": "Which hashing technique probes for the next available slot in case of a collision?",
                            "options": [
                                "Chaining",
                                "Linear Probing",
                                "Double Hashing"
                            ],
                            "correctAnswer": "Linear Probing",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-3-7",
                            "question": "What is the time complexity of searching for an element in a hash table with chaining in the worst case?",
                            "options": [
                                "O(1)",
                                "O(n)",
                                "O(log n)"
                            ],
                            "correctAnswer": "O(n)",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-3-8",
                            "question": "What is the best-case time complexity of inserting an element into a hash table?",
                            "options": [
                                "O(1)",
                                "O(n)",
                                "O(log n)"
                            ],
                            "correctAnswer": "O(1)",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-3-9",
                            "question": "Which data structure uses a hash function to map data to key-value pairs?",
                            "options": [
                                "Stack",
                                "Queue",
                                "Hash Table"
                            ],
                            "correctAnswer": "Hash Table",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-3-10",
                            "question": "Which application uses a stack to maintain function calls?",
                            "options": [
                                "Task Scheduling",
                                "Recursion",
                                "Hashing"
                            ],
                            "correctAnswer": "Recursion",
                            "userAnswer": ""
                        }
                    ]
                }
            },
            {
                "chapterId": "ch-4",
                "title": "Trees and Graphs",
                "unlocked": false,
                "modules": [
                    {
                        "moduleId": "mod-4-1",
                        "title": "Introduction to Trees",
                        "content": "## Understand the Basics of Trees, Types, and Terminology\n\n## What is a Tree?\n\nA **tree** is a hierarchical data structure consisting of nodes connected by edges.\n- Unlike linear structures (like arrays, stacks, and queues), trees represent hierarchical relationships.\n\n---\n\n## Tree Terminology\n\n- **Root:** The topmost node in the tree.\n- **Parent:** A node that has edges leading to child nodes.\n- **Child:** Nodes directly connected to a parent node.\n- **Leaf:** Nodes with no children (also called terminal nodes).\n- **Height:** The length of the longest path from the root to a leaf node.\n- **Depth:** The distance from the root to the node.\n- **Subtree:** A tree consisting of a node and its descendants.\n\n> **Visual Example:**\n>\n> ```\n> 1 (Root)\n> / \\\n> 2 3 (Children of 1)\n> / \\\n> 4 5 (Children of 2, Leaves)\n> ```\n\n---\n\n## Types of Trees\n\n### 1. Binary Tree\n- Each node has at most **two children** (left and right).\n\n### 2. Binary Search Tree (BST)\n- Left child < Parent < Right child\n- Enables fast lookup, insertion, and deletion.\n\n### 3. Balanced Tree (e.g., AVL Tree, Red-Black Tree)\n- Maintains balance to ensure operations remain efficient (O(log n)).\n\n### 4. N-ary Tree\n- A node can have **more than two children**.\n\n### 5. Trie (Prefix Tree)\n- Specialized tree used in retrieval of strings, such as autocomplete features.\n\n### 6. Heap\n- A complete binary tree used in priority queues.\n\n---\n\n## Java Example: Basic Tree Node\n\n```java\nclass TreeNode {\n int data;\n TreeNode left, right;\n\n TreeNode(int value) {\n data = value;\n left = right = null;\n }\n}\n```\n\n> **Usage:**\n> - Create a node: `TreeNode root = new TreeNode(1);`\n> - Add children: `root.left = new TreeNode(2); root.right = new TreeNode(3);`\n\n---\n\n## Why Learn Trees?\n\n- Efficient hierarchical data representation.\n- Used in databases, compilers, file systems, and more.\n- Backbone for algorithms like search, sort, and graph traversals.\n\n> Trees are fundamental for solving complex problems efficiently!",

                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-4-1",
                                "question": "What is the root of a tree?",
                                "options": [
                                    "The topmost node",
                                    "A node with no children",
                                    "A node with one child"
                                ],
                                "correctAnswer": "The topmost node",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-4-2",
                                "question": "Which type of tree has at most two children per node?",
                                "options": [
                                    "Binary Tree",
                                    "Binary Search Tree",
                                    "AVL Tree"
                                ],
                                "correctAnswer": "Binary Tree",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-4-3",
                                "question": "What is the height of a tree with a single node?",
                                "options": [
                                    "0",
                                    "1",
                                    "2"
                                ],
                                "correctAnswer": "0",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-4-2",
                        "title": "Tree Traversal Techniques",
                        "content": "## Explore Tree Traversal Techniques: Inorder, Preorder, and Postorder\n\n## What is Tree Traversal?\n\nTree traversal refers to the process of visiting each node in the tree **exactly once** in a specific order.\n\nThere are primarily two categories:\n- **Depth-First Traversal:** Inorder, Preorder, Postorder\n- **Breadth-First Traversal:** Level-order (optional for this topic)\n\n---\n\n## Types of Depth-First Traversal\n\n### 1. Inorder Traversal (Left, Root, Right)\n\n- Traverse the left subtree.\n- Visit the root node.\n- Traverse the right subtree.\n\n> **Example:**\n>\n> ```\n> 1\n> / \\\n> 2 3\n> / \\\n> 4 5\n> ```\n>\n> **Inorder:** 4 → 2 → 5 → 1 → 3\n\n**Java Implementation:**\n\n```java\nvoid inorder(TreeNode node) {\n if (node != null) {\n inorder(node.left);\n System.out.print(node.data + \" \");\n inorder(node.right);\n }\n}\n```\n\n---\n\n### 2. Preorder Traversal (Root, Left, Right)\n\n- Visit the root node.\n- Traverse the left subtree.\n- Traverse the right subtree.\n\n> **Example:**\n>\n> **Preorder:** 1 → 2 → 4 → 5 → 3\n\n**Java Implementation:**\n\n```java\nvoid preorder(TreeNode node) {\n if (node != null) {\n System.out.print(node.data + \" \");\n preorder(node.left);\n preorder(node.right);\n }\n}\n```\n\n---\n\n### 3. Postorder Traversal (Left, Right, Root)\n\n- Traverse the left subtree.\n- Traverse the right subtree.\n- Visit the root node.\n\n> **Example:**\n>\n> **Postorder:** 4 → 5 → 2 → 3 → 1\n\n**Java Implementation:**\n\n```java\nvoid postorder(TreeNode node) {\n if (node != null) {\n postorder(node.left);\n postorder(node.right);\n System.out.print(node.data + \" \");\n }\n}\n```\n\n---\n\n## Summary\n\n- **Inorder Traversal:** Left → Root → Right\n- **Preorder Traversal:** Root → Left → Right\n- **Postorder Traversal:** Left → Right → Root\n\n> Tree traversal techniques help in processing tree data effectively, whether you're printing values, saving trees, or evaluating expressions!\n\n🌳 **Master these traversals to unlock the true power of trees!**",

                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-4-4",
                                "question": "Which traversal technique visits the left subtree, the root, and then the right subtree?",
                                "options": [
                                    "Preorder",
                                    "Inorder",
                                    "Postorder"
                                ],
                                "correctAnswer": "Inorder",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-4-5",
                                "question": "Which traversal technique visits the root first, followed by the left and right subtrees?",
                                "options": [
                                    "Preorder",
                                    "Inorder",
                                    "Postorder"
                                ],
                                "correctAnswer": "Preorder",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-4-6",
                                "question": "In which traversal does the root get visited last?",
                                "options": [
                                    "Preorder",
                                    "Inorder",
                                    "Postorder"
                                ],
                                "correctAnswer": "Postorder",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-4-3",
                        "title": "Introduction to Graphs",
                        "content": "## Learn the Fundamentals of Graphs, Types of Graphs, and Graph Representations\n\n## What is a Graph?\n\nA **graph** is a collection of **nodes (vertices)** and **edges** that connect pairs of nodes.\n\nGraphs are used to model relationships and connections in various real-world applications like social networks, maps, and recommendation systems.\n\n---\n\n## Types of Graphs\n\n1. **Directed Graph (Digraph):** - Edges have a direction. - Example: Twitter (follower relationship).\n\n2. **Undirected Graph:** - Edges do not have a direction. - Example: Facebook (friendship).\n\n3. **Weighted Graph:** - Edges have weights or costs. - Example: Google Maps (distance between locations).\n\n4. **Unweighted Graph:** - Edges do not have weights.\n\n5. **Cyclic Graph:** - Contains at least one cycle.\n\n6. **Acyclic Graph:** - Does not contain any cycle.\n\n---\n\n## Graph Representations\n\n### 1. **Adjacency Matrix**\n\n- A 2D array where `matrix[i][j] = 1` if there is an edge from vertex `i` to `j`. - Space Complexity: O(V²), where V is the number of vertices.\n\n**Example:**\n\n> Vertices: A, B, C \n> Edges: A → B, B → C\n\n**Java Implementation:**\n\n```java\nint V = 3;\nint[][] adjMatrix = new int[V][V];\n\n// Edge A -> B\nadjMatrix[0][1] = 1;\n// Edge B -> C\nadjMatrix[1][2] = 1;\n```\n\n--- \n\n### 2. **Adjacency List**\n\n- An array of lists. Each vertex has a list of adjacent vertices. - Space-efficient for sparse graphs.\n\n**Example:**\n\n> Vertices: A, B, C \n> Edges: A → B, B → C\n\n**Java Implementation:**\n\n```java\nList<List<Integer>> adjList = new ArrayList<>();\n\nfor (int i = 0; i < 3; i++) {\n adjList.add(new ArrayList<>());\n}\n\n// Edge A -> B\nadjList.get(0).add(1);\n// Edge B -> C\nadjList.get(1).add(2);\n```\n\n---\n\n## Summary\n\n- **Adjacency Matrix:** Space Complexity: O(V²), Best for dense graphs.\n- **Adjacency List:** Space Complexity: O(V + E), Best for sparse graphs.\n\n> Graphs are a powerful way to represent relationships between data. Choosing the right representation depends on the problem at hand!\n\n**Master graphs to solve complex network problems efficiently!**",

                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-4-7",
                                "question": "What is an undirected graph?",
                                "options": [
                                    "A graph where edges have no direction",
                                    "A graph where edges have a specific direction",
                                    "A graph where all nodes are connected"
                                ],
                                "correctAnswer": "A graph where edges have no direction",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-4-8",
                                "question": "Which graph representation uses a 2D array to store edge information?",
                                "options": [
                                    "Adjacency List",
                                    "Adjacency Matrix",
                                    "Edge List"
                                ],
                                "correctAnswer": "Adjacency Matrix",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-4-9",
                                "question": "What is the space complexity of an adjacency list for a graph with V vertices and E edges?",
                                "options": [
                                    "O(V^2)",
                                    "O(V + E)",
                                    "O(E log V)"
                                ],
                                "correctAnswer": "O(V + E)",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-4-4",
                        "title": "Graph Traversal Algorithms",
                        "content": "## Understand Graph Traversal Algorithms: Depth-First Search (DFS) and Breadth-First Search (BFS)\n\n## What is Graph Traversal?\n\nGraph traversal means visiting all the nodes (vertices) in a graph systematically.\nTwo popular algorithms for graph traversal are:\n- **Depth-First Search (DFS)**\n- **Breadth-First Search (BFS)**\n\nBoth algorithms help in searching, pathfinding, and exploring connected components.\n\n---\n\n## Depth-First Search (DFS)\n\n- Explores as far as possible along each branch before backtracking.\n- Can be implemented using **recursion** or an **explicit stack**.\n\n### When to Use DFS:\n- To explore all paths.\n- For topological sorting.\n- Detecting cycles in a graph.\n\n> **Time Complexity:** O(V + E)\n> **Space Complexity:** O(V) (for visited nodes and recursion stack)\n\n**Java Example:**\n\n```java\nvoid dfs(int node, boolean[] visited, List<List<Integer>> adjList) {\n visited[node] = true;\n System.out.print(node + \" \");\n\n for (int neighbor : adjList.get(node)) {\n if (!visited[neighbor]) {\n dfs(neighbor, visited, adjList);\n }\n }\n}\n```\n\n---\n\n## Breadth-First Search (BFS)\n\n- Explores all neighbors at the current depth before moving to the next depth level.\n- Implemented using a **queue**.\n\n### When to Use BFS:\n- Finding the shortest path in an unweighted graph.\n- Level-order traversal.\n- Checking graph connectivity.\n\n> **Time Complexity:** O(V + E)\n> **Space Complexity:** O(V) (for visited nodes and queue)\n\n**Java Example:**\n\n```java\nvoid bfs(int startNode, List<List<Integer>> adjList) {\n boolean[] visited = new boolean[adjList.size()];\n Queue<Integer> queue = new LinkedList<>();\n\n queue.add(startNode);\n visited[startNode] = true;\n\n while (!queue.isEmpty()) {\n int node = queue.poll();\n System.out.print(node + \" \");\n\n for (int neighbor : adjList.get(node)) {\n if (!visited[neighbor]) {\n queue.add(neighbor);\n visited[neighbor] = true;\n }\n }\n }\n}\n```\n\n---\n\n## Summary\n\n- **DFS:** Uses Stack/Recursion; Best for exploring all paths, cycle detection.\n- **BFS:** Uses Queue; Best for shortest path, level-order traversal.\n\n> 🌟 **Tip:** Practice both DFS and BFS on different graph problems to master traversal techniques!\n\n**Understanding DFS and BFS is key to solving many real-world graph problems!**",

                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-4-10",
                                "question": "Which graph traversal algorithm uses a stack or recursion?",
                                "options": [
                                    "BFS",
                                    "DFS",
                                    "Dijkstra's Algorithm"
                                ],
                                "correctAnswer": "DFS",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-4-11",
                                "question": "Which graph traversal algorithm explores neighbors before visiting children?",
                                "options": [
                                    "DFS",
                                    "BFS",
                                    "Prim's Algorithm"
                                ],
                                "correctAnswer": "BFS",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-4-12",
                                "question": "Which data structure is typically used to implement BFS?",
                                "options": [
                                    "Stack",
                                    "Queue",
                                    "Heap"
                                ],
                                "correctAnswer": "Queue",
                                "userAnswer": ""
                            }
                        ]
                    }
                ],
                "assessment": {
                    "questions": [
                        {
                            "questionId": "assess-4-1",
                            "question": "What is the time complexity of inorder, preorder, and postorder traversal in a binary tree?",
                            "options": [
                                "O(n)",
                                "O(log n)",
                                "O(n^2)"
                            ],
                            "correctAnswer": "O(n)",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-4-2",
                            "question": "What is the maximum number of edges in a complete undirected graph with V vertices?",
                            "options": [
                                "V",
                                "V^2",
                                "V(V-1)/2"
                            ],
                            "correctAnswer": "V(V-1)/2",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-4-3",
                            "question": "Which of the following algorithms is used to detect a cycle in a graph?",
                            "options": [
                                "DFS",
                                "BFS",
                                "Dijkstra's Algorithm"
                            ],
                            "correctAnswer": "DFS",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-4-4",
                            "question": "Which graph representation is more space-efficient for a sparse graph?",
                            "options": [
                                "Adjacency Matrix",
                                "Adjacency List",
                                "Edge List"
                            ],
                            "correctAnswer": "Adjacency List",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-4-5",
                            "question": "Which of the following algorithms finds the shortest path in a weighted graph?",
                            "options": [
                                "DFS",
                                "BFS",
                                "Dijkstra's Algorithm"
                            ],
                            "correctAnswer": "Dijkstra's Algorithm",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-4-6",
                            "question": "What is the time complexity of BFS in a graph with V vertices and E edges?",
                            "options": [
                                "O(V+E)",
                                "O(V^2)",
                                "O(E log V)"
                            ],
                            "correctAnswer": "O(V+E)",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-4-7",
                            "question": "Which property holds true for a binary search tree?",
                            "options": [
                                "Left subtree has greater values",
                                "Right subtree has smaller values",
                                "Left subtree has smaller values"
                            ],
                            "correctAnswer": "Left subtree has smaller values",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-4-8",
                            "question": "Which traversal technique is used to get a sorted order of elements in a binary search tree?",
                            "options": [
                                "Preorder",
                                "Inorder",
                                "Postorder"
                            ],
                            "correctAnswer": "Inorder",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-4-9",
                            "question": "Which algorithm is used to find the minimum spanning tree of a graph?",
                            "options": [
                                "DFS",
                                "Kruskal's Algorithm",
                                "Dijkstra's Algorithm"
                            ],
                            "correctAnswer": "Kruskal's Algorithm",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-4-10",
                            "question": "What is the space complexity of storing a graph with V vertices and E edges using an adjacency matrix?",
                            "options": [
                                "O(V + E)",
                                "O(V^2)",
                                "O(E log V)"
                            ],
                            "correctAnswer": "O(V^2)",
                            "userAnswer": ""
                        }
                    ]
                }
            },
            {
                "chapterId": "ch-5",
                "title": "Sorting and Searching Algorithms",
                "unlocked": false,
                "modules": [
                    {
                        "moduleId": "mod-5-1",
                        "title": "Introduction to Sorting Algorithms",
                        "content": "## Learn the Basics of Sorting Algorithms: Classifications and Time/Space Complexity\n\n## What is Sorting?\n\nSorting is the process of arranging data in a particular order (ascending or descending).\nIt is a fundamental operation in computer science to organize data for efficient search and analysis.\n\n---\n\n## Classification of Sorting Algorithms\n\nSorting algorithms can be classified based on different factors:\n\n### 1. **Based on Methodology:**\n- **Comparison-based:** Compares elements (e.g., Bubble Sort, Quick Sort, Merge Sort)\n- **Non-comparison-based:** Uses other techniques (e.g., Counting Sort, Radix Sort)\n\n### 2. **Based on Stability:**\n- **Stable Sort:** Maintains the relative order of equal elements (e.g., Merge Sort)\n- **Unstable Sort:** May not maintain the order (e.g., Quick Sort)\n\n### 3. **Based on Space Usage:**\n- **In-place Sort:** Requires a constant amount of extra space (e.g., Quick Sort)\n- **Out-of-place Sort:** Requires extra space (e.g., Merge Sort)\n\n---\n\n## Common Sorting Algorithms\n\n- **Bubble Sort:**\n  - Time Complexity: O(n) / O(n²) / O(n²)\n  - Space Complexity: O(1)\n  - Stability: Stable\n\n- **Selection Sort:**\n  - Time Complexity: O(n²) / O(n²) / O(n²)\n  - Space Complexity: O(1)\n  - Stability: Unstable\n\n- **Insertion Sort:**\n  - Time Complexity: O(n) / O(n²) / O(n²)\n  - Space Complexity: O(1)\n  - Stability: Stable\n\n- **Merge Sort:**\n  - Time Complexity: O(n log n) / O(n log n) / O(n log n)\n  - Space Complexity: O(n)\n  - Stability: Stable\n\n- **Quick Sort:**\n  - Time Complexity: O(n log n) / O(n log n) / O(n²)\n  - Space Complexity: O(log n)\n  - Stability: Unstable\n\n- **Heap Sort:**\n  - Time Complexity: O(n log n) / O(n log n) / O(n log n)\n  - Space Complexity: O(1)\n  - Stability: Unstable\n\n---\n\n## Why is Sorting Important?\n\n- **Prepares data for efficient searching** (e.g., Binary Search).\n- **Used in databases and libraries for organizing records.**\n- **Improves the performance of complex algorithms** (e.g., graph algorithms).\n\n> 🌟 **Tip:** Always consider the data size and characteristics (e.g., mostly sorted, range of elements) when choosing a sorting algorithm.\n\n---\n\n## Java Example: Bubble Sort\n\n```java\nvoid bubbleSort(int[] arr) {\n int n = arr.length;\n for (int i = 0; i < n - 1; i++) {\n for (int j = 0; j < n - i - 1; j++) {\n if (arr[j] > arr[j + 1]) {\n int temp = arr[j];\n arr[j] = arr[j + 1];\n arr[j + 1] = temp;\n }\n }\n }\n}\n```\n\n---\n\n## Summary\n\nSorting algorithms are essential tools in programming and algorithm design. Mastering them helps solve real-world problems efficiently!\n\n> 🔍 **Explore and practice different sorting algorithms to understand their strengths and weaknesses!**",

                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-5-1",
                                "question": "Which of the following is a stable sorting algorithm?",
                                "options": [
                                    "Merge Sort",
                                    "Quick Sort",
                                    "Heap Sort"
                                ],
                                "correctAnswer": "Merge Sort",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-5-2",
                                "question": "What is the time complexity of Bubble Sort in the worst case?",
                                "options": [
                                    "O(n)",
                                    "O(n^2)",
                                    "O(log n)"
                                ],
                                "correctAnswer": "O(n^2)",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-5-3",
                                "question": "Which sorting algorithm works by repeatedly selecting the smallest element?",
                                "options": [
                                    "Selection Sort",
                                    "Insertion Sort",
                                    "Merge Sort"
                                ],
                                "correctAnswer": "Selection Sort",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-5-2",
                        "title": "Divide and Conquer Sorting",
                        "content": "## Explore Divide-and-Conquer Sorting Algorithms: Merge Sort and Quick Sort\n\n## What is Divide and Conquer?\n\nDivide and Conquer is a powerful algorithm design paradigm that involves:\n- **Divide:** Break the problem into smaller subproblems.\n- **Conquer:** Solve each subproblem recursively.\n- **Combine:** Merge the solutions to solve the original problem.\n\nSorting algorithms like **Merge Sort** and **Quick Sort** use this approach to efficiently sort data.\n\n---\n\n## Merge Sort\n\n### How it Works:\n1. Divide the array into two halves.\n2. Recursively sort each half.\n3. Merge the sorted halves.\n\n### Time and Space Complexity:\n- **Time Complexity:** O(n log n) (Best, Average, Worst)\n- **Space Complexity:** O(n)\n- **Stability:** ✅ Stable\n\n> **Best for:** Large datasets where stability is required.\n\n### Java Example: Merge Sort\n\n```java\nvoid mergeSort(int[] arr, int left, int right) {\n if (left < right) {\n int mid = left + (right - left) / 2;\n\n mergeSort(arr, left, mid);\n mergeSort(arr, mid + 1, right);\n\n merge(arr, left, mid, right);\n }\n}\n\nvoid merge(int[] arr, int left, int mid, int right) {\n int n1 = mid - left + 1;\n int n2 = right - mid;\n\n int[] L = new int[n1];\n int[] R = new int[n2];\n\n for (int i = 0; i < n1; i++) L[i] = arr[left + i];\n for (int j = 0; j < n2; j++) R[j] = arr[mid + 1 + j];\n\n int i = 0, j = 0, k = left;\n while (i < n1 && j < n2) {\n if (L[i] <= R[j]) arr[k++] = L[i++];\n else arr[k++] = R[j++];\n }\n\n while (i < n1) arr[k++] = L[i++];\n while (j < n2) arr[k++] = R[j++];\n}\n```\n\n---\n\n## Quick Sort\n\n### How it Works:\n1. Select a **pivot** element.\n2. Partition the array: elements less than pivot go left, greater go right.\n3. Recursively apply quicksort to the sub-arrays.\n\n### Time and Space Complexity:\n- **Time Complexity:**\n  - Best/Average: O(n log n)\n  - Worst: O(n²) *(rare, happens if pivot is poorly chosen)*\n- **Space Complexity:** O(log n)\n- **Stability:** ❌ Unstable\n\n> **Best for:** When in-place sorting is preferred and average performance matters.\n\n### Java Example: Quick Sort\n\n```java\nvoid quickSort(int[] arr, int low, int high) {\n if (low < high) {\n int pi = partition(arr, low, high);\n\n quickSort(arr, low, pi - 1);\n quickSort(arr, pi + 1, high);\n }\n}\n\nint partition(int[] arr, int low, int high) {\n int pivot = arr[high];\n int i = (low - 1);\n for (int j = low; j < high; j++) {\n if (arr[j] < pivot) {\n i++;\n int temp = arr[i];\n arr[i] = arr[j];\n arr[j] = temp;\n }\n }\n\n int temp = arr[i + 1];\n arr[i + 1] = arr[high];\n arr[high] = temp;\n\n return i + 1;\n}\n```\n\n---\n\n## Summary\n\n- **Merge Sort:**\n  - Time Complexity: O(n log n) / O(n log n) / O(n log n)\n  - Space Complexity: O(n)\n  - Stability: Stable\n\n- **Quick Sort:**\n  - Time Complexity: O(n log n) / O(n log n) / O(n²)\n  - Space Complexity: O(log n)\n  - Stability: Unstable\n\n> 🚀 **Tip:** Merge Sort guarantees performance, while Quick Sort is faster in practice with good pivot selection.\n\n---\n\n> 🔍 **Explore both algorithms with different datasets to understand their behavior better!**",

                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-5-4",
                                "question": "Which algorithm divides the array into two halves and merges them after sorting?",
                                "options": [
                                    "Quick Sort",
                                    "Merge Sort",
                                    "Insertion Sort"
                                ],
                                "correctAnswer": "Merge Sort",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-5-5",
                                "question": "Which pivot selection strategy is typically used in Quick Sort?",
                                "options": [
                                    "Middle element",
                                    "First element",
                                    "Random element"
                                ],
                                "correctAnswer": "Random element",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-5-6",
                                "question": "What is the worst-case time complexity of Quick Sort?",
                                "options": [
                                    "O(n log n)",
                                    "O(n^2)",
                                    "O(n)"
                                ],
                                "correctAnswer": "O(n^2)",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-5-3",
                        "title": "Introduction to Searching Algorithms",
                        "content": "## Learn the Fundamental Concepts of Searching Algorithms\n\n## What are Searching Algorithms?\n\nSearching algorithms are used to find the position of an element in a data structure (like an array or list). They play a crucial role in programming by helping locate data efficiently.\n\nTwo common searching techniques:\n- **Linear Search**\n- **Binary Search**\n\n---\n\n## Linear Search\n\n### How it Works:\n- Check each element one by one.\n- Continue until the desired element is found or end of the list is reached.\n\n### Time and Space Complexity:\n- **Time Complexity:** O(n)\n- **Space Complexity:** O(1)\n\n> **Best for:** Small or unsorted datasets.\n\n### Java Example: Linear Search\n\n```java\nint linearSearch(int[] arr, int target) {\n for (int i = 0; i < arr.length; i++) {\n if (arr[i] == target) {\n return i; // Element found at index i\n }\n }\n return -1; // Element not found\n}\n```\n\n---\n\n## Binary Search\n\n### How it Works:\n- Requires a **sorted** array.\n- Repeatedly divide the search interval in half.\n- Compare the target with the middle element:\n  - If equal, return the index.\n  - If smaller, search the left half.\n  - If larger, search the right half.\n\n### Time and Space Complexity:\n- **Time Complexity:** O(log n)\n- **Space Complexity:** O(1) (iterative), O(log n) (recursive)\n\n> **Best for:** Large, sorted datasets.\n\n### Java Example: Binary Search\n\n```java\nint binarySearch(int[] arr, int target) {\n int left = 0, right = arr.length - 1;\n \n while (left <= right) {\n int mid = left + (right - left) / 2;\n\n if (arr[mid] == target) {\n return mid; // Element found at index mid\n }\n\n if (arr[mid] < target) {\n left = mid + 1; // Search right half\n } else {\n right = mid - 1; // Search left half\n }\n }\n\n return -1; // Element not found\n}\n```\n\n---\n\n## Summary\n\n- **Linear Search:**\n  - Time Complexity: O(n)\n  - Space Complexity: O(1)\n  - When to Use: Unsorted or small datasets\n\n- **Binary Search:**\n  - Time Complexity: O(log n)\n  - Space Complexity: O(1) (iterative), O(log n) (recursive)\n  - When to Use: Sorted datasets for faster search\n\n> **Tip:** Always sort your data first if you want to use Binary Search!\n\n---\n\n> **Practice both methods to understand their efficiency with different types of datasets.**",

                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-5-7",
                                "question": "What is the time complexity of linear search in the worst case?",
                                "options": [
                                    "O(1)",
                                    "O(n)",
                                    "O(log n)"
                                ],
                                "correctAnswer": "O(n)",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-5-8",
                                "question": "Which search algorithm works only on sorted arrays?",
                                "options": [
                                    "Linear Search",
                                    "Binary Search",
                                    "Hash Search"
                                ],
                                "correctAnswer": "Binary Search",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-5-9",
                                "question": "What is the time complexity of binary search in the worst case?",
                                "options": [
                                    "O(n)",
                                    "O(log n)",
                                    "O(1)"
                                ],
                                "correctAnswer": "O(log n)",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-5-4",
                        "title": "Advanced Sorting and Searching Techniques",
                        "content": "## Understand Advanced Algorithms: Heap Sort and Interpolation Search\n\n## What are Advanced Algorithms?\n\nAdvanced algorithms provide more efficient solutions for complex problems, especially with large datasets. Two powerful algorithms in this category are:\n- **Heap Sort**\n- **Interpolation Search**\n\n---\n\n## Heap Sort\n\n### How it Works:\n- Builds a **max-heap** from the input data.\n- Repeatedly extracts the maximum element from the heap and rebuilds the heap until all elements are sorted.\n\n### Time and Space Complexity:\n- **Time Complexity:** O(n log n)\n- **Space Complexity:** O(1) (in-place)\n\n> **Best for:** When you need consistent O(n log n) performance and in-place sorting.\n\n### Java Example: Heap Sort\n\n```java\nvoid heapify(int[] arr, int n, int i) {\n int largest = i;\n int left = 2 * i + 1;\n int right = 2 * i + 2;\n\n if (left < n && arr[left] > arr[largest]) largest = left;\n if (right < n && arr[right] > arr[largest]) largest = right;\n\n if (largest != i) {\n int swap = arr[i];\n arr[i] = arr[largest];\n arr[largest] = swap;\n\n heapify(arr, n, largest);\n }\n}\n\nvoid heapSort(int[] arr) {\n int n = arr.length;\n\n for (int i = n / 2 - 1; i >= 0; i--) heapify(arr, n, i);\n\n for (int i = n - 1; i >= 0; i--) {\n int temp = arr[0];\n arr[0] = arr[i];\n arr[i] = temp;\n\n heapify(arr, i, 0);\n }\n}\n```\n\n---\n\n## Interpolation Search\n\n### How it Works:\n- Assumes data is uniformly distributed.\n- Estimates the position of the target using the formula:\n\n```java\nnpos = low + ((target - arr[low]) * (high - low) / (arr[high] - arr[low]));\n```\n\n- Faster than Binary Search for uniformly distributed data.\n\n### Time and Space Complexity:\n- **Time Complexity:** O(log log n) (best case), O(n) (worst case)\n- **Space Complexity:** O(1)\n\n> **Best for:** Large, sorted, uniformly distributed datasets.\n\n### Java Example: Interpolation Search\n\n```java\nint interpolationSearch(int[] arr, int target) {\n int low = 0, high = arr.length - 1;\n\n while (low <= high && target >= arr[low] && target <= arr[high]) {\n if (low == high) {\n if (arr[low] == target) return low;\n return -1;\n }\n\n int pos = low + ((target - arr[low]) * (high - low)) / (arr[high] - arr[low]);\n\n if (arr[pos] == target) return pos;\n if (arr[pos] < target) low = pos + 1;\n else high = pos - 1;\n }\n\n return -1;\n}\n```\n\n---\n\n## Summary\n\n- **Heap Sort:**\n  - Time Complexity: O(n log n)\n  - Space Complexity: O(1)\n  - When to Use: Consistent performance, in-place sorting\n\n- **Interpolation Search:**\n  - Time Complexity: O(log log n) (best), O(n) (worst)\n  - Space Complexity: O(1)\n  - When to Use: Sorted & uniformly distributed datasets\n\n> 🚀 **Tip:** Choose algorithms based on your data characteristics and performance needs!\n\n---\n\n> **Practice implementing both to strengthen your understanding of advanced algorithms.**",

                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-5-10",
                                "question": "Which sorting algorithm uses a binary heap data structure?",
                                "options": [
                                    "Quick Sort",
                                    "Heap Sort",
                                    "Merge Sort"
                                ],
                                "correctAnswer": "Heap Sort",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-5-11",
                                "question": "What is the average-case time complexity of Interpolation Search?",
                                "options": [
                                    "O(log log n)",
                                    "O(n)",
                                    "O(log n)"
                                ],
                                "correctAnswer": "O(log log n)",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-5-12",
                                "question": "Which data structure is used in Heap Sort?",
                                "options": [
                                    "Stack",
                                    "Heap",
                                    "Queue"
                                ],
                                "correctAnswer": "Heap",
                                "userAnswer": ""
                            }
                        ]
                    }
                ],
                "assessment": {
                    "questions": [
                        {
                            "questionId": "assess-5-1",
                            "question": "Which sorting algorithm has the best average-case time complexity?",
                            "options": [
                                "Merge Sort",
                                "Quick Sort",
                                "Bubble Sort"
                            ],
                            "correctAnswer": "Merge Sort",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-5-2",
                            "question": "What is the space complexity of Merge Sort?",
                            "options": [
                                "O(n)",
                                "O(log n)",
                                "O(1)"
                            ],
                            "correctAnswer": "O(n)",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-5-3",
                            "question": "Which sorting algorithm is the most efficient for small datasets?",
                            "options": [
                                "Insertion Sort",
                                "Heap Sort",
                                "Merge Sort"
                            ],
                            "correctAnswer": "Insertion Sort",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-5-4",
                            "question": "What is the best-case time complexity of Quick Sort?",
                            "options": [
                                "O(n log n)",
                                "O(n)",
                                "O(n^2)"
                            ],
                            "correctAnswer": "O(n log n)",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-5-5",
                            "question": "In which case does Quick Sort perform the worst?",
                            "options": [
                                "When the pivot is always the smallest or largest element",
                                "When the pivot is the middle element",
                                "When the pivot is chosen randomly"
                            ],
                            "correctAnswer": "When the pivot is always the smallest or largest element",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-5-6",
                            "question": "What is the time complexity of Binary Search in the average case?",
                            "options": [
                                "O(n)",
                                "O(log n)",
                                "O(1)"
                            ],
                            "correctAnswer": "O(log n)",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-5-7",
                            "question": "What is the best-case time complexity of Linear Search?",
                            "options": [
                                "O(1)",
                                "O(n)",
                                "O(log n)"
                            ],
                            "correctAnswer": "O(1)",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-5-8",
                            "question": "Which algorithm divides the search space into three parts instead of two?",
                            "options": [
                                "Ternary Search",
                                "Binary Search",
                                "Interpolation Search"
                            ],
                            "correctAnswer": "Ternary Search",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-5-9",
                            "question": "Which sorting algorithm is not based on comparisons?",
                            "options": [
                                "Merge Sort",
                                "Radix Sort",
                                "Quick Sort"
                            ],
                            "correctAnswer": "Radix Sort",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-5-10",
                            "question": "What is the time complexity of Heap Sort in all cases?",
                            "options": [
                                "O(n)",
                                "O(n log n)",
                                "O(n^2)"
                            ],
                            "correctAnswer": "O(n log n)",
                            "userAnswer": ""
                        }
                    ]
                }
            },
            {
                "chapterId": "ch-6",
                "title": "Dynamic Programming and Greedy Algorithms",
                "unlocked": false,
                "modules": [
                    {
                        "moduleId": "mod-6-1",
                        "title": "Introduction to Dynamic Programming",
                        "content": "## Learn the Basics of Dynamic Programming (DP)\n\n## What is Dynamic Programming?\n\nDynamic Programming (DP) is a powerful algorithmic technique used to solve complex problems by breaking them down into simpler subproblems, solving each subproblem once, and storing their solutions.\n\n### Key Characteristics:\n- **Overlapping Subproblems:** Solve the same subproblem multiple times.\n- **Optimal Substructure:** An optimal solution is composed of optimal solutions to its subproblems.\n- **Memoization / Tabulation:** Store solutions to subproblems to avoid redundant computations.\n\n---\n\n## Why Use DP?\n\n- Reduces time complexity by avoiding recomputation.\n- Efficient for problems involving **recursion with overlapping subproblems**.\n- Helps solve problems that look exponential initially, but can be optimized.\n\n> **Common Examples:**\n> - Fibonacci sequence\n> - Knapsack problem\n> - Longest Common Subsequence\n\n---\n\n## Understand Overlapping Subproblems\n\n- Break problem into smaller parts.\n- Many subproblems are solved repeatedly.\n- **DP stores the results** to avoid solving them again.\n\n> **Example: Fibonacci Number**\n> - Recursive approach computes same Fibonacci numbers multiple times.\n> - DP stores the results of previous computations.\n\n### Java Example: Memoization (Top-Down)\n\n```java\nint fib(int n, int[] memo) {\n if (n <= 1) return n;\n if (memo[n] != 0) return memo[n];\n return memo[n] = fib(n - 1, memo) + fib(n - 2, memo);\n}\n```\n\n### Java Example: Tabulation (Bottom-Up)\n\n```java\nint fib(int n) {\n if (n <= 1) return n;\n int[] dp = new int[n + 1];\n dp[0] = 0;\n dp[1] = 1;\n for (int i = 2; i <= n; i++) {\n dp[i] = dp[i - 1] + dp[i - 2];\n }\n return dp[n];\n}\n```\n\n---\n\n## Understand Optimal Substructure\n\n- A problem exhibits **optimal substructure** if its solution can be constructed efficiently from solutions of its subproblems.\n\n> **Example: Shortest Path Problem**\n> - Shortest path to destination is built from shortest paths to intermediate nodes.\n\n---\n\n## Summary\n\n- **Overlapping Subproblems:** Solve the same subproblem multiple times.\n- **Optimal Substructure:** Build solution from solutions of subproblems.\n- **Memoization (Top-Down):** Store solutions in a recursive manner.\n- **Tabulation (Bottom-Up):** Iteratively build up solutions using arrays.\n\n> **Tip:** Identify problems with overlapping subproblems and optimal substructure — they are perfect for dynamic programming!\n\n---\n\n> **Practice DP problems regularly to master this essential technique.**",

                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-6-1",
                                "question": "What is the primary feature of dynamic programming?",
                                "options": [
                                    "Divide and Conquer",
                                    "Memoization",
                                    "Greedy Choice"
                                ],
                                "correctAnswer": "Memoization",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-6-2",
                                "question": "Which of the following problems is best solved using dynamic programming?",
                                "options": [
                                    "Binary Search",
                                    "Fibonacci Sequence",
                                    "Heap Sort"
                                ],
                                "correctAnswer": "Fibonacci Sequence",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-6-3",
                                "question": "What is memoization in dynamic programming?",
                                "options": [
                                    "Storing intermediate results to avoid recalculations",
                                    "Breaking a problem into independent subproblems",
                                    "Choosing the best possible solution at each step"
                                ],
                                "correctAnswer": "Storing intermediate results to avoid recalculations",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-6-2",
                        "title": "Greedy Algorithms and Their Applications",
                        "content": "## Explore Greedy Algorithms: Characteristics and Applications\n\n## What is a Greedy Algorithm?\n\nA **Greedy Algorithm** builds up a solution piece by piece, always choosing the next piece that offers the most immediate benefit.\n\n### Key Characteristics:\n- **Greedy Choice Property:** Make the best choice at each step.\n- **Optimal Substructure:** Problem can be solved by combining optimal solutions of its subproblems.\n- **No Backtracking:** Once a choice is made, it is never reconsidered.\n\n---\n\n## Why Use Greedy Algorithms?\n\n- Simpler and faster than exhaustive search.\n- Works well when a problem has the **Greedy Choice Property**.\n- Efficient in scenarios requiring **optimal local choices**.\n\n> **Common Applications:**\n> - Minimum Spanning Tree (Kruskal's, Prim's algorithm)\n> - Huffman Coding (Data compression)\n> - Activity Selection Problem\n\n---\n\n## Huffman Coding (Greedy Algorithm for Compression)\n\n- Used in data compression to reduce file size.\n- Assigns shorter codes to more frequent characters.\n- Builds a binary tree using a **priority queue**.\n\n### Steps:\n1. Create leaf nodes for all characters.\n2. Insert into priority queue by frequency.\n3. Remove two nodes with the lowest frequency.\n4. Create a new node with these two as children.\n5. Repeat until one node remains — the root of the Huffman tree.\n\n### Java Example: Node Structure\n\n```java\nclass Node {\n char ch;\n int freq;\n Node left, right;\n\n Node(char ch, int freq, Node left, Node right) {\n this.ch = ch;\n this.freq = freq;\n this.left = left;\n this.right = right;\n }\n}\n```\n\n---\n\n## Kruskal's Algorithm (Greedy Algorithm for Minimum Spanning Tree)\n\n- Finds the **Minimum Spanning Tree (MST)** in a graph.\n- Connects all vertices with the minimum total edge weight.\n- Uses **Disjoint Set Union (DSU)** to detect cycles.\n\n### Steps:\n1. Sort all edges by weight.\n2. Pick the smallest edge. If it forms no cycle, add it to MST.\n3. Repeat until all vertices are connected.\n\n### Java Example: Edge Class and Sorting\n\n```java\nclass Edge implements Comparable {\n int src, dest, weight;\n\n public int compareTo(Edge compareEdge) {\n return this.weight - compareEdge.weight;\n }\n}\n```\n\n---\n\n## Summary\n\n- **Greedy Choice Property:** Make the best local choice at each step.\n- **Optimal Substructure:** Solutions are built from optimal subproblems.\n- **Applications:** Huffman Coding, Kruskal's Algorithm, Activity Selection.\n\n> **Tip:** Always verify if a problem has the Greedy Choice Property and Optimal Substructure before choosing a greedy approach.\n\n---\n\n> **Practice greedy algorithms to sharpen your problem-solving speed and accuracy!**",

                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-6-4",
                                "question": "Which of the following algorithms follows a greedy approach?",
                                "options": [
                                    "Merge Sort",
                                    "Dijkstra's Algorithm",
                                    "Binary Search"
                                ],
                                "correctAnswer": "Dijkstra's Algorithm",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-6-5",
                                "question": "In which type of problem is the greedy algorithm guaranteed to give an optimal solution?",
                                "options": [
                                    "All problems",
                                    "Problems with optimal substructure and greedy choice property",
                                    "Divide and conquer problems"
                                ],
                                "correctAnswer": "Problems with optimal substructure and greedy choice property",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-6-6",
                                "question": "Which of the following is an application of greedy algorithms?",
                                "options": [
                                    "Knapsack Problem",
                                    "Matrix Chain Multiplication",
                                    "Longest Common Subsequence"
                                ],
                                "correctAnswer": "Knapsack Problem",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-6-3",
                        "title": "Famous Dynamic Programming Problems",
                        "content": "## Dynamic Programming Problems\n\n## What is Dynamic Programming (DP)?\n\nDynamic Programming is an optimization technique used to solve complex problems by breaking them down into simpler subproblems and storing the results of subproblems to avoid redundant work.\n\n### Key Concepts:\n- **Overlapping Subproblems:** Same subproblems are solved multiple times.\n- **Optimal Substructure:** Solutions to subproblems help form the solution to the overall problem.\n\n---\n\n## Problem 1: Longest Common Subsequence (LCS)\n\n- **Goal:** Find the length of the longest subsequence common to two sequences.\n- **Approach:** Use a 2D DP table to store lengths of LCS for substrings.\n\n### DP Formula:\n```java\nif (text1[i] == text2[j])\n dp[i][j] = 1 + dp[i-1][j-1];\nelse\n dp[i][j] = max(dp[i-1][j], dp[i][j-1]);\n```\n\n### Java Example:\n```java\nint lcs(String text1, String text2) {\n int m = text1.length(), n = text2.length();\n int[][] dp = new int[m + 1][n + 1];\n\n for (int i = 1; i <= m; i++) {\n for (int j = 1; j <= n; j++) {\n if (text1.charAt(i - 1) == text2.charAt(j - 1))\n dp[i][j] = 1 + dp[i - 1][j - 1];\n else\n dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);\n } }\n return dp[m][n];\n}\n```\n\n---\n\n## Problem 2: Matrix Chain Multiplication\n\n- **Goal:** Find the most efficient way to multiply a given sequence of matrices.\n- **Approach:** Try all possible parenthesizations and store minimum multiplication cost.\n\n### DP Formula:\n```java\ndp[i][j] = min(dp[i][k] + dp[k+1][j] + cost of multiplying the two parts)\n```\n\n### Java Example:\n```java\nint matrixChainOrder(int[] dims) {\n int n = dims.length - 1;\n int[][] dp = new int[n][n];\n\n for (int len = 2; len <= n; len++) {\n for (int i = 0; i <= n - len; i++) {\n int j = i + len - 1;\n dp[i][j] = Integer.MAX_VALUE;\n for (int k = i; k < j; k++) {\n int cost = dp[i][k] + dp[k + 1][j] + dims[i] * dims[k + 1] * dims[j + 1];\n dp[i][j] = Math.min(dp[i][j], cost);\n } }\n } }\n return dp[0][n - 1];\n}\n```\n\n---\n\n## Problem 3: 0/1 Knapsack Problem\n\n- **Goal:** Maximize total value without exceeding weight capacity.\n- **Approach:** Use DP to choose between including or excluding each item.\n\n### DP Formula:\n```java\nif (weight[i] <= capacity)\n dp[i][w] = max(dp[i-1][w], dp[i-1][w - weight[i]] + value[i]);\nelse\n dp[i][w] = dp[i-1][w];\n```\n\n### Java Example:\n```java\nint knapsack(int[] weight, int[] value, int capacity) {\n int n = weight.length;\n int[][] dp = new int[n + 1][capacity + 1];\n\n for (int i = 1; i <= n; i++) {\n for (int w = 0; w <= capacity; w++) {\n if (weight[i - 1] <= w)\n dp[i][w] = Math.max(dp[i - 1][w], dp[i - 1][w - weight[i - 1]] + value[i - 1]);\n else\n dp[i][w] = dp[i - 1][w];\n } }\n return dp[n][capacity];\n}\n```\n\n---\n\n## Summary\n\n- **Longest Common Subsequence:** 2D DP Table.\n- **Matrix Chain Multiplication:** Recursive + DP Table.\n- **0/1 Knapsack Problem:** Iterative DP with weight check.\n\n> **Tip:** Break problems into subproblems and store solutions to avoid redundant calculations!\n\n---\n\n> **Practice these problems to master dynamic programming techniques!**",

                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-6-7",
                                "question": "Which of the following problems can be solved using dynamic programming?",
                                "options": [
                                    "Kruskal's Algorithm",
                                    "Matrix Chain Multiplication",
                                    "Prim's Algorithm"
                                ],
                                "correctAnswer": "Matrix Chain Multiplication",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-6-8",
                                "question": "What is the time complexity of solving the Longest Common Subsequence (LCS) problem using dynamic programming?",
                                "options": [
                                    "O(mn)",
                                    "O(log n)",
                                    "O(n^2)"
                                ],
                                "correctAnswer": "O(mn)",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-6-9",
                                "question": "Which problem requires building a table to store results of overlapping subproblems?",
                                "options": [
                                    "Kruskal's Algorithm",
                                    "Matrix Chain Multiplication",
                                    "Dijkstra's Algorithm"
                                ],
                                "correctAnswer": "Matrix Chain Multiplication",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-6-4",
                        "title": "Comparison of Dynamic Programming and Greedy Algorithms",
                        "content": "## Dynamic Programming vs. Greedy Algorithms\n\n## Introduction\n\nWhen solving optimization problems, two popular techniques are **Dynamic Programming (DP)** and **Greedy Algorithms**. Both have different strategies, advantages, and use cases.\n\n---\n\n## Dynamic Programming (DP)\n\n### Characteristics:\n- Breaks the problem into **overlapping subproblems**.\n- Solves each subproblem **once** and stores the result (**memoization** or **tabulation**).\n- Guarantees the **optimal solution**.\n\n### Example Problems:\n- Longest Common Subsequence\n- 0/1 Knapsack Problem\n- Matrix Chain Multiplication\n\n### When to Use DP:\n- The problem has **optimal substructure** and **overlapping subproblems**.\n- We need the **best solution**, not just a good enough one.\n\n### Pros:\n- Always gives correct, optimal solutions.\n\n### Cons:\n- Higher **time** and **space complexity**.\n\n---\n\n## Greedy Algorithms\n\n### Characteristics:\n- Makes the **locally optimal choice** at each step.\n- Does **not** consider future consequences of choices.\n- Faster and simpler than DP.\n\n### Example Problems:\n- Kruskal's Algorithm (Minimum Spanning Tree)\n- Huffman Coding (Data Compression)\n- Activity Selection Problem\n\n### When to Use Greedy:\n- The problem has **greedy choice property** (a global optimum can be reached by choosing local optimum).\n- Speed is preferred over perfect accuracy.\n\n### Pros:\n- Faster and easier to implement.\n- Less memory usage.\n\n### Cons:\n- May not always give the optimal solution.\n\n---\n\n## Key Differences\n\n- **Approach:** DP solves subproblems and builds the solution, while Greedy makes the best choice at each step.\n- **Solution Quality:** DP always guarantees an optimal solution, but Greedy may or may not be optimal.\n- **Time Complexity:** DP usually has higher time complexity, while Greedy typically has lower time complexity.\n- **Space Complexity:** DP can have high space complexity due to memoization, whereas Greedy has low space complexity.\n- **Suitable for:** DP is suitable for problems with overlapping subproblems, and Greedy is suitable for problems with the greedy property.\n\n---\n\n## Decision Guide\n\n- ✅ **Use DP when:**\n - The problem has overlapping subproblems.\n - A global optimal solution is required.\n - Example: 0/1 Knapsack.\n\n- **Use Greedy when:**\n - The problem has greedy choice property.\n - A faster solution is needed.\n - Example: Kruskal’s algorithm for MST.\n\n> 💡 **Tip:** Start with greedy for simplicity, then move to DP if greedy fails to give optimal results.\n\n---\n\n## Summary\n\n- **Dynamic Programming:** Slow but guaranteed optimal.\n- **Greedy Algorithms:** Fast and simple, but check if the greedy choice property applies.\n\n> **Practice Tip:** Try solving the same problem with both approaches to understand their differences better!",

                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-6-10",
                                "question": "Which technique ensures an optimal solution by solving subproblems once?",
                                "options": [
                                    "Dynamic Programming",
                                    "Greedy Algorithm",
                                    "Divide and Conquer"
                                ],
                                "correctAnswer": "Dynamic Programming",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-6-11",
                                "question": "Which algorithm picks the best possible choice at each step?",
                                "options": [
                                    "Greedy Algorithm",
                                    "Dynamic Programming",
                                    "Divide and Conquer"
                                ],
                                "correctAnswer": "Greedy Algorithm",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-6-12",
                                "question": "Which of the following is true about dynamic programming?",
                                "options": [
                                    "It only works for problems with no overlapping subproblems",
                                    "It avoids solving the same subproblem multiple times",
                                    "It always guarantees the shortest path"
                                ],
                                "correctAnswer": "It avoids solving the same subproblem multiple times",
                                "userAnswer": ""
                            }
                        ]
                    }
                ],
                "assessment": {
                    "questions": [
                        {
                            "questionId": "assess-6-1",
                            "question": "Which of the following is an example of a problem solved using dynamic programming?",
                            "options": [
                                "Prim's Algorithm",
                                "Longest Common Subsequence",
                                "Binary Search"
                            ],
                            "correctAnswer": "Longest Common Subsequence",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-6-2",
                            "question": "What is the time complexity of dynamic programming in the Knapsack Problem?",
                            "options": [
                                "O(n log n)",
                                "O(nW)",
                                "O(n^2)"
                            ],
                            "correctAnswer": "O(nW)",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-6-3",
                            "question": "Which algorithm is used in Huffman coding?",
                            "options": [
                                "Dynamic Programming",
                                "Greedy Algorithm",
                                "Divide and Conquer"
                            ],
                            "correctAnswer": "Greedy Algorithm",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-6-4",
                            "question": "Which technique stores intermediate results to optimize performance?",
                            "options": [
                                "Greedy Algorithm",
                                "Memoization",
                                "Divide and Conquer"
                            ],
                            "correctAnswer": "Memoization",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-6-5",
                            "question": "Which of the following problems is solved by a greedy algorithm?",
                            "options": [
                                "Matrix Chain Multiplication",
                                "Huffman Encoding",
                                "Longest Common Subsequence"
                            ],
                            "correctAnswer": "Huffman Encoding",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-6-6",
                            "question": "What is the time complexity of Dijkstra's algorithm using a priority queue?",
                            "options": [
                                "O(E log V)",
                                "O(V^2)",
                                "O(V log V)"
                            ],
                            "correctAnswer": "O(E log V)",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-6-7",
                            "question": "Which data structure is commonly used in dynamic programming?",
                            "options": [
                                "Stack",
                                "Array/Table",
                                "Queue"
                            ],
                            "correctAnswer": "Array/Table",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-6-8",
                            "question": "Which algorithm is used to find the minimum spanning tree of a graph?",
                            "options": [
                                "Dijkstra's Algorithm",
                                "Kruskal's Algorithm",
                                "Floyd-Warshall Algorithm"
                            ],
                            "correctAnswer": "Kruskal's Algorithm",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-6-9",
                            "question": "What is the key characteristic of greedy algorithms?",
                            "options": [
                                "Solving subproblems once",
                                "Choosing the best possible option at each step",
                                "Dividing the problem into smaller parts"
                            ],
                            "correctAnswer": "Choosing the best possible option at each step",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-6-10",
                            "question": "Which algorithm solves the shortest path problem for graphs with negative weights?",
                            "options": [
                                "Dijkstra's Algorithm",
                                "Bellman-Ford Algorithm",
                                "Prim's Algorithm"
                            ],
                            "correctAnswer": "Bellman-Ford Algorithm",
                            "userAnswer": ""
                        }
                    ]
                }
            }
        ]
    },
    {
        "id": "course-3",
        "title": "Python Programming",
        "description": "Learn Python from basics to advanced topics with hands-on exercises and projects.",
        "chapters": [
            {
                "chapterId": "ch-1",
                "title": "Introduction to Python",
                "unlocked": true,
                "modules": [
                    {
                        "moduleId": "mod-1-1",
                        "title": "Introduction to Python",
                        "content": "## Learn about Python's History, Features, and Why It Is Widely Used\n\n## History of Python\n\n- **Creation**: Python was created by **Guido van Rossum** and first released in **1991**. It was designed as an easy-to-read language with a focus on code readability.\n- **Influences**: Python was influenced by languages such as **ABC**, **C**, **C++**, and **Modula-3**, among others.\n- **Python 2.x**: The second major version, Python 2.0, was released in **2000**, and it was widely used for over a decade.\n- **Python 3.x**: Python 3 was introduced in **2008** with significant improvements and changes to the language. It is not backward-compatible with Python 2, and since **2020**, Python 2 has reached its end of life.\n- **Open Source**: Python is an **open-source** language, meaning its source code is publicly available, allowing developers to contribute to its improvement.\n\n## Key Features of Python\n\n### 1. **Readable and Simple Syntax**\n   - Python's syntax is designed to be readable and concise. The use of indentation instead of braces `{}` for block definitions makes Python code visually clean and easy to understand.\n\n### 2. **Interpreted Language**\n   - Python is an interpreted language, meaning that the code is executed line-by-line by the Python interpreter. This makes it easier to debug, but can also result in slower performance compared to compiled languages.\n\n### 3. **Dynamically Typed**\n   - Python is dynamically typed, meaning that you don’t need to declare the type of a variable explicitly. This allows for rapid development but requires careful management of data types.\n\n### 4. **Cross-Platform Compatibility**\n   - Python is cross-platform, meaning it can run on different operating systems, including **Windows**, **macOS**, and **Linux**, without requiring changes to the source code.\n\n### 5. **Large Standard Library**\n   - Python includes a comprehensive standard library with modules for regular expressions, file operations, networking, databases, and more. This allows developers to perform complex tasks with minimal external dependencies.\n\n### 6. **Extensibility**\n   - Python allows integration with other languages, such as **C**, **C++**, and **Java**, to optimize performance in certain areas. This feature is beneficial when high performance is required.\n\n### 7. **Garbage Collection**\n   - Python automatically handles memory management through its garbage collection system, which reduces the need for developers to manually manage memory allocation and deallocation.\n\n### 8. **Object-Oriented and Functional Programming Support**\n   - Python supports multiple programming paradigms, including object-oriented programming (OOP) and functional programming. This flexibility allows developers to use the best approach for a particular problem.\n\n### 9. **Interactive Shell**\n   - Python offers an interactive shell that allows developers to test small pieces of code and experiment in a quick, hands-on manner.\n\n### 10. **Readable Documentation**\n   - Python has extensive, well-maintained documentation. This includes both the standard library documentation and community-contributed tutorials and guides.\n\n## Why Python is Widely Used\n\n### 1. **Ease of Learning and Use**\n   - Python is known for its simple syntax, making it ideal for beginners and developers new to programming. Its readability promotes the adoption of good programming practices and reduces development time.\n\n### 2. **Versatile Applications**\n   - Python is used in a wide variety of fields, such as:\n     - **Web Development**: Frameworks like **Django** and **Flask** make Python a popular choice for building web applications.\n     - **Data Science and Machine Learning**: Libraries like **Pandas**, **NumPy**, **SciPy**, and **TensorFlow** make Python a go-to language for data analysis, machine learning, and AI.\n     - **Automation and Scripting**: Python’s versatility allows it to be used for automating repetitive tasks, file manipulation, and system administration.\n     - **Game Development**: Python, with libraries like **Pygame**, is used for creating games.\n     - **Scientific Computing**: Python is widely used in scientific research for simulations, calculations, and data analysis.\n     - **Internet of Things (IoT)**: Python is also used in IoT for building smart devices and managing sensors.\n\n### 3. **Strong Community Support**\n   - Python has a large and active community of developers. This ensures that developers have access to an abundance of tutorials, guides, forums, and third-party libraries to speed up development.\n\n### 4. **Integration with Other Technologies**\n   - Python easily integrates with web services, databases, and other technologies, which makes it ideal for backend development, data manipulation, and creating APIs.\n\n### 5. **Corporate Adoption**\n   - Leading companies like **Google**, **Facebook**, **Netflix**, and **Dropbox** use Python in their production environments. This widespread use encourages new developers to learn Python and provides a significant job market.\n\n### 6. **Popularity in Academia**\n   - Python is widely used in academia for teaching programming, computer science, and data science. Its simplicity and clarity make it an ideal teaching language.\n\n### 7. **Open Source and Free**\n   - Python is open-source, which means it is free to use and can be modified according to user needs. This has contributed to its growth as a widely adopted language across industries.\n\n## Summary\n\n- **Python** is a powerful, easy-to-learn language with a simple syntax, dynamic typing, and large library support.\n- It supports multiple programming paradigms and is known for its ease of use, making it a preferred choice for **beginners** and **professionals** alike.\n- Python is widely used across various domains like **web development**, **data science**, **AI**, **automation**, and **game development**, thanks to its versatility and strong community support.\n",

                        "unlocked": true,
                        "questions": [
                            {
                                "questionId": "q-1-1",
                                "question": "Who developed Python?",
                                "options": [
                                    "Guido van Rossum",
                                    "Dennis Ritchie",
                                    "Bjarne Stroustrup"
                                ],
                                "correctAnswer": "Guido van Rossum",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-1-2",
                                "question": "What type of programming language is Python?",
                                "options": [
                                    "Compiled",
                                    "Interpreted",
                                    "Assembly"
                                ],
                                "correctAnswer": "Interpreted",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-1-3",
                                "question": "Which year was Python first released?",
                                "options": [
                                    "1989",
                                    "1991",
                                    "2000"
                                ],
                                "correctAnswer": "1991",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-1-2",
                        "title": "Setting up Python",
                        "content": "## Learn How to Install Python and Set Up the Development Environment\n\n## Introduction\n\nBefore you start writing Python code, you need to install Python and set up the appropriate development environment on your system. Python is available for **Windows**, **macOS**, and **Linux**, and the process is straightforward for each platform.\n\nThis guide will walk you through the steps to install Python, set up a development environment, and configure essential tools to write, run, and manage your Python projects.\n\n## 1. Installing Python\n\n### Windows\n\n1. **Download the Installer**:\n   - Go to the official Python website: [https://www.python.org/downloads/](https://www.python.org/downloads/).\n   - Click the \"Download Python\" button for the latest version (ensure you download the correct version for Windows).\n   \n2. **Run the Installer**:\n   - Open the installer file you downloaded (`python-x.x.x.exe`).\n   - Make sure to **check the box** that says **Add Python to PATH** at the beginning of the installation process. This ensures that Python is available globally in your command line.\n   - Click **Install Now** to proceed with the installation.\n\n3. **Verify Installation**:\n   - After installation, open the Command Prompt (press `Win + R`, then type `cmd` and hit Enter).\n   - Type `python --version` and press Enter. You should see the installed Python version.\n\n### macOS\n\n1. **Download the Installer**:\n   - Visit the official Python website: [https://www.python.org/downloads/](https://www.python.org/downloads/).\n   - Click the \"Download Python\" button for the latest version (ensure you download the correct version for macOS).\n   \n2. **Run the Installer**:\n   - Open the `.pkg` file you downloaded and follow the installation instructions.\n   - The installer will automatically set up Python and configure the necessary paths.\n\n3. **Verify Installation**:\n   - Open the Terminal (`Cmd + Space` then type `Terminal`).\n   - Type `python3 --version` and press Enter. You should see the installed Python version.\n\n### Linux\n\n1. **Install Python using Package Manager**:\n   - On most Linux distributions, Python is pre-installed. However, if it isn't, you can install it using the package manager.\n   \n   - **For Ubuntu/Debian**:\n     ```bash\n     sudo apt update\n     sudo apt install python3\n     ```\n\n   - **For Fedora/RHEL**:\n     ```bash\n     sudo dnf install python3\n     ```\n\n2. **Verify Installation**:\n   - Open the terminal.\n   - Type `python3 --version` and press Enter. You should see the installed Python version.\n\n## 2. Setting Up the Development Environment\n\n### Installing a Code Editor\n\nA good code editor is essential for writing Python code efficiently. Some popular code editors are:\n\n- **Visual Studio Code (VS Code)**: A lightweight and powerful code editor that supports Python with extensions.\n- **PyCharm**: A dedicated Python IDE with powerful features, great for larger projects.\n- **Sublime Text**: A fast and minimalist code editor.\n- **Atom**: A hackable text editor that is also good for Python development.\n\n#### Installing VS Code (Recommended)\n\n1. **Download VS Code**:\n   - Visit the [Visual Studio Code website](https://code.visualstudio.com/Download) and download the version for your platform.\n\n2. **Install the Python Extension**:\n   - After installing VS Code, open the editor.\n   - Go to the Extensions view (`Ctrl+Shift+X` or `Cmd+Shift+X`).\n   - Search for the \"Python\" extension by Microsoft and click **Install**.\n\n3. **Configure VS Code for Python**:\n   - VS Code will automatically detect your Python installation. However, you may need to select the Python interpreter for your workspace.\n   - Press `Ctrl+Shift+P` (or `Cmd+Shift+P` on macOS) and type \"Python: Select Interpreter\" to choose the correct interpreter.\n\n### Installing and Managing Python Packages\n\n1. **Pip (Python's Package Installer)**:\n   - Pip is the default package manager for Python. It allows you to install and manage additional libraries and tools.\n   - To check if pip is installed, type `pip --version` in the command line (for Python 3, use `pip3`).\n   - If pip is not installed, you can install it by downloading and running the `get-pip.py` script.\n\n2. **Install Packages Using pip**:\n   - To install a package, use the command:\n     ```bash\n     pip install <package-name>\n     ```\n   - For example, to install **NumPy**, run:\n     ```bash\n     pip install numpy\n     ```\n\n3. **Virtual Environments**:\n   - Virtual environments allow you to create isolated environments for different Python projects. This is useful to avoid conflicts between package versions in different projects.\n   \n   - To create a virtual environment:\n     ```bash\n     python -m venv myenv\n     ```\n     This creates a folder called `myenv` that contains the isolated Python environment.\n   \n   - To activate the virtual environment:\n     - **Windows**:\n       ```bash\n       myenv\\Scripts\\activate\n       ```\n     - **macOS/Linux**:\n       ```bash\n       source myenv/bin/activate\n       ```\n\n   - To deactivate the environment, simply run:\n     ```bash\n     deactivate\n     ```\n\n## 3. Running Python Code\n\nOnce Python and the development environment are set up, you can begin writing and running Python code.\n\n1. **Running Python from the Command Line**:\n   - Open your terminal or command prompt.\n   - To run a Python script, navigate to the folder where the script is saved and type:\n     ```bash\n     python script_name.py\n     ```\n     (Use `python3` on macOS/Linux if necessary.)\n\n2. **Running Python Code in an IDE (VS Code)**:\n   - Open your Python file in VS Code.\n   - Press `F5` or go to **Run > Start Debugging** to execute the code.\n\n## 4. Additional Tools for Python Development\n\n1. **Jupyter Notebooks**:\n   - For interactive coding, especially in data science, **Jupyter Notebooks** is a powerful tool.\n   - Install Jupyter using pip:\n     ```bash\n     pip install notebook\n     ```\n   - Start a notebook by running:\n     ```bash\n     jupyter notebook\n     ```\n\n2. **Version Control (Git)**:\n   - It is recommended to use version control, like **Git**, for managing your code. Install Git from [https://git-scm.com/](https://git-scm.com/), and use it to track changes and collaborate with others.\n\n## 5. Conclusion\n\nNow you have Python installed and your development environment set up! You can begin writing and running Python scripts, installing packages, and managing projects in an isolated virtual environment. Whether you're building small scripts or working on larger Python applications, this setup will help you be productive and efficient.\n",

                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-1-4",
                                "question": "Which command is used to check the installed Python version?",
                                "options": [
                                    "python --version",
                                    "py --v",
                                    "python check"
                                ],
                                "correctAnswer": "python --version",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-1-5",
                                "question": "Which IDE is commonly used for Python development?",
                                "options": [
                                    "PyCharm",
                                    "Eclipse",
                                    "Visual Studio"
                                ],
                                "correctAnswer": "PyCharm",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-1-6",
                                "question": "What is the default mode of the Python interpreter?",
                                "options": [
                                    "Interactive",
                                    "Script",
                                    "Debug"
                                ],
                                "correctAnswer": "Interactive",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-1-3",
                        "title": "Running Python Programs",
                        "content": "## Learn How to Execute Python Scripts and Use Interactive Mode\n\n## Introduction\n\nPython is a versatile and easy-to-use programming language. Once you have installed Python and set up your development environment, you’ll want to know how to execute Python scripts and use Python’s interactive mode to test out ideas and experiment with code. This guide will walk you through both methods and help you get comfortable running Python code in different environments.\n\n## 1. Executing Python Scripts\n\n### Running Python from the Command Line\n\nTo execute a Python script from the command line, follow these steps:\n\n1. **Create a Python Script**:\n   - Open your preferred text editor or IDE (such as VS Code or PyCharm).\n   - Write your Python code and save it with the `.py` extension (for example, `myscript.py`).\n\n2. **Open Command Line or Terminal**:\n   - **Windows**: Open Command Prompt (`cmd`) or PowerShell.\n   - **macOS/Linux**: Open the Terminal.\n\n3. **Navigate to the Script Location**:\n   - Use the `cd` command to change to the directory where your Python script is saved. For example:\n     ```bash\n     cd path/to/your/script\n     ```\n\n4. **Execute the Script**:\n   - To run the Python script, use the `python` command (or `python3` on macOS/Linux if needed):\n     ```bash\n     python myscript.py\n     ```\n     - This will execute the script and display any output or errors in the terminal.\n\n   - **Windows Note**: If Python isn’t recognized in your terminal, ensure you’ve added Python to your system’s PATH during installation.\n\n### Running Python Scripts in an IDE (VS Code, PyCharm, etc.)\n\n1. **Open Your IDE**:\n   - Launch your preferred IDE (such as Visual Studio Code, PyCharm, or Sublime Text).\n\n2. **Open the Script**:\n   - Open the Python script you wish to run from within the IDE.\n\n3. **Run the Script**:\n   - In **VS Code**, press `F5` or go to **Run > Start Debugging** to execute the script.\n   - In **PyCharm**, click the green play button in the top-right corner or right-click on the script file and select **Run**.\n\nRunning Python in an IDE provides additional features like debugging, syntax highlighting, and auto-completion, which can enhance the development experience.\n\n## 2. Using Python's Interactive Mode\n\nPython’s interactive mode allows you to execute Python code line-by-line and get immediate feedback. This is useful for quick testing and experimentation.\n\n### Starting the Interactive Mode\n\n1. **Open the Command Line or Terminal**:\n   - **Windows**: Open Command Prompt or PowerShell.\n   - **macOS/Linux**: Open the Terminal.\n\n2. **Start Python**:\n   - To start Python’s interactive shell, simply type `python` (or `python3` on macOS/Linux):\n     ```bash\n     python\n     ```\n   - You will see the Python prompt (`>>>`), indicating that you are now in the interactive mode.\n\n3. **Execute Python Commands**:\n   - You can now type Python code directly into the terminal and see the results instantly. For example:\n     ```python\n     >>> print(\"Hello, Python!\")\n     Hello, Python!\n     >>> 2 + 3\n     5\n     ```\n   - Each line of code is executed immediately, and the output is displayed below the command.\n\n4. **Exit Interactive Mode**:\n   - To exit the interactive mode, type:\n     ```python\n     >>> exit()\n     ```\n   - Alternatively, you can press `Ctrl + Z` (on Windows) or `Ctrl + D` (on macOS/Linux) to exit.\n\n### Using Python's REPL (Read-Eval-Print Loop)\n\nThe Python shell, also known as the **REPL** (Read-Eval-Print Loop), evaluates each line of code you enter and immediately prints the result. This allows for quick testing of small snippets of Python code.\n\nFor example:\n```python\n>>> a = 10\n>>> b = 5\n>>> a + b\n15\n>>> a * b\n50\n",

                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-1-7",
                                "question": "Which extension is used for Python files?",
                                "options": [
                                    ".py",
                                    ".java",
                                    ".cpp"
                                ],
                                "correctAnswer": ".py",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-1-8",
                                "question": "What is the output of print(3 + 4 * 2)?",
                                "options": [
                                    "14",
                                    "11",
                                    "8"
                                ],
                                "correctAnswer": "11",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-1-9",
                                "question": "How do you execute a Python script from the terminal?",
                                "options": [
                                    "python script.py",
                                    "run script.py",
                                    "execute script.py"
                                ],
                                "correctAnswer": "python script.py",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-1-4",
                        "title": "Python Syntax Basics",
                        "content": "## Understand the Fundamental Syntax Rules of Python Programming\n\n## Python Syntax Overview\n\nPython is known for its clean and readable syntax. The basic syntax rules are designed to make it easy to understand and write Python programs.\n\n### Key Features of Python Syntax:\n- **Indentation** is used instead of braces `{}` for code blocks.\n- Statements are usually terminated by a newline (no semicolons needed).\n- Python is case-sensitive, so `Variable` and `variable` are different.\n\n---\n\n## 1. Variables and Data Types\n\nPython does not require explicit declaration of variables.\n\n### Assigning Variables\n```python\nx = 10\nname = \"Alice\"\n```\n- `x` is an integer, and `name` is a string.\n\n### Common Data Types\n- **Integer:** `x = 10`\n- **Float:** `y = 3.14`\n- **String:** `name = \"Hello\"`\n- **Boolean:** `flag = True`\n- **List:** `numbers = [1, 2, 3]`\n- **Dictionary:** `person = {'name': 'Alice', 'age': 25}`\n\n---\n\n## 2. Indentation and Code Blocks\n\n- **Indentation** is crucial in Python. It defines the scope of loops, functions, and conditionals.\n- Indentation is typically four spaces or a tab.\n\n```python\nif x > 5:\n    print(\"x is greater than 5\")\nelse:\n    print(\"x is less than or equal to 5\")\n```\n\n> **Note:** Mixing spaces and tabs can cause errors, so be consistent.\n\n---\n\n## 3. Comments\n\n- **Single-line comments** start with `#`.\n- **Multi-line comments** are enclosed within triple quotes `'''` or `\"\"\"`.\n\n```python\n# This is a single-line comment\n\"\"\"\nThis is a multi-line comment.\nIt can span multiple lines.\n\"\"\"\n```\n\n---\n\n## 4. Conditionals (if, elif, else)\n\nConditionals help in decision-making.\n\n### Example:\n```python\nx = 10\nif x > 5:\n    print(\"x is greater than 5\")\nelif x == 5:\n    print(\"x is equal to 5\")\nelse:\n    print(\"x is less than 5\")\n```\n\n- Python does not use parentheses `()` around conditions.\n- Code block execution depends on indentation.\n\n---\n\n## 5. Loops (for and while)\n\n### 5.1 `for` Loop\n- Used for iterating over sequences (e.g., lists, strings).\n\n```python\nfor i in range(5):\n    print(i)\n```\n\n### 5.2 `while` Loop\n- Repeats a block of code as long as the condition is `True`.\n\n```python\ncount = 0\nwhile count < 5:\n    print(count)\n    count += 1\n```\n\n---\n\n## 6. Functions\n\nFunctions allow you to group code into reusable blocks.\n\n```python\ndef greet(name):\n    print(f\"Hello, {name}!\")\ngreet(\"Alice\")  # Output: Hello, Alice!\n```\n- Functions are defined using the `def` keyword.\n- Parameters are specified inside parentheses.\n\n### Returning a Value\n```python\ndef add(a, b):\n    return a + b\nresult = add(3, 5)\nprint(result)  # Output: 8\n```\n\n---\n\n## 7. Classes and Objects\n\nPython is an object-oriented programming language.\n\n### Example of a Class and Object:\n```python\nclass Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def greet(self):\n        print(f\"Hello, my name is {self.name} and I am {self.age} years old.\")\n\np1 = Person(\"Alice\", 30)\np1.greet()  # Output: Hello, my name is Alice and I am 30 years old.\n```\n\n- `__init__` is the constructor method.\n- `self` refers to the current object.\n\n---\n\n## 8. Importing Libraries\n\nYou can import external libraries or modules into your program.\n\n```python\nimport math\nprint(math.sqrt(16))  # Output: 4.0\n```\n\n- Python has many built-in libraries like `math`, `random`, `datetime`, etc.\n\n---\n\n## Summary\n\n- Python syntax is simple and emphasizes readability.\n- Key concepts: variables, data types, indentation, conditionals, loops, functions, and classes.\n- Mastering Python's syntax allows for efficient and clear coding.\n\n> Python's simple syntax is one of the reasons it is popular among beginners and professionals alike!",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-1-10",
                                "question": "Which of the following is a valid variable name in Python?",
                                "options": [
                                    "2var",
                                    "_varName",
                                    "var-name"
                                ],
                                "correctAnswer": "_varName",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-1-11",
                                "question": "Which character is used to start a comment in Python?",
                                "options": [
                                    "#",
                                    "//",
                                    "/* */"
                                ],
                                "correctAnswer": "#",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-1-12",
                                "question": "Which indentation level is recommended in Python?",
                                "options": [
                                    "2 spaces",
                                    "4 spaces",
                                    "8 spaces"
                                ],
                                "correctAnswer": "4 spaces",
                                "userAnswer": ""
                            }
                        ]
                    }
                ],
                "assessment": {
                    "questions": [
                        {
                            "questionId": "assess-1-1",
                            "question": "What is the primary purpose of Python?",
                            "options": [
                                "Web development",
                                "Data analysis",
                                "General-purpose programming"
                            ],
                            "correctAnswer": "General-purpose programming",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-1-2",
                            "question": "Which symbol is used to define a function in Python?",
                            "options": [
                                "def",
                                "function",
                                "func"
                            ],
                            "correctAnswer": "def",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-1-3",
                            "question": "Which built-in function is used to display output in Python?",
                            "options": [
                                "echo()",
                                "print()",
                                "display()"
                            ],
                            "correctAnswer": "print()",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-1-4",
                            "question": "What will be the output of: print(type(10.5))?",
                            "options": [
                                "<class 'float'>",
                                "<class 'int'>",
                                "<class 'double'>"
                            ],
                            "correctAnswer": "<class 'float'>",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-1-5",
                            "question": "Which data type is mutable in Python?",
                            "options": [
                                "Tuple",
                                "List",
                                "String"
                            ],
                            "correctAnswer": "List",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-1-6",
                            "question": "How do you take user input in Python?",
                            "options": [
                                "input()",
                                "get()",
                                "scan()"
                            ],
                            "correctAnswer": "input()",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-1-7",
                            "question": "What does the len() function do?",
                            "options": [
                                "Returns the last element",
                                "Counts the number of elements",
                                "Returns the type of variable"
                            ],
                            "correctAnswer": "Counts the number of elements",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-1-8",
                            "question": "Which operator is used for exponentiation in Python?",
                            "options": [
                                "^",
                                "**",
                                "//"
                            ],
                            "correctAnswer": "**",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-1-9",
                            "question": "Which keyword is used for loops in Python?",
                            "options": [
                                "for",
                                "loop",
                                "iterate"
                            ],
                            "correctAnswer": "for",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-1-10",
                            "question": "Which function converts a string to an integer?",
                            "options": [
                                "str()",
                                "int()",
                                "float()"
                            ],
                            "correctAnswer": "int()",
                            "userAnswer": ""
                        }
                    ]
                }
            },
            {
                "chapterId": "ch-2",
                "title": "Python Data Types and Variables",
                "unlocked": false,
                "modules": [
                    {
                        "moduleId": "mod-2-1",
                        "title": "Introduction to Data Types",
                        "content": "## Learn About Different Data Types in Python: Integers, Floats, and Strings\n\n## Overview of Data Types in Python\n\nPython has a variety of built-in data types. The most common ones include integers, floats, and strings. Understanding these basic data types is essential for writing effective Python code.\n\n### 1. Integers\n\n- **Integers** are whole numbers without a decimal point.\n- They can be positive, negative, or zero.\n\n```python\nx = 10   # Integer\ny = -3   # Negative Integer\nz = 0    # Zero\n```\n\n- Python automatically handles large integers without overflow.\n\n### Operations on Integers\n\n```python\nsum = 5 + 3  # Addition\nproduct = 5 * 3  # Multiplication\ndifference = 5 - 3  # Subtraction\ndivision = 5 / 3  # Division\n```\n\n---\n\n## 2. Floats\n\n- **Floats** are numbers with a decimal point.\n- They can represent real numbers and are used for more precise calculations.\n\n```python\nx = 3.14    # Float\ny = -7.2    # Negative Float\nz = 0.0     # Float zero\n```\n\n### Operations on Floats\n\n```python\nsum = 5.5 + 2.5  # Addition\nproduct = 4.5 * 2  # Multiplication\n```\n\n- Floats also support mathematical operations, and division results in a float even if the division is exact.\n\n---\n\n## 3. Strings\n\n- **Strings** are sequences of characters enclosed in single or double quotes.\n- Strings are used to store text.\n\n```python\nname = \"Alice\"  # String\nmessage = 'Hello, World!'  # String\n```\n\n### Operations on Strings\n\n- **Concatenation:** Combine strings using `+`.\n\n```python\nfull_name = \"Alice\" + \" \" + \"Smith\"\nprint(full_name)  # Output: Alice Smith\n```\n\n- **Repetition:** Repeat strings using `*`.\n\n```python\nrepeated = \"Hi! \" * 3\nprint(repeated)  # Output: Hi! Hi! Hi!\n```\n\n- **Slicing:** Extract parts of a string using indices.\n\n```python\ntext = \"Hello, World!\"\nsubstring = text[0:5]  # Extract 'Hello'\nprint(substring)\n```\n\n### String Methods\n\n- Strings have various useful methods like `lower()`, `upper()`, `replace()`, and `split()`. For example:\n\n```python\nname = \"Alice\"\nprint(name.lower())  # Output: alice\nprint(name.upper())  # Output: ALICE\n```\n\n---\n\n## 4. Type Conversion\n\n- You can convert between different data types using built-in functions like `int()`, `float()`, and `str()`.\n\n```python\nx = 10   # Integer\ny = float(x)  # Convert integer to float\nz = str(x)    # Convert integer to string\n```\n\n- This is useful when you need to perform operations that require a specific data type.\n\n---\n\n## Summary\n\n- **Integers** are whole numbers, **Floats** are numbers with decimal points, and **Strings** are sequences of characters.\n- Each data type supports specific operations and methods for manipulation.\n- Python allows seamless type conversion for flexibility in handling different data types.\n\n> Understanding Python's basic data types is the foundation of mastering programming with Python! 🚀",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-2-1",
                                "question": "Which of the following is an immutable data type in Python?",
                                "options": [
                                    "List",
                                    "Dictionary",
                                    "Tuple"
                                ],
                                "correctAnswer": "Tuple",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-2-2",
                                "question": "What is the type of the value 3.14 in Python?",
                                "options": [
                                    "int",
                                    "float",
                                    "double"
                                ],
                                "correctAnswer": "float",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-2-3",
                                "question": "Which function is used to check the type of a variable in Python?",
                                "options": [
                                    "type()",
                                    "typeof()",
                                    "getType()"
                                ],
                                "correctAnswer": "type()",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-2-2",
                        "title": "Working with Variables",
                        "content": "## Understand How to Declare and Use Variables in Python\n\n## What is a Variable?\n\nA **variable** in Python is a name that is used to refer to a value. It allows you to store data that can be used and manipulated throughout the program.\n\n- A variable holds data in memory, and its value can be changed during the program execution.\n- Python uses dynamic typing, which means you do not need to specify the type of data a variable will hold when you declare it.\n\n---\n\n## 1. Declaring Variables\n\nIn Python, declaring a variable is simple and requires no special syntax.\n\n### Syntax:\n```python\nvariable_name = value\n```\n\nExample:\n```python\nx = 5      # Integer\nname = \"Alice\"  # String\n```\n\n- You can assign any data type to a variable, and Python will automatically infer the type.\n- No need for explicit type declaration.\n\n### Variable Naming Rules:\n- The variable name must begin with a letter or an underscore (_), followed by letters, digits, or underscores.\n- It cannot start with a number.\n- Variable names are case-sensitive (`x` and `X` are different).\n- Avoid using Python keywords as variable names (e.g., `if`, `while`, `import`).\n\n---\n\n## 2. Assigning Values to Variables\n\nYou can assign different types of values to variables.\n\n### Example 1: Integer\n```python\nage = 25\n``` \n- `age` is a variable storing an integer value `25`.\n\n### Example 2: String\n```python\nmessage = \"Hello, World!\"\n``` \n- `message` is a variable storing the string \"Hello, World!\".\n\n### Example 3: Float\n```python\nprice = 19.99\n```\n- `price` is a variable storing the floating-point value `19.99`.\n\n---\n\n## 3. Reassigning Variables\n\nIn Python, you can change the value of a variable at any time.\n\n```python\nx = 10\nx = 20  # Reassigning a new value to x\nprint(x)   # Output: 20\n```\n\n- Variables are dynamic, meaning their type and value can change during the program.\n- No need to declare the type again when reassigning.\n\n---\n\n## 4. Multiple Assignment\n\nYou can assign values to multiple variables in one line.\n\n### Example:\n```python\nx, y, z = 5, 10, 15\nprint(x, y, z)  # Output: 5 10 15\n```\n\n- This is a convenient way to assign values to multiple variables simultaneously.\n\n---\n\n## 5. Variable Scope\n\nThe **scope** of a variable refers to where it can be accessed in the program.\n\n- **Global variables** are accessible from anywhere in the program.\n- **Local variables** are defined within a function and are accessible only within that function.\n\n### Example: Global Variable\n```python\nx = 10  # Global variable\ndef print_x():\n    print(x)  # Accessing global variable\nprint_x()  # Output: 10\n```\n\n### Example: Local Variable\n```python\ndef set_value():\n    x = 5  # Local variable\n    print(x)\nset_value()  # Output: 5\n```\n- A **local variable** with the same name will override a global variable within that function's scope.\n\n---\n\n## 6. Constants (Convention)\n\nIn Python, there is no special syntax for constants, but by convention, variables that should not change are written in **uppercase letters**.\n\n```python\nPI = 3.14159\nMAX_SIZE = 100\n```\n- These variables are intended to be constants, but Python does not enforce immutability.\n\n---\n\n## Summary\n\n- **Variables** store data values that can be used and modified.\n- Python uses **dynamic typing**, so you don't need to declare the type of the variable.\n- **Multiple assignment** allows you to assign values to several variables at once.\n- Variables have different **scopes** (local vs. global), which control where they can be accessed.\n\n> Python’s flexible variable system makes it easy to work with different types of data. 🚀",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-2-4",
                                "question": "Which of the following is a valid variable name in Python?",
                                "options": [
                                    "1var",
                                    "_myVar",
                                    "my-var"
                                ],
                                "correctAnswer": "_myVar",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-2-5",
                                "question": "Which keyword is used to declare a global variable inside a function?",
                                "options": [
                                    "global",
                                    "var",
                                    "static"
                                ],
                                "correctAnswer": "global",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-2-6",
                                "question": "What happens when you assign a value to an undefined variable in Python?",
                                "options": [
                                    "It raises an error",
                                    "It gets automatically defined",
                                    "It gets assigned a null value"
                                ],
                                "correctAnswer": "It gets automatically defined",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-2-3",
                        "title": "Type Conversion",
                        "content": "## Learn About Implicit and Explicit Type Conversion in Python\n\n## What is Type Conversion?\n\n**Type conversion** refers to the process of converting one data type into another. In Python, there are two types of type conversion:\n- **Implicit Type Conversion** (also called **automatic type conversion**)\n- **Explicit Type Conversion** (also called **type casting**)\n\n### Implicit Type Conversion\n\n- **Implicit type conversion** is done by Python automatically when a smaller data type is converted to a larger data type.\n- Python performs this conversion implicitly without requiring any user intervention.\n- It usually occurs when operations involve different data types.\n\n#### Example of Implicit Conversion\n\n```python\nx = 10    # Integer\ny = 3.14  # Float\nz = x + y # Implicit conversion of x to float\nprint(z)  # Output: 13.14\n```\n\n- In this case, the integer `x` is automatically converted to a float when added to `y` (which is a float), and the result is a float.\n\n#### Implicit Conversion Rules\n\n- **Integer to Float:** When an integer is involved in an operation with a float, the integer is implicitly converted to a float.\n- **Smaller to Larger Data Types:** Python automatically converts smaller data types (like `int`) to larger ones (like `float`) in expressions.\n\n---\n\n### Explicit Type Conversion\n\n- **Explicit type conversion** is done manually by the programmer using built-in functions like `int()`, `float()`, and `str()`. This allows the user to convert one data type to another explicitly.\n- It is also known as **type casting**.\n\n#### Example of Explicit Conversion\n\n```python\nx = 3.14    # Float\ny = int(x)  # Explicitly converting float to integer\nprint(y)    # Output: 3\n```\n\n- In this case, the float `3.14` is explicitly converted to an integer using the `int()` function, and the result is `3`.\n\n#### Common Type Conversion Functions\n- **`int()`**: Converts a number or string to an integer.\n\n```python\nx = int(\"123\")  # Converts string to integer\nprint(x)  # Output: 123\n```\n\n- **`float()`**: Converts a number or string to a float.\n\n```python\nx = float(\"3.14\")  # Converts string to float\nprint(x)  # Output: 3.14\n```\n\n- **`str()`**: Converts a number or other data type to a string.\n\n```python\nx = str(10)  # Converts integer to string\nprint(x)  # Output: \"10\"\n```\n\n---\n\n### Type Conversion between Different Data Types\n\nType conversion is essential when you need to perform operations that involve variables of different data types.\n\n#### Example: Adding String and Integer\n\nYou cannot add a string to an integer directly. You'll need to explicitly convert one of the types.\n\n```python\nnum = 10\ntext = \"The number is: \"\nresult = text + str(num)  # Converting integer to string\nprint(result)  # Output: The number is: 10\n```\n\n#### Example: String to Float\n\n```python\nx = \"3.14\"\nresult = float(x)  # Converting string to float\nprint(result)  # Output: 3.14\n```\n\n### Why Type Conversion is Important\n\n- **Implicit Type Conversion**: Simplifies code by automatically converting smaller types to larger ones when performing operations like addition or multiplication between different data types.\n- **Explicit Type Conversion**: Provides control over how and when data types are converted, especially when combining data types in expressions.\n\n---\n\n## Summary\n\n- **Implicit Type Conversion** occurs automatically when Python converts smaller data types (like `int`) to larger ones (like `float`) during operations.\n- **Explicit Type Conversion** is done manually by the programmer using functions like `int()`, `float()`, and `str()`, allowing conversion between different data types.\n- Both types of conversion are essential for handling various operations that involve multiple data types.\n\n> Understanding type conversion helps ensure the correct handling of different data types in your program. 💡",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-2-7",
                                "question": "Which function converts a string to an integer?",
                                "options": [
                                    "int()",
                                    "str()",
                                    "float()"
                                ],
                                "correctAnswer": "int()",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-2-8",
                                "question": "What is implicit type conversion in Python?",
                                "options": [
                                    "When the user manually converts a type",
                                    "When Python automatically converts types",
                                    "When a variable changes type dynamically"
                                ],
                                "correctAnswer": "When Python automatically converts types",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-2-9",
                                "question": "Which of the following is an example of explicit type conversion?",
                                "options": [
                                    "float(10)",
                                    "10 + 5.5",
                                    "x = 10"
                                ],
                                "correctAnswer": "float(10)",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-2-4",
                        "title": "String Operations",
                        "content": "## Explore How to Manipulate and Work with Strings in Python\n\n## Overview of Strings in Python\n\nIn Python, strings are sequences of characters enclosed in single (') or double (\") quotes.\n\n- Strings are one of the most common data types in Python.\n- They are **immutable**, meaning their contents cannot be changed after creation.\n\nExample:\n```python\ntext = \"Hello, World!\"\n``` \n\n## 1. String Concatenation\n\nYou can combine multiple strings using the `+` operator.\n\n```python\nfirst_name = \"John\"\nlast_name = \"Doe\"\nfull_name = first_name + \" \" + last_name\nprint(full_name)  # Output: John Doe\n```\n\n- The result of concatenation creates a new string by joining the original strings together.\n\n## 2. String Repetition\n\nYou can repeat a string multiple times using the `*` operator.\n\n```python\ngreeting = \"Hi! \" * 3\nprint(greeting)  # Output: Hi! Hi! Hi! \n```\n\n- This is useful for creating repeated patterns or prompts.\n\n## 3. String Slicing\n\nYou can extract parts of a string using slicing.\n\n### Syntax:\n```python\nstring[start:end]\n```\n- The `start` index is inclusive, and the `end` index is exclusive.\n- If `start` is omitted, it defaults to 0. If `end` is omitted, it defaults to the length of the string.\n\nExample:\n```python\ntext = \"Hello, World!\"\nsubstring = text[0:5]  # Extracts 'Hello'\nprint(substring)  # Output: Hello\n```\n\n## 4. String Methods\n\nPython strings come with many built-in methods that allow you to perform various operations on them.\n\n### Common String Methods:\n\n- **`lower()`**: Converts all characters in the string to lowercase.\n\n```python\nmessage = \"HELLO\"\nprint(message.lower())  # Output: hello\n```\n\n- **`upper()`**: Converts all characters in the string to uppercase.\n\n```python\nmessage = \"hello\"\nprint(message.upper())  # Output: HELLO\n```\n\n- **`strip()`**: Removes any leading and trailing spaces.\n\n```python\nmessage = \"  Hello  \"\nprint(message.strip())  # Output: Hello\n```\n\n- **`replace()`**: Replaces occurrences of a substring with another substring.\n\n```python\ntext = \"I love Python\"\nprint(text.replace(\"Python\", \"Java\"))  # Output: I love Java\n```\n\n- **`split()`**: Splits a string into a list of substrings based on a delimiter.\n\n```python\ntext = \"apple,banana,cherry\"\nfruits = text.split(\",\")  # Splits by comma\nprint(fruits)  # Output: ['apple', 'banana', 'cherry']\n```\n\n## 5. String Formatting\n\nYou can format strings to include variables or expressions using different methods.\n\n### Using `f-strings` (Python 3.6+):\n```python\nname = \"John\"\nage = 25\nmessage = f\"Hello, my name is {name} and I am {age} years old.\"\nprint(message)  # Output: Hello, my name is John and I am 25 years old.\n```\n\n### Using `.format()` method:\n```python\nname = \"John\"\nage = 25\nmessage = \"Hello, my name is {} and I am {} years old.\".format(name, age)\nprint(message)  # Output: Hello, my name is John and I am 25 years old.\n```\n\n### Using `%` operator (older method):\n```python\nname = \"John\"\nage = 25\nmessage = \"Hello, my name is %s and I am %d years old.\" % (name, age)\nprint(message)  # Output: Hello, my name is John and I am 25 years old.\n```\n\n## 6. Checking String Properties\n\nYou can check certain properties of a string using methods like `isalpha()`, `isdigit()`, etc.\n\n- **`isalpha()`**: Returns `True` if all characters in the string are alphabetic.\n\n```python\ntext = \"Hello\"\nprint(text.isalpha())  # Output: True\n```\n\n- **`isdigit()`**: Returns `True` if all characters in the string are digits.\n\n```python\ntext = \"12345\"\nprint(text.isdigit())  # Output: True\n```\n\n- **`startswith()`**: Checks if the string starts with the specified prefix.\n\n```python\ntext = \"Hello, World!\"\nprint(text.startswith(\"Hello\"))  # Output: True\n```\n\n- **`endswith()`**: Checks if the string ends with the specified suffix.\n\n```python\ntext = \"Hello, World!\"\nprint(text.endswith(\"World!\"))  # Output: True\n```\n\n## 7. Escape Characters in Strings\n\nPython strings support escape characters, allowing you to include special characters in your strings.\n\n- **`\\n`**: Newline\n- **`\\t`**: Tab\n- **`\\\\`**: Backslash\n- **`\\'`**: Single quote\n- **`\\\"`**: Double quote\n\nExample:\n```python\ntext = \"This is a line.\nAnd this is a new line.\"\nprint(text)\n# Output:\n# This is a line.\n# And this is a new line.\n```\n\n## Summary\n\n- **String Concatenation** and **Repetition** are used to combine and repeat strings.\n- **String Slicing** allows you to extract parts of a string.\n- Python strings come with many **useful methods** like `lower()`, `upper()`, `replace()`, and `split()`, to manipulate them.\n- String **formatting** and checking string properties like `isalpha()` and `isdigit()` are handy for dynamic text generation and validation.\n\n> Mastering string manipulation is key to efficient text processing in Python. ✨",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-2-10",
                                "question": "Which operator is used for string concatenation?",
                                "options": [
                                    "+",
                                    "&",
                                    "*"
                                ],
                                "correctAnswer": "+",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-2-11",
                                "question": "Which method converts a string to uppercase?",
                                "options": [
                                    "upper()",
                                    "capitalize()",
                                    "toUpper()"
                                ],
                                "correctAnswer": "upper()",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-2-12",
                                "question": "How do you find the length of a string in Python?",
                                "options": [
                                    "size()",
                                    "count()",
                                    "len()"
                                ],
                                "correctAnswer": "len()",
                                "userAnswer": ""
                            }
                        ]
                    }
                ],
                "assessment": {
                    "questions": [
                        {
                            "questionId": "assess-2-1",
                            "question": "Which of the following is a mutable data type in Python?",
                            "options": [
                                "List",
                                "Tuple",
                                "String"
                            ],
                            "correctAnswer": "List",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-2-2",
                            "question": "Which function is used to convert an integer to a string?",
                            "options": [
                                "str()",
                                "int()",
                                "string()"
                            ],
                            "correctAnswer": "str()",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-2-3",
                            "question": "Which keyword is used to define a constant variable in Python?",
                            "options": [
                                "const",
                                "final",
                                "Python does not have constants"
                            ],
                            "correctAnswer": "Python does not have constants",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-2-4",
                            "question": "Which method is used to remove whitespace from a string?",
                            "options": [
                                "strip()",
                                "trim()",
                                "removeSpaces()"
                            ],
                            "correctAnswer": "strip()",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-2-5",
                            "question": "Which symbol is used to assign values to variables?",
                            "options": [
                                "=",
                                "==",
                                ":="
                            ],
                            "correctAnswer": "=",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-2-6",
                            "question": "Which data type allows duplicate values?",
                            "options": [
                                "Set",
                                "List",
                                "Dictionary"
                            ],
                            "correctAnswer": "List",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-2-7",
                            "question": "What is the result of '5' + '5' in Python?",
                            "options": [
                                "10",
                                "'55'",
                                "Error"
                            ],
                            "correctAnswer": "'55'",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-2-8",
                            "question": "Which method is used to check if a string starts with a specific letter?",
                            "options": [
                                "startswith()",
                                "endswith()",
                                "beginwith()"
                            ],
                            "correctAnswer": "startswith()",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-2-9",
                            "question": "What is the output of type([])?",
                            "options": [
                                "<class 'list'>",
                                "<class 'tuple'>",
                                "<class 'array'>"
                            ],
                            "correctAnswer": "<class 'list'>",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-2-10",
                            "question": "Which function returns the ASCII value of a character?",
                            "options": [
                                "ord()",
                                "ascii()",
                                "chr()"
                            ],
                            "correctAnswer": "ord()",
                            "userAnswer": ""
                        }
                    ]
                }
            },
            {
                "chapterId": "ch-3",
                "title": "Operators and Expressions",
                "unlocked": false,
                "modules": [
                    {
                        "moduleId": "mod-3-1",
                        "title": "Arithmetic Operators",
                        "content": "## Learn About Arithmetic Operations in Python\n\n## Overview of Arithmetic Operations\n\nIn Python, arithmetic operations are used to perform mathematical calculations. Python supports the basic operations such as addition, subtraction, multiplication, division, and more.\n\nThese operations are fundamental in performing numerical calculations in any program.\n\n---\n\n## 1. Addition (`+`)\n\n- The **addition** operation is used to add two numbers or concatenate two strings.\n\n### Example 1: Adding Numbers\n```python\nx = 10\n y = 5\nsum = x + y\nprint(sum)  # Output: 15\n```\n\n### Example 2: Concatenating Strings\n```python\nfirst_name = \"John\"\nlast_name = \"Doe\"\nfull_name = first_name + \" \" + last_name\nprint(full_name)  # Output: John Doe\n```\n\n---\n\n## 2. Subtraction (`-`)\n\n- The **subtraction** operation is used to subtract one number from another.\n\n### Example:\n```python\nx = 15\n y = 7\ndifference = x - y\nprint(difference)  # Output: 8\n```\n\n---\n\n## 3. Multiplication (`*`)\n\n- The **multiplication** operation is used to multiply two numbers or repeat a string multiple times.\n\n### Example 1: Multiplying Numbers\n```python\nx = 3\n y = 4\nproduct = x * y\nprint(product)  # Output: 12\n```\n\n### Example 2: Repeating Strings\n```python\ngreeting = \"Hi! \"\nrepeated_greeting = greeting * 3\nprint(repeated_greeting)  # Output: Hi! Hi! Hi! \n```\n\n---\n\n## 4. Division (`/`)\n\n- The **division** operation is used to divide one number by another. Python performs **floating-point division**, even if both operands are integers.\n\n### Example:\n```python\nx = 9\n y = 3\nresult = x / y\nprint(result)  # Output: 3.0\n```\n\n- Division always returns a floating-point value, even if the division is exact.\n\n### Floor Division (`//`)\n- The **floor division** operation returns the largest integer less than or equal to the result.\n\n```python\nx = 10\n y = 3\nresult = x // y\nprint(result)  # Output: 3\n```\n\n---\n\n## 5. Modulus (`%`)\n\n- The **modulus** operation returns the remainder of the division of one number by another.\n\n### Example:\n```python\nx = 10\n y = 3\nremainder = x % y\nprint(remainder)  # Output: 1\n```\n\n- In the example, dividing 10 by 3 leaves a remainder of 1.\n\n---\n\n## 6. Exponentiation (`**`)\n\n- The **exponentiation** operation raises a number to the power of another number.\n\n### Example:\n```python\nx = 2\n y = 3\nresult = x ** y\nprint(result)  # Output: 8\n```\n\n- In this case, `2` raised to the power of `3` results in `8`.\n\n---\n\n## 7. Order of Operations (PEMDAS)\n\nPython follows the **PEMDAS** rule (Parentheses, Exponents, Multiplication and Division, Addition and Subtraction) to determine the order in which operations are performed.\n\n### Example:\n```python\nresult = 2 + 3 * 4 - 5 / 5\nprint(result)  # Output: 13.0\n```\n\n- Multiplication and division are performed before addition and subtraction.\n- Parentheses can be used to change the order of operations.\n\n---\n\n## Summary\n\n- Arithmetic operations in Python include addition (`+`), subtraction (`-`), multiplication (`*`), division (`/`), modulus (`%`), and exponentiation (`**`).\n- Division returns a float, while floor division (`//`) returns an integer.\n- Modulus gives the remainder after division, and exponentiation raises a number to a power.\n- Python follows the PEMDAS rule to prioritize operations.\n\n> Mastering arithmetic operations is essential for solving mathematical problems in Python! 🚀",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-3-1",
                                "question": "What is the result of 10 % 3?",
                                "options": [
                                    "1",
                                    "3",
                                    "0"
                                ],
                                "correctAnswer": "1",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-3-2",
                                "question": "Which operator is used for exponentiation in Python?",
                                "options": [
                                    "^",
                                    "**",
                                    "//"
                                ],
                                "correctAnswer": "**",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-3-3",
                                "question": "What will be the output of 15 // 4?",
                                "options": [
                                    "3.75",
                                    "4",
                                    "3"
                                ],
                                "correctAnswer": "3",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-3-2",
                        "title": "Comparison and Logical Operators",
                        "content": "## Understand Comparison Operators (==, !=, >, <) and Logical Operators (and, or, not)\n\n## 1. Comparison Operators\n\n**Comparison operators** are used to compare two values. These operators return a **Boolean** value (`True` or `False`) based on the result of the comparison.\n\n### Common Comparison Operators:\n\n- **Equal to (`==`)**: Returns `True` if the values on both sides are equal.\n\n```python\nx = 5\n y = 5\nprint(x == y)  # Output: True\n```\n\n- **Not equal to (`!=`)**: Returns `True` if the values on both sides are not equal.\n\n```python\nx = 5\n y = 10\nprint(x != y)  # Output: True\n```\n\n- **Greater than (`>`)**: Returns `True` if the value on the left is greater than the value on the right.\n\n```python\nx = 7\n y = 5\nprint(x > y)  # Output: True\n```\n\n- **Less than (`<`)**: Returns `True` if the value on the left is less than the value on the right.\n\n```python\nx = 3\n y = 5\nprint(x < y)  # Output: True\n```\n\n- **Greater than or equal to (`>=`)**: Returns `True` if the value on the left is greater than or equal to the value on the right.\n\n```python\nx = 5\n y = 5\nprint(x >= y)  # Output: True\n```\n\n- **Less than or equal to (`<=`)**: Returns `True` if the value on the left is less than or equal to the value on the right.\n\n```python\nx = 3\n y = 5\nprint(x <= y)  # Output: True\n```\n\n---\n\n## 2. Logical Operators\n\n**Logical operators** are used to combine conditional statements or evaluate multiple expressions. They return a Boolean value (`True` or `False`).\n\n### Common Logical Operators:\n\n- **and**: Returns `True` if both conditions are `True`.\n\n```python\nx = 5\n y = 10\nz = 15\nprint(x < y and y < z)  # Output: True\n```\n\n- **or**: Returns `True` if at least one of the conditions is `True`.\n\n```python\nx = 5\n y = 20\nprint(x < y or y > 25)  # Output: True\n```\n\n- **not**: Reverses the Boolean value. Returns `True` if the condition is `False`, and `False` if the condition is `True`.\n\n```python\nx = 5\nprint(not x > 10)  # Output: True\n```\n\n---\n\n## 3. Combining Comparison and Logical Operators\n\nYou can combine **comparison operators** with **logical operators** to create more complex conditions.\n\n### Example:\n```python\nx = 5\n y = 10\n z = 15\n\n# Check if x is less than y and y is less than z\nif x < y and y < z:\n    print(\"Condition is True\")  # Output: Condition is True\n\n# Check if x is less than y or y is greater than z\nif x < y or y > z:\n    print(\"Condition is True\")  # Output: Condition is True\n```\n\n- Combining these operators allows for more flexible logic in your code.\n\n---\n\n## 4. Truthy and Falsy Values\n\n- In Python, **truthy** values are those that evaluate to `True`, while **falsy** values evaluate to `False`.\n- Some common falsy values include `0`, `None`, `False`, `[]` (empty list), `{}` (empty dictionary), etc.\n\n### Example:\n```python\nx = 0\n y = 5\nprint(not x)  # Output: True (since x is falsy)\nprint(not y)  # Output: False (since y is truthy)\n```\n\n---\n\n## 5. Chaining Comparison Operators\n\nPython allows you to chain comparison operators, making it possible to write more compact expressions.\n\n### Example:\n```python\nx = 5\n y = 10\n z = 15\n\n# Chaining comparisons\nif x < y < z:\n    print(\"x is less than y and y is less than z\")  # Output: x is less than y and y is less than z\n```\n\n- This is equivalent to: `if x < y and y < z:`, but written in a more compact form.\n\n---\n\n## Summary\n\n- **Comparison operators** allow you to compare values: `==`, `!=`, `>`, `<`, `>=`, `<=`.\n- **Logical operators** allow you to combine conditions: `and`, `or`, `not`.\n- You can chain comparison operators to write more compact conditions.\n\n> Understanding comparison and logical operators is essential for controlling the flow of your Python programs! 💻",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-3-4",
                                "question": "What is the result of 5 == 5?",
                                "options": [
                                    "True",
                                    "False",
                                    "Error"
                                ],
                                "correctAnswer": "True",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-3-5",
                                "question": "Which logical operator returns True if both conditions are True?",
                                "options": [
                                    "or",
                                    "and",
                                    "not"
                                ],
                                "correctAnswer": "and",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-3-6",
                                "question": "What is the result of not False?",
                                "options": [
                                    "True",
                                    "False",
                                    "Error"
                                ],
                                "correctAnswer": "True",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-3-3",
                        "title": "Assignment and Bitwise Operators",
                        "content": "## Learn About Assignment Operators and Bitwise Operations in Python\n\n## 1. Assignment Operators\n\n**Assignment operators** are used to assign values to variables. Python provides a variety of assignment operators that can perform operations while assigning values.\n\n### Common Assignment Operators:\n\n- **`=` (Simple Assignment)**: Assigns the value on the right to the variable on the left.\n\n```python\nx = 10  # Assigns 10 to x\n```\n\n- **`+=` (Add and Assign)**: Adds the value on the right to the variable on the left and assigns the result to the left variable.\n\n```python\nx = 10\nx += 5  # Equivalent to x = x + 5\nprint(x)  # Output: 15\n```\n\n- **`-=` (Subtract and Assign)**: Subtracts the value on the right from the variable on the left and assigns the result to the left variable.\n\n```python\nx = 10\nx -= 3  # Equivalent to x = x - 3\nprint(x)  # Output: 7\n```\n\n- **`*=` (Multiply and Assign)**: Multiplies the variable on the left by the value on the right and assigns the result to the left variable.\n\n```python\nx = 5\nx *= 4  # Equivalent to x = x * 4\nprint(x)  # Output: 20\n```\n\n- **`/=` (Divide and Assign)**: Divides the variable on the left by the value on the right and assigns the result to the left variable.\n\n```python\nx = 20\nx /= 4  # Equivalent to x = x / 4\nprint(x)  # Output: 5.0\n```\n\n- **`//=` (Floor Divide and Assign)**: Performs floor division and assigns the result to the left variable.\n\n```python\nx = 20\nx //= 6  # Equivalent to x = x // 6\nprint(x)  # Output: 3\n```\n\n- **`%=` (Modulo and Assign)**: Performs the modulus operation and assigns the result to the left variable.\n\n```python\nx = 20\nx %= 6  # Equivalent to x = x % 6\nprint(x)  # Output: 2\n```\n\n- **`**=` (Exponentiate and Assign)**: Performs exponentiation and assigns the result to the left variable.\n\n```python\nx = 2\nx **= 3  # Equivalent to x = x ** 3\nprint(x)  # Output: 8\n```\n\n---\n\n## 2. Bitwise Operators\n\n**Bitwise operators** are used to perform operations on binary numbers. These operators work on individual bits of integers and are commonly used in low-level programming and optimization.\n\n### Common Bitwise Operators:\n\n- **`&` (Bitwise AND)**: Compares each bit of two numbers and returns `1` if both bits are `1`, otherwise returns `0`.\n\n```python\nx = 5  # 0101 in binary\ny = 3  # 0011 in binary\nresult = x & y  # 0001 in binary (1 in decimal)\nprint(result)  # Output: 1\n```\n\n- **`|` (Bitwise OR)**: Compares each bit of two numbers and returns `1` if at least one of the bits is `1`, otherwise returns `0`.\n\n```python\nx = 5  # 0101 in binary\ny = 3  # 0011 in binary\nresult = x | y  # 0111 in binary (7 in decimal)\nprint(result)  # Output: 7\n```\n\n- **`^` (Bitwise XOR)**: Compares each bit of two numbers and returns `1` if the bits are different, otherwise returns `0`.\n\n```python\nx = 5  # 0101 in binary\ny = 3  # 0011 in binary\nresult = x ^ y  # 0110 in binary (6 in decimal)\nprint(result)  # Output: 6\n```\n\n- **`~` (Bitwise NOT)**: Inverts all the bits of the number, flipping `0` to `1` and `1` to `0`.\n\n```python\nx = 5  # 0101 in binary\nresult = ~x  # 1010 in binary (-6 in decimal)\nprint(result)  # Output: -6\n```\n\n- **`<<` (Left Shift)**: Shifts the bits of the number to the left by a specified number of positions. The vacant positions on the right are filled with zeros.\n\n```python\nx = 5  # 0101 in binary\nresult = x << 2  # 0101 shifted left by 2 bits (20 in decimal)\nprint(result)  # Output: 20\n```\n\n- **`>>` (Right Shift)**: Shifts the bits of the number to the right by a specified number of positions. The vacant positions on the left are filled with the sign bit.\n\n```python\nx = 20  # 10100 in binary\nresult = x >> 2  # 10100 shifted right by 2 bits (5 in decimal)\nprint(result)  # Output: 5\n```\n\n---\n\n## 3. Combining Assignment and Bitwise Operators\n\nYou can combine assignment operators with bitwise operators to modify variables in-place.\n\n### Example:\n```python\nx = 10  # 1010 in binary\nx &= 6  # 0110 in binary (bitwise AND)\nprint(x)  # Output: 2\n```\n\n### Example:\n```python\nx = 10  # 1010 in binary\nx |= 3  # 0011 in binary (bitwise OR)\nprint(x)  # Output: 11\n```\n\n---\n\n## Summary\n\n- **Assignment operators** are used to assign values and perform operations on variables in one step, such as `+=`, `-=`, `*=`, `/=`, etc.\n- **Bitwise operators** work on individual bits of integers and include operators like `&`, `|`, `^`, `~`, `<<`, and `>>`.\n- You can combine assignment and bitwise operators to modify variables in place.\n\n> Understanding both assignment and bitwise operations is essential for efficient programming, especially when working with low-level data manipulation! 💻",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-3-7",
                                "question": "Which operator is used for bitwise AND in Python?",
                                "options": [
                                    "&",
                                    "|",
                                    "^"
                                ],
                                "correctAnswer": "&",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-3-8",
                                "question": "What does x += 2 do in Python?",
                                "options": [
                                    "Increases x by 2",
                                    "Assigns 2 to x",
                                    "Decreases x by 2"
                                ],
                                "correctAnswer": "Increases x by 2",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-3-9",
                                "question": "Which bitwise operator flips all bits?",
                                "options": [
                                    "~",
                                    "&",
                                    "|"
                                ],
                                "correctAnswer": "~",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-3-4",
                        "title": "Operator Precedence",
                        "content": "## Understand the Order of Execution of Operators in Python Expressions\n\n## 1. Operator Precedence\n\nIn Python, **operator precedence** determines the order in which operations are evaluated in an expression. Operators with higher precedence are evaluated first.\n\n### Common Operator Precedence (Highest to Lowest):\n\n| Operator Type              | Operators                          | Precedence Level |\n|----------------------------|------------------------------------|------------------|\n| Parentheses                | `()`                               | Highest          |\n| Exponentiation             | `**`                               | 2nd              |\n| Unary Plus/Minus, Bitwise NOT | `+x`, `-x`, `~x`                  | 3rd              |\n| Multiplication/Division/Modulus/Floor Division | `*`, `/`, `//`, `%` | 4th              |\n| Addition/Subtraction        | `+`, `-`                           | 5th              |\n| Bitwise Shift              | `<<`, `>>`                         | 6th              |\n| Bitwise AND                | `&`                                | 7th              |\n| Bitwise XOR                | `^`                                | 8th              |\n| Bitwise OR                 | `|`                                | 9th              |\n| Comparison                 | `==`, `!=`, `>`, `<`, `>=`, `<=`    | 10th             |\n| Logical NOT                | `not`                              | 11th             |\n| Logical AND                | `and`                              | 12th             |\n| Logical OR                 | `or`                               | 13th (Lowest)    |\n\n### Example:\n```python\nx = 5 + 3 * 2  # Output: 11 (multiplication has higher precedence)\n```\n\nIn the above example, multiplication is performed before addition.\n\n---\n\n## 2. Parentheses for Explicit Control\n\nYou can use **parentheses** `()` to control the order of evaluation explicitly. Operations inside parentheses are always performed first.\n\n### Example:\n```python\nx = (5 + 3) * 2  # Output: 16 (addition is performed first)\n```\n\nHere, addition inside parentheses is executed before multiplication, overriding the usual precedence.\n\n---\n\n## 3. Associativity of Operators\n\nIn addition to precedence, **associativity** determines the direction in which operators of the same precedence level are evaluated. The two types of associativity are:\n\n- **Left-to-Right (L-to-R)**: Most operators, such as `+`, `-`, `*`, `/`, and `and`, are evaluated from left to right.\n- **Right-to-Left (R-to-L)**: Some operators, like the exponentiation operator `**`, are evaluated from right to left.\n\n### Example of Left-to-Right Associativity:\n```python\nx = 10 - 2 + 5  # Output: 13 (left-to-right evaluation)\n```\n\nHere, `10 - 2` is evaluated first, followed by `+ 5`.\n\n### Example of Right-to-Left Associativity:\n```python\nx = 2 ** 3 ** 2  # Output: 512 (right-to-left evaluation)\n```\n\nIn this case, `3 ** 2` is evaluated first, followed by `2 ** 9`.\n\n---\n\n## 4. Operator Overloading and Custom Precedence\n\nPython allows custom **operator overloading**, where you can define how operators behave for custom objects. However, the default operator precedence and associativity still apply.\n\n### Example:\n```python\nclass ComplexNumber:\n    def __init__(self, real, imag):\n        self.real = real\n        self.imag = imag\n    def __add__(self, other):\n        return ComplexNumber(self.real + other.real, self.imag + other.imag)\n    def __repr__(self):\n        return f'{self.real} + {self.imag}i'\n\nz1 = ComplexNumber(2, 3)\nz2 = ComplexNumber(4, 5)\nresult = z1 + z2\nprint(result)  # Output: 6 + 8i\n```\n\nHere, we've overloaded the `+` operator to handle addition of complex numbers.\n\n---\n\n## 5. Combining Operators in Complex Expressions\n\nYou can combine multiple operators in complex expressions. Python will evaluate them based on **precedence** and **associativity**, with the option to use parentheses for explicit control.\n\n### Example:\n```python\nx = 5 + 3 * 2 ** 3 // 2  # Output: 5 + 3 * 8 // 2 => 5 + 3 * 4 => 5 + 12 => 17\n```\n\nIn this example, the operations are evaluated as follows:\n1. `2 ** 3` is calculated first (exponentiation).\n2. Then, `8 // 2` (floor division) is evaluated.\n3. `3 * 4` (multiplication) is evaluated next.\n4. Finally, `5 + 12` (addition) gives the result.\n\n---\n\n## 6. Common Pitfalls to Avoid\n\n- **Confusing order of operations**: Always check operator precedence when unsure, or use parentheses to make the order clear.\n- **Using wrong associativity**: Be cautious with operators like `**` which have right-to-left associativity.\n- **Implicit type conversion**: Python automatically converts types in some cases, but be aware of how operators behave with different types (e.g., using `+` with integers and strings).\n\n---\n\n## Summary\n\n- **Operator precedence** dictates the order in which operations are performed.\n- **Parentheses** can be used to change the default order of execution.\n- **Associativity** determines the direction of evaluation for operators of the same precedence.\n- Python allows you to combine operators in complex expressions, following operator precedence and associativity rules.\n\n> Understanding operator precedence and associativity is key to writing clear and correct Python code! 💡",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-3-10",
                                "question": "Which operator has the highest precedence?",
                                "options": [
                                    "*",
                                    "+",
                                    "**"
                                ],
                                "correctAnswer": "**",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-3-11",
                                "question": "What is the result of (3 + 2) * 4?",
                                "options": [
                                    "14",
                                    "20",
                                    "12"
                                ],
                                "correctAnswer": "20",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-3-12",
                                "question": "Which operator is evaluated first in 5 + 2 * 3?",
                                "options": [
                                    "+",
                                    "*",
                                    "Both at the same time"
                                ],
                                "correctAnswer": "*",
                                "userAnswer": ""
                            }
                        ]
                    }
                ],
                "assessment": {
                    "questions": [
                        {
                            "questionId": "assess-3-1",
                            "question": "Which of the following is a valid arithmetic operator in Python?",
                            "options": [
                                "&&",
                                "+",
                                "=="
                            ],
                            "correctAnswer": "+",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-3-2",
                            "question": "Which operator is used to check equality in Python?",
                            "options": [
                                "=",
                                "==",
                                "!="
                            ],
                            "correctAnswer": "==",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-3-3",
                            "question": "Which bitwise operator is used for OR?",
                            "options": [
                                "&",
                                "|",
                                "^"
                            ],
                            "correctAnswer": "|",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-3-4",
                            "question": "What is the output of 7 % 2?",
                            "options": [
                                "1",
                                "3",
                                "0"
                            ],
                            "correctAnswer": "1",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-3-5",
                            "question": "Which operator has the lowest precedence?",
                            "options": [
                                "+",
                                "or",
                                "*"
                            ],
                            "correctAnswer": "or",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-3-6",
                            "question": "What is the result of 10 / 3 in Python 3?",
                            "options": [
                                "3.3333",
                                "3",
                                "Error"
                            ],
                            "correctAnswer": "3.3333",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-3-7",
                            "question": "What does x &= 2 do?",
                            "options": [
                                "Bitwise AND operation and assign",
                                "Bitwise OR operation and assign",
                                "Assigns 2 to x"
                            ],
                            "correctAnswer": "Bitwise AND operation and assign",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-3-8",
                            "question": "What is the result of not True?",
                            "options": [
                                "False",
                                "True",
                                "None"
                            ],
                            "correctAnswer": "False",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-3-9",
                            "question": "Which expression correctly checks if x is greater than y and z?",
                            "options": [
                                "x > y and z",
                                "x > y and x > z",
                                "x > (y and z)"
                            ],
                            "correctAnswer": "x > y and x > z",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-3-10",
                            "question": "What is the output of (10 - 3) * 2?",
                            "options": [
                                "14",
                                "20",
                                "16"
                            ],
                            "correctAnswer": "14",
                            "userAnswer": ""
                        }
                    ]
                }
            },
            {
                "chapterId": "ch-4",
                "title": "Control Flow in Python",
                "unlocked": false,
                "modules": [
                    {
                        "moduleId": "mod-4-1",
                        "title": "Conditional Statements",
                        "content": "## Learn How to Use `if`, `elif`, and `else` Statements in Python for Decision-Making\n\n## 1. Introduction to Decision-Making Statements\n\nIn Python, decision-making statements are used to execute a block of code based on certain conditions. These conditions are evaluated using **Boolean expressions** (i.e., expressions that return `True` or `False`). The basic decision-making statements in Python are `if`, `elif`, and `else`.\n\n### Basic Syntax:\n\n```python\nif condition:\n    # Code block executed if condition is True\nelif another_condition:\n    # Code block executed if the previous condition is False and this one is True\nelse:\n    # Code block executed if all conditions are False\n```\n\n---\n\n## 2. `if` Statement\n\nThe `if` statement is used to execute a block of code if the condition evaluates to `True`.\n\n### Example:\n```python\nage = 18\nif age >= 18:\n    print('You are an adult.')  # Output: You are an adult.\n```\n\nIn this example, since the `age` is greater than or equal to 18, the condition evaluates to `True`, and the code block inside the `if` statement is executed.\n\n---\n\n## 3. `elif` Statement\n\nThe `elif` (short for **else if**) statement is used to check multiple conditions. It follows an `if` statement and allows you to check additional conditions if the previous ones are `False`.\n\n### Example:\n```python\nage = 15\nif age >= 18:\n    print('You are an adult.')\nelif age >= 13:\n    print('You are a teenager.')  # Output: You are a teenager.\n```\n\nHere, the first condition (`age >= 18`) is `False`, so Python checks the `elif` condition. Since `age` is greater than or equal to 13, the `elif` block is executed.\n\n---\n\n## 4. `else` Statement\n\nThe `else` statement is used to execute a block of code when all preceding conditions in the `if` and `elif` statements are `False`.\n\n### Example:\n```python\nage = 10\nif age >= 18:\n    print('You are an adult.')\nelif age >= 13:\n    print('You are a teenager.')\nelse:\n    print('You are a child.')  # Output: You are a child.\n```\n\nIn this case, both the `if` and `elif` conditions are `False`, so the code inside the `else` block is executed.\n\n---\n\n## 5. Combining Multiple Conditions\n\nYou can combine multiple conditions using logical operators like `and`, `or`, and `not`.\n\n- **`and`**: Returns `True` if both conditions are `True`.\n- **`or`**: Returns `True` if at least one condition is `True`.\n- **`not`**: Reverses the Boolean value of the condition.\n\n### Example:\n```python\nage = 25\nif age >= 18 and age <= 30:\n    print('You are a young adult.')  # Output: You are a young adult.\n```\n\nIn this case, both conditions (`age >= 18` and `age <= 30`) are `True`, so the `if` block is executed.\n\n### Example with `or` operator:\n```python\nage = 15\nif age < 13 or age > 19:\n    print('You are not a teenager.')  # Output: You are not a teenager.\n```\n\nHere, the `or` operator checks if either condition is `True`.\n\n---\n\n## 6. Nested `if` Statements\n\nYou can place an `if` statement inside another `if` statement. This is known as a **nested if**.\n\n### Example:\n```python\nage = 20\nif age >= 18:\n    if age < 21:\n        print('You are an adult but not eligible to drink in some countries.')  # Output: You are an adult but not eligible to drink in some countries.\n```\n\nIn this example, the second `if` is nested inside the first `if` and is only executed if the outer `if` condition is `True`.\n\n---\n\n## 7. Ternary Conditional Operator (Shorthand if-else)\n\nPython supports a shorthand for `if-else` statements known as the **ternary conditional operator**.\n\n### Syntax:\n```python\nresult = value_if_true if condition else value_if_false\n```\n\n### Example:\n```python\nage = 18\nstatus = 'Adult' if age >= 18 else 'Minor'\nprint(status)  # Output: Adult\n```\n\nThis single line of code works as a shorthand for an `if-else` statement and assigns a value based on the condition.\n\n---\n\n## 8. Summary\n\n- Use `if` to execute code when a condition is `True`.\n- Use `elif` to check additional conditions when the previous conditions are `False`.\n- Use `else` to define a default code block when all previous conditions are `False`.\n- Combine conditions with `and`, `or`, and `not` to make complex decisions.\n- Use nested `if` statements for more specific logic.\n- The ternary conditional operator provides a shorthand for simple `if-else` expressions.\n\n> Mastering `if`, `elif`, and `else` statements is essential for making decisions and controlling the flow of your Python programs! 🧑‍💻",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-4-1",
                                "question": "Which keyword is used for a conditional statement in Python?",
                                "options": [
                                    "if",
                                    "switch",
                                    "case"
                                ],
                                "correctAnswer": "if",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-4-2",
                                "question": "What will be the output of 'if 0:'?",
                                "options": [
                                    "True",
                                    "False",
                                    "Error"
                                ],
                                "correctAnswer": "False",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-4-3",
                                "question": "Which statement is used to execute a block of code when a condition is false?",
                                "options": [
                                    "if",
                                    "else",
                                    "elif"
                                ],
                                "correctAnswer": "else",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-4-2",
                        "title": "Loops in Python",
                        "content": "## Understand How Loops (`for` and `while`) Work in Python for Iteration\n\n## 1. Introduction to Loops\n\nIn Python, **loops** are used to repeat a block of code multiple times. There are two primary types of loops in Python:\n\n- **`for` loop**: Used for iterating over a sequence (such as a list, tuple, or string).\n- **`while` loop**: Repeats a block of code as long as a given condition is `True`.\n\nLoops are essential for automating repetitive tasks and iterating over collections of data.\n\n---\n\n## 2. `for` Loop\n\nThe `for` loop is used to iterate over a sequence (like a list, tuple, dictionary, or string) or any iterable object.\n\n### Basic Syntax:\n```python\nfor item in sequence:\n    # Code block to execute for each item\n```\n\n### Example 1: Iterating over a list\n```python\nnumbers = [1, 2, 3, 4, 5]\nfor num in numbers:\n    print(num)  # Output: 1 2 3 4 5\n```\n\nIn this example, the loop iterates over each element in the list and prints it.\n\n### Example 2: Iterating over a string\n```python\nword = 'Python'\nfor letter in word:\n    print(letter)  # Output: P y t h o n\n```\n\nHere, the `for` loop iterates over each character in the string and prints it.\n\n### Example 3: Using `range()` for numeric iteration\n```python\nfor i in range(5):\n    print(i)  # Output: 0 1 2 3 4\n```\n\nThe `range()` function generates a sequence of numbers, starting from 0 by default, and the loop iterates through that range.\n\n---\n\n## 3. `while` Loop\n\nThe `while` loop is used to execute a block of code as long as a given condition is `True`.\n\n### Basic Syntax:\n```python\nwhile condition:\n    # Code block to execute as long as the condition is True\n```\n\n### Example 1: Basic `while` loop\n```python\ncount = 0\nwhile count < 5:\n    print(count)  # Output: 0 1 2 3 4\n    count += 1  # Increment count\n```\n\nIn this example, the loop continues to run as long as the `count` is less than 5. The `count += 1` increases the value of `count` in each iteration.\n\n### Example 2: Infinite `while` loop (with break condition)\n```python\ncount = 0\nwhile True:\n    print(count)\n    count += 1\n    if count >= 5:\n        break  # Exit the loop\n```\n\nHere, the loop runs indefinitely due to the condition `True`, but it is stopped when `count` reaches 5 using the `break` statement.\n\n---\n\n## 4. `break`, `continue`, and `else` in Loops\n\nPython provides additional control statements for modifying the behavior of loops:\n\n### `break` Statement\nThe `break` statement is used to exit the loop prematurely when a condition is met.\n\n#### Example:\n```python\nfor num in range(10):\n    if num == 5:\n        break  # Stop the loop when num reaches 5\n    print(num)  # Output: 0 1 2 3 4\n```\n\n### `continue` Statement\nThe `continue` statement skips the current iteration and moves to the next iteration of the loop.\n\n#### Example:\n```python\nfor num in range(5):\n    if num == 3:\n        continue  # Skip printing 3\n    print(num)  # Output: 0 1 2 4\n```\n\n### `else` Clause in Loops\nAn `else` block can follow a loop. It is executed only if the loop terminates normally (i.e., not by `break`).\n\n#### Example:\n```python\nfor num in range(5):\n    print(num)\nelse:\n    print('Loop completed without break.')  # Output: Loop completed without break.\n```\n\nThe `else` block runs when the loop completes without encountering a `break` statement.\n\n---\n\n## 5. Nested Loops\n\nYou can place one loop inside another, which is known as a **nested loop**. This is useful for iterating over multi-dimensional data structures like lists of lists.\n\n### Example:\n```python\nfor i in range(3):\n    for j in range(2):\n        print(f'i={i}, j={j}')  # Output: i=0, j=0\n                      # i=0, j=1\n                      # i=1, j=0\n                      # i=1, j=1\n                      # i=2, j=0\n                      # i=2, j=1\n```\n\nIn this example, the outer loop runs 3 times, and for each iteration of the outer loop, the inner loop runs 2 times.\n\n---\n\n## 6. Summary\n\n- **`for` loop**: Used for iterating over a sequence or a range of numbers.\n- **`while` loop**: Runs as long as a condition is `True`.\n- Use **`break`** to exit a loop early and **`continue`** to skip an iteration.\n- Use **`else`** with loops to execute code when the loop completes normally.\n- **Nested loops** allow you to iterate over multi-dimensional structures.\n\n> Mastering loops is crucial for automating repetitive tasks and processing data in Python efficiently! 🔄",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-4-4",
                                "question": "Which loop executes at least once even if the condition is false?",
                                "options": [
                                    "while",
                                    "for",
                                    "Python does not have this feature"
                                ],
                                "correctAnswer": "Python does not have this feature",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-4-5",
                                "question": "Which statement is used to stop a loop?",
                                "options": [
                                    "stop",
                                    "break",
                                    "exit"
                                ],
                                "correctAnswer": "break",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-4-6",
                                "question": "Which loop is preferred when the number of iterations is known?",
                                "options": [
                                    "for",
                                    "while",
                                    "do-while"
                                ],
                                "correctAnswer": "for",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-4-3",
                        "title": "Loop Control Statements",
                        "content": "## Learn How to Use `break`, `continue`, and `pass` Statements to Control Loop Execution\n\n## 1. Introduction to Control Flow Statements\n\nIn Python, loops and control flow statements can be modified using **`break`**, **`continue`**, and **`pass`**. These statements provide more control over the loop's behavior and allow you to alter the flow of execution.\n\n- **`break`**: Exits the loop entirely.\n- **`continue`**: Skips the rest of the code inside the loop for the current iteration and proceeds to the next iteration.\n- **`pass`**: Acts as a placeholder that does nothing, often used in situations where syntactically required but no action is needed.\n\n---\n\n## 2. `break` Statement\n\nThe `break` statement is used to immediately exit the current loop, regardless of the remaining iterations or conditions. It can be used in both **`for`** and **`while`** loops.\n\n### Example 1: `break` in a `for` loop\n```python\nfor num in range(10):\n    if num == 5:\n        break  # Exit the loop when num is 5\n    print(num)  # Output: 0 1 2 3 4\n```\n\nIn this example, the loop stops executing as soon as `num` becomes 5.\n\n### Example 2: `break` in a `while` loop\n```python\ncount = 0\nwhile count < 10:\n    if count == 5:\n        break  # Exit the loop when count is 5\n    print(count)  # Output: 0 1 2 3 4\n    count += 1\n```\n\nHere, the loop breaks when `count` reaches 5.\n\n---\n\n## 3. `continue` Statement\n\nThe `continue` statement is used to skip the rest of the current iteration and proceed to the next iteration of the loop. This is useful when you want to ignore some specific cases and continue looping.\n\n### Example 1: `continue` in a `for` loop\n```python\nfor num in range(5):\n    if num == 2:\n        continue  # Skip printing 2\n    print(num)  # Output: 0 1 3 4\n```\n\nIn this example, when `num` is 2, the `continue` statement skips the `print` statement and moves to the next iteration.\n\n### Example 2: `continue` in a `while` loop\n```python\ncount = 0\nwhile count < 5:\n    count += 1\n    if count == 3:\n        continue  # Skip printing 3\n    print(count)  # Output: 1 2 4 5\n```\n\nThe loop skips printing 3 and continues with the next iteration.\n\n---\n\n## 4. `pass` Statement\n\nThe `pass` statement does nothing. It’s used as a placeholder where a statement is syntactically required but no action is needed. It is often used in **empty functions** or **loops** where logic needs to be added later.\n\n### Example 1: `pass` in a loop\n```python\nfor num in range(5):\n    if num == 2:\n        pass  # Do nothing when num is 2\n    else:\n        print(num)  # Output: 0 1 3 4\n```\n\nIn this example, when `num` is 2, the `pass` statement is executed, and the loop continues without any action for that iteration.\n\n### Example 2: `pass` in a function\n```python\ndef my_function():\n    pass  # Placeholder for future code\n```\n\nThe `pass` statement is used here as a placeholder in the function body where you might plan to add logic later.\n\n---\n\n## 5. Practical Use Cases\n\n- **`break`**: Useful when you want to terminate a loop early once a condition is met, such as finding a specific element in a list.\n- **`continue`**: Ideal for skipping certain iterations in a loop based on a condition, such as skipping negative numbers when summing a list of numbers.\n- **`pass`**: Helps in writing empty code blocks when the implementation is not required or is to be added later.\n\n### Example Use Case: Filtering Negative Numbers\n```python\nnumbers = [-10, 2, -5, 7, -3]\npositive_sum = 0\nfor num in numbers:\n    if num < 0:\n        continue  # Skip negative numbers\n    positive_sum += num  # Sum only positive numbers\nprint(positive_sum)  # Output: 9\n```\n\nHere, the `continue` statement skips negative numbers, and only positive numbers are summed.\n\n---\n\n## 6. Summary\n\n- **`break`**: Exits the loop immediately when a specific condition is met.\n- **`continue`**: Skips the remaining code inside the current iteration and proceeds to the next iteration of the loop.\n- **`pass`**: Does nothing and is used as a placeholder in code.\n\n> Mastering `break`, `continue`, and `pass` will help you write more efficient and readable Python code by controlling loop flow! 🔄",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-4-7",
                                "question": "Which statement skips the current iteration and moves to the next?",
                                "options": [
                                    "continue",
                                    "break",
                                    "pass"
                                ],
                                "correctAnswer": "continue",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-4-8",
                                "question": "Which statement is used to exit a loop completely?",
                                "options": [
                                    "break",
                                    "continue",
                                    "pass"
                                ],
                                "correctAnswer": "break",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-4-9",
                                "question": "Which statement is used when a syntactically required block should do nothing?",
                                "options": [
                                    "break",
                                    "continue",
                                    "pass"
                                ],
                                "correctAnswer": "pass",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-4-4",
                        "title": "Nested Loops and Conditional Statements",
                        "content": "## Understand How to Use Loops Inside Loops and Conditional Statements Inside Loops\n\n## 1. Introduction to Nested Loops and Conditionals\n\nIn Python, you can use **loops inside loops** (called **nested loops**) and place **conditional statements** inside loops to make your code more flexible and powerful.\n\n- **Nested Loops**: A loop inside another loop, useful for iterating over multi-dimensional data structures.\n- **Conditional Statements Inside Loops**: Use `if`, `elif`, and `else` inside loops to make decisions during iteration.\n\nThese techniques allow you to handle more complex scenarios like processing multi-dimensional arrays or performing checks during iteration.\n\n---\n\n## 2. Nested Loops\n\nA **nested loop** refers to using one loop inside another. This is often used for iterating over **2D arrays**, **lists of lists**, or any multi-dimensional structures.\n\n### Basic Syntax:\n```python\nfor outer_item in outer_sequence:\n    for inner_item in inner_sequence:\n        # Code block\n```\n\n### Example 1: Nested Loops with a 2D List\n```python\nmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nfor row in matrix:\n    for num in row:\n        print(num)  # Output: 1 2 3 4 5 6 7 8 9\n```\n\nIn this example, the outer loop iterates over each row in the 2D list, and the inner loop iterates over the numbers within that row.\n\n### Example 2: Nested Loops with `range()`\n```python\nfor i in range(3):\n    for j in range(2):\n        print(f'i={i}, j={j}')  # Output: i=0, j=0\n                      # i=0, j=1\n                      # i=1, j=0\n                      # i=1, j=1\n                      # i=2, j=0\n                      # i=2, j=1\n```\n\nHere, the outer loop runs 3 times and for each iteration, the inner loop runs 2 times.\n\n---\n\n## 3. Conditional Statements Inside Loops\n\nYou can place **`if`**, **`elif`**, and **`else`** statements inside loops to make decisions based on the current item being processed.\n\n### Basic Syntax:\n```python\nfor item in sequence:\n    if condition:\n        # Code block\n    elif another_condition:\n        # Code block\n    else:\n        # Code block\n```\n\n### Example 1: `if` inside a `for` loop\n```python\nnumbers = [1, 2, 3, 4, 5]\nfor num in numbers:\n    if num % 2 == 0:\n        print(f'{num} is even')  # Output: 2 is even, 4 is even\n    else:\n        print(f'{num} is odd')  # Output: 1 is odd, 3 is odd, 5 is odd\n```\n\nIn this example, the loop checks each number and uses the `if-else` statement to determine if the number is even or odd.\n\n### Example 2: Using `if` and `continue` inside a `for` loop\n```python\nnumbers = [1, 2, 3, 4, 5]\nfor num in numbers:\n    if num % 2 != 0:\n        continue  # Skip odd numbers\n    print(f'{num} is even')  # Output: 2 is even, 4 is even\n```\n\nHere, the `continue` statement is used to skip odd numbers and print only the even ones.\n\n### Example 3: Using `if` inside a `while` loop\n```python\ncount = 0\nwhile count < 10:\n    if count == 5:\n        print('Reached 5')\n        break  # Exit the loop\n    count += 1  # Output: Reached 5\n```\n\nIn this case, the loop uses an `if` statement to check when the `count` variable reaches 5, and the `break` statement is used to exit the loop.\n\n---\n\n## 4. Nested Loops with Conditional Statements\n\nYou can combine both nested loops and conditional statements to perform more complex tasks, such as checking conditions on elements inside a multi-dimensional structure.\n\n### Example 1: Nested Loop with Conditional Check\n```python\nmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nfor row in matrix:\n    for num in row:\n        if num % 2 == 0:\n            print(f'{num} is even')  # Output: 2 is even, 4 is even, 6 is even, 8 is even\n        else:\n            print(f'{num} is odd')  # Output: 1 is odd, 3 is odd, 5 is odd, 7 is odd, 9 is odd\n```\n\nIn this example, the outer loop iterates over the rows, the inner loop iterates over each number, and the `if` statement checks if each number is even or odd.\n\n### Example 2: Nested Loops with Multiple Conditions\n```python\nmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nfor row in matrix:\n    for num in row:\n        if num % 2 == 0:\n            print(f'{num} is even')\n        elif num % 3 == 0:\n            print(f'{num} is divisible by 3')\n        else:\n            print(f'{num} is odd')\n```\n\nHere, the loop checks if a number is even, divisible by 3, or neither, printing the appropriate message.\n\n---\n\n## 5. Summary\n\n- **Nested Loops**: Useful for iterating over multi-dimensional structures like 2D lists.\n- **Conditional Statements Inside Loops**: You can use `if`, `elif`, and `else` inside loops to make decisions for each iteration.\n- **Combining Nested Loops with Conditionals**: Allows for complex checks and operations on multi-dimensional data.\n\n> Mastering loops inside loops and conditional statements inside loops will help you solve complex problems more efficiently! 🔄",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-4-10",
                                "question": "Which loop is executed first in a nested loop?",
                                "options": [
                                    "Outer loop",
                                    "Inner loop",
                                    "Random"
                                ],
                                "correctAnswer": "Outer loop",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-4-11",
                                "question": "What is the output of: for i in range(2): for j in range(2): print(i, j)?",
                                "options": [
                                    "0 0, 0 1, 1 0, 1 1",
                                    "0 0, 1 0, 0 1, 1 1",
                                    "0 0, 1 1, 0 1, 1 0"
                                ],
                                "correctAnswer": "0 0, 0 1, 1 0, 1 1",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-4-12",
                                "question": "Which of the following can be inside a loop?",
                                "options": [
                                    "Another loop",
                                    "An if statement",
                                    "Both"
                                ],
                                "correctAnswer": "Both",
                                "userAnswer": ""
                            }
                        ]
                    }
                ],
                "assessment": {
                    "questions": [
                        {
                            "questionId": "assess-4-1",
                            "question": "Which keyword is used to create an if statement in Python?",
                            "options": [
                                "if",
                                "switch",
                                "case"
                            ],
                            "correctAnswer": "if",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-4-2",
                            "question": "Which loop is best when the number of iterations is unknown?",
                            "options": [
                                "for",
                                "while",
                                "do-while"
                            ],
                            "correctAnswer": "while",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-4-3",
                            "question": "Which statement is used to exit a loop?",
                            "options": [
                                "stop",
                                "break",
                                "exit"
                            ],
                            "correctAnswer": "break",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-4-4",
                            "question": "Which loop runs at least once, even if the condition is false?",
                            "options": [
                                "for",
                                "while",
                                "Python does not support this feature"
                            ],
                            "correctAnswer": "Python does not support this feature",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-4-5",
                            "question": "What is the purpose of the 'continue' statement?",
                            "options": [
                                "Exit the loop",
                                "Skip the current iteration",
                                "End the program"
                            ],
                            "correctAnswer": "Skip the current iteration",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-4-6",
                            "question": "Which statement is used for an empty function or loop?",
                            "options": [
                                "break",
                                "continue",
                                "pass"
                            ],
                            "correctAnswer": "pass",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-4-7",
                            "question": "What is the output of: for i in range(3): print(i)?",
                            "options": [
                                "0, 1, 2",
                                "1, 2, 3",
                                "0, 1, 2, 3"
                            ],
                            "correctAnswer": "0, 1, 2",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-4-8",
                            "question": "Which statement is used when an if condition needs no action?",
                            "options": [
                                "continue",
                                "break",
                                "pass"
                            ],
                            "correctAnswer": "pass",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-4-9",
                            "question": "Which keyword is used for a multi-condition decision?",
                            "options": [
                                "if",
                                "elif",
                                "else"
                            ],
                            "correctAnswer": "elif",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-4-10",
                            "question": "What is the output of: if 5 > 3: print('Yes')?",
                            "options": [
                                "Yes",
                                "No",
                                "Error"
                            ],
                            "correctAnswer": "Yes",
                            "userAnswer": ""
                        }
                    ]
                }
            },
            {
                "chapterId": "ch-5",
                "title": "Functions in Python",
                "unlocked": false,
                "modules": [
                    {
                        "moduleId": "mod-5-1",
                        "title": "Introduction to Functions",
                        "content": "## Learn the Basics of Functions, Their Importance, and How to Define Them in Python\n\n## 1. Introduction to Functions\n\nA **function** is a block of reusable code that performs a specific task. Functions help in breaking down a program into smaller, manageable pieces of code, making it more readable, maintainable, and reusable.\n\nFunctions are one of the fundamental concepts in programming and are important for:\n- **Reusability**: Write a function once and use it multiple times.\n- **Modularity**: Break a program into smaller pieces for easier development and debugging.\n- **Abstraction**: Hide complex details inside functions, allowing users to interact with a simple interface.\n\n---\n\n## 2. Defining a Function in Python\n\nIn Python, functions are defined using the **`def`** keyword, followed by the function name, parentheses for parameters, and a colon. The function body contains the code that will be executed when the function is called.\n\n### Syntax:\n```python\ndef function_name(parameters):\n    # Function body\n    # Code to be executed\n    return result  # Optional return statement\n```\n\n### Example: Simple Function Definition\n```python\ndef greet():\n    print('Hello, World!')\n\n# Calling the function\ngreet()  # Output: Hello, World!\n```\n\nHere, the function `greet()` does not take any parameters and prints `Hello, World!` when called.\n\n---\n\n## 3. Function Parameters\n\nFunctions can accept **parameters** (also called **arguments**) which allow you to pass values to the function. Parameters are specified inside the parentheses in the function definition.\n\n### Example: Function with Parameters\n```python\ndef greet(name):\n    print(f'Hello, {name}!')\n\n# Calling the function with an argument\ngreet('Alice')  # Output: Hello, Alice!\n```\n\nIn this example, the function `greet()` takes one parameter, `name`, and prints a personalized greeting.\n\n### Example: Function with Multiple Parameters\n```python\ndef add_numbers(a, b):\n    return a + b\n\n# Calling the function with two arguments\nresult = add_numbers(5, 3)\nprint(result)  # Output: 8\n```\n\nHere, the function `add_numbers()` takes two parameters, `a` and `b`, and returns their sum.\n\n---\n\n## 4. Return Statement\n\nThe **`return`** statement is used to return a value from a function. If no return statement is provided, the function will return `None` by default.\n\n### Example: Function with a Return Statement\n```python\ndef multiply(x, y):\n    return x * y\n\n# Calling the function and storing the returned value\nresult = multiply(4, 5)\nprint(result)  # Output: 20\n```\n\nIn this example, the function `multiply()` returns the product of `x` and `y`.\n\n---\n\n## 5. Function Scope\n\nVariables defined inside a function are **local** to that function and cannot be accessed outside it. However, variables defined outside the function are **global** and can be accessed inside the function if not shadowed.\n\n### Example: Function with Local Variables\n```python\ndef my_function():\n    x = 10  # Local variable\n    print(x)\n\nmy_function()  # Output: 10\n# print(x)  # This would cause an error because x is local\n```\n\nIn this case, the variable `x` is local to `my_function()` and cannot be accessed outside the function.\n\n### Example: Using Global Variables in Functions\n```python\nx = 5  # Global variable\n\ndef print_x():\n    print(x)  # Accessing global variable\n\nprint_x()  # Output: 5\n```\n\nThe global variable `x` can be accessed inside the function without issues.\n\n---\n\n## 6. Importance of Functions\n\n- **Code Reusability**: Once a function is defined, you can call it multiple times with different arguments, eliminating code repetition.\n- **Improved Readability**: Functions allow you to break the code into smaller, logically grouped blocks, making it easier to understand.\n- **Simplified Debugging**: Functions make it easier to locate and fix issues in your program.\n- **Modular Development**: Functions enable you to work on individual components of a program independently, enhancing development speed and organization.\n\n### Example: Reusing a Function\n```python\ndef greet(name):\n    print(f'Hello, {name}!')\n\ngreet('Alice')  # Output: Hello, Alice!\ngreet('Bob')  # Output: Hello, Bob!\n```\n\nIn this example, the same function `greet()` is used multiple times with different names.\n\n---\n\n## 7. Summary\n\n- **Functions** are a way to group reusable code and make programs modular and easier to manage.\n- Functions are defined using the **`def`** keyword, followed by the function name and optional parameters.\n- You can pass **parameters** to functions, and they may return values using the **`return`** statement.\n- Functions provide **reusability**, **readability**, **modularity**, and **easier debugging**.\n\n> Understanding how to define and use functions in Python will make you a more efficient and effective programmer! 💻",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-5-1",
                                "question": "Which keyword is used to define a function in Python?",
                                "options": [
                                    "func",
                                    "define",
                                    "def"
                                ],
                                "correctAnswer": "def",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-5-2",
                                "question": "What will be the output of a function that does not have a return statement?",
                                "options": [
                                    "None",
                                    "0",
                                    "Error"
                                ],
                                "correctAnswer": "None",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-5-3",
                                "question": "What is the correct syntax for calling a function named myFunction?",
                                "options": [
                                    "myFunction()",
                                    "call myFunction",
                                    "execute myFunction"
                                ],
                                "correctAnswer": "myFunction()",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-5-2",
                        "title": "Function Parameters and Arguments",
                        "content": "## Understand How to Pass Parameters and Arguments to Functions in Python\n\n## 1. Introduction to Parameters and Arguments\n\nIn Python, **parameters** are the placeholders defined in the function definition, while **arguments** are the actual values passed to the function when it is called. Understanding how to pass parameters and arguments is crucial for creating flexible and reusable functions.\n\n### Key Concepts:\n- **Parameters**: Variables in the function definition that accept values when the function is called.\n- **Arguments**: Values passed to the function when calling it.\n\n---\n\n## 2. Positional Arguments\n\nPositional arguments are the most common type of arguments in Python. They are passed to functions based on their position in the argument list.\n\n### Syntax:\n```python\ndef function_name(param1, param2, ...):\n    # Code block\n```\n\n### Example: Using Positional Arguments\n```python\ndef greet(name, age):\n    print(f'Hello, {name}! You are {age} years old.')\n\ngreet('Alice', 25)  # Output: Hello, Alice! You are 25 years old.\ngreet('Bob', 30)    # Output: Hello, Bob! You are 30 years old.\n```\n\nIn this example, the function `greet()` takes two parameters, `name` and `age`. When calling the function, the arguments are passed in the same order as the parameters.\n\n---\n\n## 3. Keyword Arguments\n\nKeyword arguments allow you to pass arguments to functions by explicitly specifying the parameter names. This way, the order of the arguments doesn’t matter.\n\n### Syntax:\n```python\ndef function_name(param1, param2, ...):\n    # Code block\n```\n\n### Example: Using Keyword Arguments\n```python\ndef greet(name, age):\n    print(f'Hello, {name}! You are {age} years old.')\n\ngreet(name='Alice', age=25)  # Output: Hello, Alice! You are 25 years old.\ngreet(age=30, name='Bob')    # Output: Hello, Bob! You are 30 years old.\n```\n\nHere, the arguments are passed using the parameter names, allowing flexibility in the order of arguments.\n\n---\n\n## 4. Default Arguments\n\nYou can define default values for function parameters. These values are used when the caller does not provide a specific argument.\n\n### Syntax:\n```python\ndef function_name(param1, param2=default_value, ...):\n    # Code block\n```\n\n### Example: Using Default Arguments\n```python\ndef greet(name, age=30):\n    print(f'Hello, {name}! You are {age} years old.')\n\ngreet('Alice')           # Output: Hello, Alice! You are 30 years old.\ngreet('Bob', 40)        # Output: Hello, Bob! You are 40 years old.\n```\n\nIn this case, the parameter `age` has a default value of `30`. If no argument is passed for `age`, the default value is used.\n\n---\n\n## 5. Variable-Length Arguments\n\nSometimes, you may not know the exact number of arguments that will be passed to a function. In such cases, you can use **`*args`** for non-keyword arguments and **`**kwargs`** for keyword arguments to handle an arbitrary number of arguments.\n\n### `*args` (Non-keyword Variable-Length Arguments)\nThe **`*args`** syntax allows you to pass a variable number of positional arguments to a function.\n\n### Syntax:\n```python\ndef function_name(*args):\n    # Code block\n```\n\n### Example: Using `*args`\n```python\ndef greet(*names):\n    for name in names:\n        print(f'Hello, {name}!')\n\ngreet('Alice', 'Bob', 'Charlie')  # Output: Hello, Alice!\n                                # Hello, Bob!\n                                # Hello, Charlie!\n```\n\nHere, the `greet()` function accepts an arbitrary number of names and greets each one.\n\n### `**kwargs` (Keyword Variable-Length Arguments)\nThe **`**kwargs`** syntax allows you to pass a variable number of keyword arguments to a function.\n\n### Syntax:\n```python\ndef function_name(**kwargs):\n    # Code block\n```\n\n### Example: Using `**kwargs`\n```python\ndef greet(**details):\n    for key, value in details.items():\n        print(f'{key}: {value}')\n\ngreet(name='Alice', age=25, city='New York')  # Output: name: Alice\n                                        # age: 25\n                                        # city: New York\n```\n\nHere, the `greet()` function accepts an arbitrary number of keyword arguments, allowing you to pass named data to the function.\n\n---\n\n## 6. Summary\n\n- **Positional Arguments**: Passed to functions based on their position in the argument list.\n- **Keyword Arguments**: Passed by explicitly specifying the parameter name, allowing flexibility in argument order.\n- **Default Arguments**: Parameters can have default values that are used if no argument is passed.\n- **Variable-Length Arguments**: Use `*args` for a variable number of positional arguments and `**kwargs` for a variable number of keyword arguments.\n\n> Mastering how to pass parameters and arguments to functions makes your code more flexible, reusable, and readable! 🛠️",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-5-4",
                                "question": "What is the default return value of a function that does not return anything?",
                                "options": [
                                    "0",
                                    "None",
                                    "Empty String"
                                ],
                                "correctAnswer": "None",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-5-5",
                                "question": "Which type of function parameter allows a default value?",
                                "options": [
                                    "Positional",
                                    "Default",
                                    "Variable-length"
                                ],
                                "correctAnswer": "Default",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-5-6",
                                "question": "Which symbol is used to pass variable-length arguments?",
                                "options": [
                                    "*",
                                    "**",
                                    "&"
                                ],
                                "correctAnswer": "*",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-5-3",
                        "title": "Return Statements and Scope",
                        "content": "## Learn How Return Statements Work and the Concept of Variable Scope in Python\n\n## 1. Introduction to Return Statements\n\nIn Python, the **`return`** statement is used to send a result back from a function. A function can return a value to the place where it was called, which can then be used further in the program.\n\nThe **`return`** statement ends the function execution and returns the specified value.\n\n### Syntax:\n```python\nreturn value\n```\n\nThe function will return the **value** specified after the `return` keyword, and that value can be used in the calling code.\n\n---\n\n## 2. Working of Return Statement\n\nThe `return` statement is essential because it allows a function to produce an output or result. Once the `return` statement is executed, the function ends, and no further code in the function is executed.\n\n### Example: Basic Return Statement\n```python\ndef add(a, b):\n    return a + b\n\n# Calling the function and using the returned value\nresult = add(5, 3)\nprint(result)  # Output: 8\n```\n\nHere, the function `add()` returns the sum of `a` and `b`. The value returned is stored in the variable `result` and printed out.\n\n---\n\n## 3. Multiple Return Statements\n\nA function can contain multiple `return` statements. However, only one return statement is executed, and the function exits at that point.\n\n### Example: Multiple Return Statements\n```python\ndef check_number(num):\n    if num > 0:\n        return 'Positive'\n    elif num < 0:\n        return 'Negative'\n    else:\n        return 'Zero'\n\nprint(check_number(10))   # Output: Positive\nprint(check_number(-5))   # Output: Negative\nprint(check_number(0))    # Output: Zero\n```\n\nIn this example, the function `check_number()` has multiple `return` statements. The function returns different values depending on the input, and once a return statement is executed, the function exits.\n\n---\n\n## 4. Returning Multiple Values\n\nIn Python, a function can return multiple values, which are actually returned as a tuple.\n\n### Example: Returning Multiple Values\n```python\ndef get_name_and_age():\n    name = 'Alice'\n    age = 25\n    return name, age  # Returns a tuple\n\nname, age = get_name_and_age()\nprint(name)  # Output: Alice\nprint(age)   # Output: 25\n```\n\nIn this example, `get_name_and_age()` returns a tuple containing two values, and those values are unpacked into `name` and `age` when the function is called.\n\n---\n\n## 5. Understanding Variable Scope\n\n**Variable scope** refers to the region of the program where a variable is accessible. There are two main types of scope in Python:\n- **Local scope**: A variable is in local scope if it is defined inside a function. It can only be accessed within that function.\n- **Global scope**: A variable is in global scope if it is defined outside of any function. It can be accessed anywhere in the program.\n\n### Local Variables\nA **local variable** is defined inside a function and can only be used within that function.\n\n### Example: Local Variable\n```python\ndef my_function():\n    x = 10  # Local variable\n    print(x)\n\nmy_function()  # Output: 10\n# print(x)  # This would cause an error because x is local\n```\n\nHere, the variable `x` is local to `my_function()` and cannot be accessed outside it.\n\n### Global Variables\nA **global variable** is defined outside of any function, and it can be accessed by any function in the program.\n\n### Example: Global Variable\n```python\nx = 5  # Global variable\n\ndef print_x():\n    print(x)  # Accessing global variable\n\nprint_x()  # Output: 5\n```\n\nThe global variable `x` can be accessed by the function `print_x()`.\n\n---\n\n## 6. Modifying Global Variables Inside Functions\n\nIf you want to modify a global variable inside a function, you need to declare it as `global` within the function.\n\n### Example: Modifying Global Variables\n```python\nx = 5  # Global variable\n\ndef modify_x():\n    global x\n    x = 10  # Modify global variable\n\nmodify_x()\nprint(x)  # Output: 10\n```\n\nIn this example, the `global` keyword is used inside the function to modify the global variable `x`.\n\n---\n\n## 7. Summary\n\n- The **`return`** statement is used to return values from a function to the caller. Once `return` is executed, the function exits.\n- A function can return **multiple values**, which are returned as a tuple.\n- **Variable scope** defines where variables are accessible. **Local variables** are defined inside functions, and **global variables** are defined outside functions and can be accessed anywhere in the program.\n- If you want to modify a global variable inside a function, use the **`global`** keyword.\n\n> Understanding return statements and variable scope helps in managing function outputs and variable accessibility effectively, making your code more structured and predictable! 💡",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-5-7",
                                "question": "Which keyword is used to return a value from a function?",
                                "options": [
                                    "return",
                                    "yield",
                                    "output"
                                ],
                                "correctAnswer": "return",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-5-8",
                                "question": "What is the scope of a variable defined inside a function?",
                                "options": [
                                    "Global",
                                    "Local",
                                    "Static"
                                ],
                                "correctAnswer": "Local",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-5-9",
                                "question": "Which keyword is used to modify a global variable inside a function?",
                                "options": [
                                    "global",
                                    "static",
                                    "nonlocal"
                                ],
                                "correctAnswer": "global",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-5-4",
                        "title": "Lambda Functions",
                        "content": "## Understand the Use of Lambda Functions and How They Differ from Regular Functions\n\n## 1. Introduction to Lambda Functions\n\nA **lambda function** is a small anonymous function defined using the `lambda` keyword. Unlike regular functions, lambda functions are often used for simple operations and are typically defined in a single line.\n\nLambda functions are sometimes referred to as **anonymous functions** because they do not require a name.\n\n### Syntax of Lambda Function:\n```python\nlambda arguments: expression\n```\n\nThe **`lambda`** keyword is followed by the parameters (arguments), a colon, and the expression to be evaluated and returned.\n\n---\n\n## 2. Difference Between Lambda Functions and Regular Functions\n\n### Regular Functions\nA regular function is defined using the `def` keyword and can contain multiple expressions and statements. The function is typically named, and you use it by calling the name.\n\n### Syntax of Regular Function:\n```python\ndef function_name(parameters):\n    # Code block\n    return result\n```\n\n### Lambda Functions vs Regular Functions\n- **Lambda Function**: A lambda function is used for simpler operations and returns a result without a `return` statement. It is generally a single-line function.\n- **Regular Function**: A regular function can have multiple statements and a `return` keyword, and it is useful for more complex logic.\n\n### Example: Lambda Function vs Regular Function\n```python\n# Regular Function\ndef add(x, y):\n    return x + y\n\n# Lambda Function\nadd_lambda = lambda x, y: x + y\n\nprint(add(5, 3))          # Output: 8\nprint(add_lambda(5, 3))   # Output: 8\n```\n\nIn this example, both the regular function `add()` and the lambda function `add_lambda` perform the same task, but the lambda function is defined more concisely.\n\n---\n\n## 3. When to Use Lambda Functions\n\nLambda functions are typically used when you need a short, simple function for a specific task, such as:\n- Passing a function as an argument to another function (like in `map()`, `filter()`, and `sorted()`).\n- Performing simple operations in code that doesn’t require a full function definition.\n\n### Example: Lambda with `sorted()`\n```python\nnumbers = [(1, 2), (3, 4), (5, 0)]\n\n# Sorting based on the second value of each tuple\nsorted_numbers = sorted(numbers, key=lambda x: x[1])\nprint(sorted_numbers)  # Output: [(5, 0), (1, 2), (3, 4)]\n```\n\nIn this example, the lambda function `lambda x: x[1]` is used to specify that the sorting should be based on the second element of each tuple.\n\n---\n\n## 4. Limitations of Lambda Functions\n\nAlthough lambda functions are useful for simple tasks, they do have limitations:\n- **Single Expression**: Lambda functions can only contain a single expression. You cannot have multiple statements or logic inside a lambda function.\n- **Limited Debugging**: Since lambda functions are anonymous, they are harder to debug compared to regular functions.\n\n### Example of a Limitation\n```python\n# Invalid Lambda with multiple statements\nlambda x: x + 1; print(x)  # SyntaxError: invalid syntax\n```\n\nThis example would cause an error because a lambda function cannot contain multiple statements.\n\n---\n\n## 5. Summary\n\n- A **lambda function** is a small, anonymous function defined using the `lambda` keyword. It is typically used for simple, single-expression operations.\n- A **regular function** is defined with the `def` keyword and can contain multiple statements and a `return` statement.\n- Lambda functions are ideal for use cases where a quick function is required, and they are often used with functions like `map()`, `filter()`, and `sorted()`.\n- Lambda functions have limitations, such as only being able to contain one expression and making debugging harder.\n\n> Lambda functions provide a concise way to define simple operations, but regular functions are better suited for more complex logic and tasks. 🤔",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-5-10",
                                "question": "What is a lambda function?",
                                "options": [
                                    "A function with no return type",
                                    "An anonymous function",
                                    "A recursive function"
                                ],
                                "correctAnswer": "An anonymous function",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-5-11",
                                "question": "Which keyword is used to create a lambda function?",
                                "options": [
                                    "lambda",
                                    "def",
                                    "func"
                                ],
                                "correctAnswer": "lambda",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-5-12",
                                "question": "Which of the following is a valid lambda function syntax?",
                                "options": [
                                    "lambda x: x * 2",
                                    "def lambda x: x * 2",
                                    "function lambda x: x * 2"
                                ],
                                "correctAnswer": "lambda x: x * 2",
                                "userAnswer": ""
                            }
                        ]
                    }
                ],
                "assessment": {
                    "questions": [
                        {
                            "questionId": "assess-5-1",
                            "question": "Which statement is used to define a function in Python?",
                            "options": [
                                "func",
                                "def",
                                "define"
                            ],
                            "correctAnswer": "def",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-5-2",
                            "question": "What will be the output if a function has no return statement?",
                            "options": [
                                "None",
                                "0",
                                "Error"
                            ],
                            "correctAnswer": "None",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-5-3",
                            "question": "What is the purpose of the 'return' statement?",
                            "options": [
                                "Terminate function execution",
                                "Return a value",
                                "Both"
                            ],
                            "correctAnswer": "Both",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-5-4",
                            "question": "Which type of function argument has a default value?",
                            "options": [
                                "Positional",
                                "Default",
                                "Variable-length"
                            ],
                            "correctAnswer": "Default",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-5-5",
                            "question": "What is the scope of a variable declared inside a function?",
                            "options": [
                                "Global",
                                "Local",
                                "Static"
                            ],
                            "correctAnswer": "Local",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-5-6",
                            "question": "Which function is used to create an anonymous function?",
                            "options": [
                                "lambda",
                                "def",
                                "func"
                            ],
                            "correctAnswer": "lambda",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-5-7",
                            "question": "Which keyword allows modification of a global variable inside a function?",
                            "options": [
                                "global",
                                "nonlocal",
                                "static"
                            ],
                            "correctAnswer": "global",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-5-8",
                            "question": "Which of the following is a correct function definition?",
                            "options": [
                                "function myFunc():",
                                "def myFunc():",
                                "define myFunc():"
                            ],
                            "correctAnswer": "def myFunc():",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-5-9",
                            "question": "What will be the output of 'lambda x: x+5' when called with 10?",
                            "options": [
                                "10",
                                "15",
                                "Error"
                            ],
                            "correctAnswer": "15",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-5-10",
                            "question": "Which keyword is used to define a recursive function?",
                            "options": [
                                "def",
                                "return",
                                "rec"
                            ],
                            "correctAnswer": "def",
                            "userAnswer": ""
                        }
                    ]
                }
            },
            {
                "chapterId": "ch-6",
                "title": "Lists and Tuples in Python",
                "unlocked": false,
                "modules": [
                    {
                        "moduleId": "mod-6-1",
                        "title": "Introduction to Lists",
                        "content": "## Learn About Lists in Python, Their Properties, and Basic Operations\n\n## 1. Introduction to Lists in Python\n\nA **list** in Python is an ordered collection of elements that can hold items of different data types (e.g., integers, strings, floats, etc.). Lists are **mutable**, meaning you can modify their content after creation.\n\n### Syntax for Defining a List:\n```python\nmy_list = [element1, element2, element3, ...]\n```\n\n### Example of a List:\n```python\nmy_list = [10, 'apple', 3.14, True]\nprint(my_list)  # Output: [10, 'apple', 3.14, True]\n```\n\nIn this example, `my_list` contains an integer, a string, a float, and a boolean.\n\n---\n\n## 2. Properties of Lists\n\n- **Ordered**: Lists preserve the order of elements. The order in which elements are added is maintained when accessed.\n- **Mutable**: You can change the contents of a list (e.g., add, remove, or modify elements).\n- **Heterogeneous**: A list can store elements of different data types.\n- **Indexed**: Each element in a list is accessed by its index, starting from 0.\n\n### Example: Accessing List Elements\n```python\nmy_list = [10, 'apple', 3.14, True]\nprint(my_list[0])  # Output: 10\nprint(my_list[1])  # Output: 'apple'\n```\n\nHere, the list elements are accessed using their respective indices.\n\n---\n\n## 3. Basic Operations on Lists\n\n### 3.1. Accessing Elements\nTo access an element in a list, use the index.\n\n```python\nmy_list = [10, 20, 30, 40, 50]\nprint(my_list[2])  # Output: 30\n```\n\n### 3.2. Modifying Elements\nYou can modify an element at a specific index.\n\n```python\nmy_list[1] = 25  # Modify second element\nprint(my_list)  # Output: [10, 25, 30, 40, 50]\n```\n\n### 3.3. Adding Elements\nYou can add elements to a list using methods like `append()`, `insert()`, and `extend()`.\n\n- **`append()`** adds an element at the end of the list.\n\n```python\nmy_list.append(60)\nprint(my_list)  # Output: [10, 20, 30, 40, 50, 60]\n```\n\n- **`insert()`** adds an element at a specific position.\n\n```python\nmy_list.insert(2, 15)  # Insert 15 at index 2\nprint(my_list)  # Output: [10, 20, 15, 30, 40, 50, 60]\n```\n\n- **`extend()`** adds multiple elements at the end.\n\n```python\nmy_list.extend([70, 80])\nprint(my_list)  # Output: [10, 20, 15, 30, 40, 50, 60, 70, 80]\n```\n\n### 3.4. Removing Elements\nYou can remove elements using methods like `remove()`, `pop()`, and `clear()`.\n\n- **`remove()`** removes the first occurrence of a specified element.\n\n```python\nmy_list.remove(30)\nprint(my_list)  # Output: [10, 20, 15, 40, 50, 60, 70, 80]\n```\n\n- **`pop()`** removes and returns an element at a specific index (or the last element by default).\n\n```python\nremoved_element = my_list.pop(3)\nprint(removed_element)  # Output: 40\nprint(my_list)  # Output: [10, 20, 15, 50, 60, 70, 80]\n```\n\n- **`clear()`** removes all elements from the list.\n\n```python\nmy_list.clear()\nprint(my_list)  # Output: []\n```\n\n### 3.5. Checking if an Element Exists\nTo check if an element exists in a list, use the `in` keyword.\n\n```python\nmy_list = [10, 20, 30, 40, 50]\nprint(30 in my_list)  # Output: True\nprint(100 in my_list)  # Output: False\n```\n\n### 3.6. Traversing a List\nYou can traverse a list using a **for loop** or **while loop**.\n\n```python\nfor item in my_list:\n    print(item)\n```\n\n---\n\n## 4. List Slicing\nYou can access a subset of a list using slicing. The syntax for slicing is:\n```python\nlist[start:stop:step]\n```\n\n- **start**: The index where the slice starts (inclusive).\n- **stop**: The index where the slice ends (exclusive).\n- **step**: The step size (optional).\n\n### Example: List Slicing\n```python\nmy_list = [10, 20, 30, 40, 50, 60]\nprint(my_list[1:4])   # Output: [20, 30, 40]\nprint(my_list[:3])    # Output: [10, 20, 30]\nprint(my_list[::2])   # Output: [10, 30, 50]\n```\n\n---\n\n## 5. Summary\n\n- A **list** is an ordered, mutable collection of elements that can store items of different data types.\n- Lists are **indexed** starting from 0, and you can modify their elements, add new items, or remove existing ones.\n- Common list operations include **accessing**, **modifying**, **adding**, **removing**, **checking existence**, and **traversing**.\n- **Slicing** allows you to create a subset of a list using specific indices.\n\n> Lists are fundamental in Python for storing and manipulating collections of data, making them versatile and widely used! 🚀",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-6-1",
                                "question": "Which of the following is a valid list declaration?",
                                "options": [
                                    "list = {1, 2, 3}",
                                    "list = [1, 2, 3]",
                                    "list = (1, 2, 3)"
                                ],
                                "correctAnswer": "list = [1, 2, 3]",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-6-2",
                                "question": "What will be the output of len([1, 2, 3])?",
                                "options": [
                                    "2",
                                    "3",
                                    "4"
                                ],
                                "correctAnswer": "3",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-6-3",
                                "question": "How do you access the first element of a list named myList?",
                                "options": [
                                    "myList[0]",
                                    "myList(0)",
                                    "myList{0}"
                                ],
                                "correctAnswer": "myList[0]",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-6-2",
                        "title": "List Methods and Operations",
                        "content": "## Understand Various List Operations and Built-in Methods Like `append()`, `remove()`, and `pop()`\n\n## 1. Introduction to List Operations\n\nLists in Python are powerful, versatile, and easy to manipulate. There are several built-in methods and operations that allow you to modify lists in various ways. In this topic, we will cover some commonly used list operations and methods such as `append()`, `remove()`, and `pop()`.\n\nThese operations are helpful when you need to add, remove, or retrieve elements from a list.\n\n---\n\n## 2. `append()` Method\n\nThe **`append()`** method is used to add an element to the end of a list.\n\n### Syntax:\n```python\nlist.append(element)\n```\n\n- `element` is the item that will be added to the list.\n- The `append()` method modifies the list in-place and returns `None`.\n\n### Example: Using `append()`\n```python\nmy_list = [1, 2, 3]\nmy_list.append(4)\nprint(my_list)  # Output: [1, 2, 3, 4]\n```\n\nYou can append any type of element (e.g., integer, string, list, etc.).\n\n### Example: Appending a List\n```python\nmy_list.append([5, 6])\nprint(my_list)  # Output: [1, 2, 3, 4, [5, 6]]\n```\n\nNotice that when you append a list, the entire list is added as a single element.\n\n---\n\n## 3. `remove()` Method\n\nThe **`remove()`** method removes the first occurrence of a specified element from the list.\n\n### Syntax:\n```python\nlist.remove(element)\n```\n\n- `element` is the item to be removed from the list.\n- If the element is not found, a `ValueError` is raised.\n\n### Example: Using `remove()`\n```python\nmy_list = [1, 2, 3, 4, 5]\nmy_list.remove(3)\nprint(my_list)  # Output: [1, 2, 4, 5]\n```\n\nIn this example, the element `3` is removed from the list.\n\n### Example: Removing an Element That Does Not Exist\n```python\nmy_list.remove(6)  # Raises ValueError: list.remove(x): x not in list\n```\n\nYou should ensure that the element you want to remove exists in the list to avoid the `ValueError`.\n\n---\n\n## 4. `pop()` Method\n\nThe **`pop()`** method removes and returns an element from a list at a specific index. If no index is specified, it removes and returns the last element.\n\n### Syntax:\n```python\nlist.pop([index])\n```\n\n- If an index is provided, `pop()` removes and returns the element at that index.\n- If no index is provided, it removes and returns the last element in the list.\n- If the list is empty, calling `pop()` will raise an `IndexError`.\n\n### Example: Using `pop()` with an Index\n```python\nmy_list = [10, 20, 30, 40, 50]\nremoved_element = my_list.pop(2)\nprint(removed_element)  # Output: 30\nprint(my_list)          # Output: [10, 20, 40, 50]\n```\n\n### Example: Using `pop()` without an Index\n```python\nremoved_element = my_list.pop()\nprint(removed_element)  # Output: 50\nprint(my_list)          # Output: [10, 20, 40]\n```\n\nIn both cases, `pop()` removes the specified element and returns it.\n\n### Example: Using `pop()` on an Empty List\n```python\nempty_list = []\nempty_list.pop()  # Raises IndexError: pop from empty list\n```\n\nBe cautious when using `pop()` on an empty list.\n\n---\n\n## 5. Other Useful List Methods\n\nApart from `append()`, `remove()`, and `pop()`, there are several other built-in methods you can use to manipulate lists:\n\n- **`extend()`**: Adds all elements from another iterable (e.g., list, tuple) to the end of the list.\n\n```python\nmy_list.extend([60, 70])\nprint(my_list)  # Output: [10, 20, 40, 60, 70]\n```\n\n- **`insert()`**: Inserts an element at a specific index.\n\n```python\nmy_list.insert(1, 15)\nprint(my_list)  # Output: [10, 15, 20, 40, 60, 70]\n```\n\n- **`clear()`**: Removes all elements from the list.\n\n```python\nmy_list.clear()\nprint(my_list)  # Output: []\n```\n\n- **`index()`**: Returns the index of the first occurrence of an element.\n\n```python\nmy_list = [10, 20, 30, 40]\nindex = my_list.index(30)\nprint(index)  # Output: 2\n```\n\n- **`count()`**: Returns the number of occurrences of an element in the list.\n\n```python\ncount = my_list.count(20)\nprint(count)  # Output: 1\n```\n\n---\n\n## 6. Summary\n\n- The **`append()`** method adds an element to the end of the list.\n- The **`remove()`** method removes the first occurrence of an element.\n- The **`pop()`** method removes and returns an element from a specified index, or the last element if no index is provided.\n- Other useful methods include **`extend()`**, **`insert()`**, **`clear()`**, **`index()`**, and **`count()`**.\n\n> List operations such as `append()`, `remove()`, and `pop()` are essential for manipulating collections of data in Python. 💡",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-6-4",
                                "question": "Which method is used to add an element to the end of a list?",
                                "options": [
                                    "insert()",
                                    "append()",
                                    "extend()"
                                ],
                                "correctAnswer": "append()",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-6-5",
                                "question": "Which method removes and returns the last element of a list?",
                                "options": [
                                    "delete()",
                                    "remove()",
                                    "pop()"
                                ],
                                "correctAnswer": "pop()",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-6-6",
                                "question": "Which method is used to sort a list in ascending order?",
                                "options": [
                                    "sort()",
                                    "order()",
                                    "arrange()"
                                ],
                                "correctAnswer": "sort()",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-6-3",
                        "title": "Introduction to Tuples",
                        "content": "## Learn About Tuples in Python, Their Properties, and How They Differ from Lists\n\n## 1. Introduction to Tuples\n\nA **tuple** in Python is a collection of ordered elements, similar to a list, but unlike lists, tuples are **immutable**. Once a tuple is created, you cannot modify its elements. Tuples are useful when you need a collection of items that should not change during the execution of a program.\n\n### Syntax for Defining a Tuple:\n```python\ntuple_name = (element1, element2, element3, ...)\n```\n\n### Example of a Tuple:\n```python\ntuple_example = (10, 'apple', 3.14, True)\nprint(tuple_example)  # Output: (10, 'apple', 3.14, True)\n```\n\nHere, `tuple_example` contains an integer, a string, a float, and a boolean.\n\n---\n\n## 2. Properties of Tuples\n\n- **Ordered**: Tuples maintain the order of elements, and the order is preserved when accessed.\n- **Immutable**: Tuples cannot be changed after creation, meaning you cannot modify, add, or remove elements.\n- **Heterogeneous**: A tuple can store elements of different data types.\n- **Indexed**: Like lists, elements are accessed by their index, starting from 0.\n\n### Example: Accessing Elements in a Tuple\n```python\ntuple_example = (10, 'apple', 3.14, True)\nprint(tuple_example[0])  # Output: 10\nprint(tuple_example[1])  # Output: 'apple'\n```\n\nYou can access the elements of a tuple using their indices, just like lists.\n\n---\n\n## 3. Differences Between Lists and Tuples\n\n| Feature       | List                        | Tuple                      |\n|---------------|-----------------------------|----------------------------|\n| **Mutability** | Mutable (can be modified)   | Immutable (cannot be modified) |\n| **Syntax**     | `[element1, element2, ...]`  | `(element1, element2, ...)`  |\n| **Use Case**   | When you need a collection of items that can change | When you need a collection of items that should remain constant |\n| **Performance** | Slower than tuples due to mutability | Faster than lists due to immutability |\n| **Methods**     | More methods like `append()`, `remove()`, etc. | Fewer methods available (e.g., `count()`, `index()`) |\n\n---\n\n## 4. Basic Operations on Tuples\n\n### 4.1. Accessing Elements\nYou can access elements in a tuple by using an index.\n\n```python\ntuple_example = (10, 20, 30, 40, 50)\nprint(tuple_example[2])  # Output: 30\n```\n\n### 4.2. Slicing Tuples\nTuples support slicing, which allows you to access a portion of the tuple.\n\n```python\ntuple_example = (10, 20, 30, 40, 50)\nprint(tuple_example[1:4])  # Output: (20, 30, 40)\n```\n\n### 4.3. Concatenation and Repetition\nTuples support concatenation (joining tuples) and repetition (repeating a tuple).\n\n```python\ntuple1 = (1, 2, 3)\ntuple2 = (4, 5, 6)\nprint(tuple1 + tuple2)  # Output: (1, 2, 3, 4, 5, 6)\nprint(tuple1 * 2)       # Output: (1, 2, 3, 1, 2, 3)\n```\n\n### 4.4. Counting Elements\nYou can count the number of occurrences of an element in a tuple using the `count()` method.\n\n```python\ntuple_example = (10, 20, 20, 30, 20)\ncount = tuple_example.count(20)\nprint(count)  # Output: 3\n```\n\n### 4.5. Finding the Index of an Element\nYou can find the index of the first occurrence of an element using the `index()` method.\n\n```python\ntuple_example = (10, 20, 30, 40, 50)\nindex = tuple_example.index(30)\nprint(index)  # Output: 2\n```\n\n---\n\n## 5. Tuples with One Element\nA tuple with one element requires a trailing comma to distinguish it from a regular parentheses expression.\n\n### Example:\n```python\ntuple_one_element = (10,)\nprint(type(tuple_one_element))  # Output: <class 'tuple'>\n```\n\nIf you forget the comma, Python will interpret it as a simple expression enclosed in parentheses.\n\n---\n\n## 6. Summary\n\n- A **tuple** is an ordered, immutable collection of elements.\n- Tuples support indexing and slicing, similar to lists.\n- Tuples are generally faster than lists because they are immutable.\n- Tuples have fewer methods available compared to lists, but you can perform basic operations such as counting and finding indices.\n- Use tuples when you want a collection of items that should not be modified.\n\n> Tuples are often used for heterogeneous data collections where immutability is a benefit, such as storing coordinates or fixed sets of values. 🧑‍💻",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-6-7",
                                "question": "Which of the following is a valid tuple declaration?",
                                "options": [
                                    "tuple = [1, 2, 3]",
                                    "tuple = {1, 2, 3}",
                                    "tuple = (1, 2, 3)"
                                ],
                                "correctAnswer": "tuple = (1, 2, 3)",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-6-8",
                                "question": "Which of the following is a characteristic of tuples?",
                                "options": [
                                    "Tuples are mutable",
                                    "Tuples are immutable",
                                    "Tuples support item deletion"
                                ],
                                "correctAnswer": "Tuples are immutable",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-6-9",
                                "question": "Which method is used to count occurrences of an element in a tuple?",
                                "options": [
                                    "count()",
                                    "index()",
                                    "find()"
                                ],
                                "correctAnswer": "count()",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-6-4",
                        "title": "Tuple Operations and Methods",
                        "content": "## Understand How to Access Tuple Elements and Perform Operations Like Concatenation and Slicing\n\n## 1. Introduction to Tuples\n\nA tuple in Python is a collection of ordered elements. Unlike lists, tuples are **immutable**, meaning their elements cannot be changed after creation. Despite this, you can still perform several operations such as accessing elements, slicing, and concatenation.\n\n### Syntax for Defining a Tuple:\n```python\ntuple_name = (element1, element2, element3, ...)\n```\n\n### Example of a Tuple:\n```python\ntuple_example = (1, 'apple', 3.14, True)\nprint(tuple_example)  # Output: (1, 'apple', 3.14, True)\n```\n\n---\n\n## 2. Accessing Tuple Elements\n\nYou can access the elements of a tuple using indexing. Tuple indexing is similar to lists, where the first element has index 0, the second element has index 1, and so on.\n\n### Syntax:\n```python\ntuple_name[index]\n```\n\n### Example: Accessing Tuple Elements\n```python\ntuple_example = (1, 'apple', 3.14, True)\nprint(tuple_example[0])  # Output: 1\nprint(tuple_example[1])  # Output: 'apple'\n```\n\nYou can also use negative indexing to access elements from the end of the tuple.\n\n### Example: Negative Indexing\n```python\nprint(tuple_example[-1])  # Output: True\nprint(tuple_example[-2])  # Output: 3.14\n```\n\n---\n\n## 3. Slicing Tuples\n\nSlicing allows you to extract a portion of the tuple, defined by a range of indices. It returns a new tuple containing the selected elements.\n\n### Syntax:\n```python\ntuple_name[start:end]\n```\n- **`start`**: The index to start the slice (inclusive).\n- **`end`**: The index to end the slice (exclusive).\n\nIf **`start`** is omitted, it defaults to the beginning (index 0). If **`end`** is omitted, it defaults to the end of the tuple.\n\n### Example: Slicing a Tuple\n```python\ntuple_example = (10, 20, 30, 40, 50)\nprint(tuple_example[1:4])  # Output: (20, 30, 40)\n```\n\nYou can also use negative indices to slice from the end of the tuple.\n\n### Example: Slicing with Negative Indices\n```python\nprint(tuple_example[-4:-1])  # Output: (20, 30, 40)\n```\n\n### Example: Omitting Start or End Index\n```python\nprint(tuple_example[:3])  # Output: (10, 20, 30)\nprint(tuple_example[2:])  # Output: (30, 40, 50)\n```\n\n---\n\n## 4. Concatenating Tuples\n\nConcatenation refers to joining two or more tuples together to form a new tuple. This can be done using the **`+`** operator.\n\n### Syntax:\n```python\nnew_tuple = tuple1 + tuple2\n```\n\n### Example: Concatenating Tuples\n```python\ntuple1 = (1, 2, 3)\ntuple2 = (4, 5, 6)\nresult = tuple1 + tuple2\nprint(result)  # Output: (1, 2, 3, 4, 5, 6)\n```\n\nYou can concatenate as many tuples as you like.\n\n### Example: Concatenating Multiple Tuples\n```python\ntuple3 = (7, 8)\nresult = tuple1 + tuple2 + tuple3\nprint(result)  # Output: (1, 2, 3, 4, 5, 6, 7, 8)\n```\n\n---\n\n## 5. Repeating Tuples\n\nYou can repeat the elements of a tuple by using the **`*`** operator.\n\n### Syntax:\n```python\nnew_tuple = tuple * n\n```\n- **`n`** is the number of times the tuple will be repeated.\n\n### Example: Repeating a Tuple\n```python\ntuple_example = (1, 2, 3)\nresult = tuple_example * 3\nprint(result)  # Output: (1, 2, 3, 1, 2, 3, 1, 2, 3)\n```\n\n---\n\n## 6. Summary\n\n- Tuples are **immutable** collections of ordered elements, and you can access elements using **indexing**.\n- You can use **slicing** to extract a subset of a tuple.\n- Tuples can be **concatenated** using the `+` operator, and you can **repeat** a tuple using the `*` operator.\n\n> Understanding tuple operations such as accessing elements, slicing, and concatenation will help you work with data collections more effectively, especially when you need to maintain immutability. 🧑‍💻",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-6-10",
                                "question": "How do you access the last element of a tuple?",
                                "options": [
                                    "tuple[-1]",
                                    "tuple[last]",
                                    "tuple(end)"
                                ],
                                "correctAnswer": "tuple[-1]",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-6-11",
                                "question": "Which operation can be performed on a tuple?",
                                "options": [
                                    "Adding elements",
                                    "Removing elements",
                                    "Concatenation"
                                ],
                                "correctAnswer": "Concatenation",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-6-12",
                                "question": "Which function converts a tuple into a list?",
                                "options": [
                                    "convert()",
                                    "tuple_to_list()",
                                    "list()"
                                ],
                                "correctAnswer": "list()",
                                "userAnswer": ""
                            }
                        ]
                    }
                ],
                "assessment": {
                    "questions": [
                        {
                            "questionId": "assess-6-1",
                            "question": "Which method adds an element to a list?",
                            "options": [
                                "insert()",
                                "append()",
                                "extend()"
                            ],
                            "correctAnswer": "append()",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-6-2",
                            "question": "Which of the following is a mutable data type?",
                            "options": [
                                "List",
                                "Tuple",
                                "String"
                            ],
                            "correctAnswer": "List",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-6-3",
                            "question": "Which of the following is immutable?",
                            "options": [
                                "List",
                                "Tuple",
                                "Dictionary"
                            ],
                            "correctAnswer": "Tuple",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-6-4",
                            "question": "Which function returns the length of a list?",
                            "options": [
                                "size()",
                                "count()",
                                "len()"
                            ],
                            "correctAnswer": "len()",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-6-5",
                            "question": "How do you access the first element of a list?",
                            "options": [
                                "list[1]",
                                "list[0]",
                                "list.first()"
                            ],
                            "correctAnswer": "list[0]",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-6-6",
                            "question": "Which method removes an element by value from a list?",
                            "options": [
                                "pop()",
                                "remove()",
                                "delete()"
                            ],
                            "correctAnswer": "remove()",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-6-7",
                            "question": "Which method returns the index of an element in a tuple?",
                            "options": [
                                "find()",
                                "index()",
                                "search()"
                            ],
                            "correctAnswer": "index()",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-6-8",
                            "question": "Which of the following is a valid way to declare an empty tuple?",
                            "options": [
                                "tuple = ()",
                                "tuple = []",
                                "tuple = {}"
                            ],
                            "correctAnswer": "tuple = ()",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-6-9",
                            "question": "Which function converts a list to a tuple?",
                            "options": [
                                "tuple()",
                                "convert()",
                                "to_tuple()"
                            ],
                            "correctAnswer": "tuple()",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-6-10",
                            "question": "How do you remove all elements from a list?",
                            "options": [
                                "clear()",
                                "delete()",
                                "remove_all()"
                            ],
                            "correctAnswer": "clear()",
                            "userAnswer": ""
                        }
                    ]
                }
            }
        ]
    },
    {
        "id": "course-4",
        "title": "HTML Course",
        "description": "Learn the fundamentals of HTML, the standard language for creating webpages.",
        "chapters": [
            {
                "chapterId": "ch-1",
                "title": "Introduction to HTML",
                "unlocked": true,
                "modules": [
                    {
                        "moduleId": "mod-1-1",
                        "title": "What is HTML?",
                        "content": "## Learn the Basics of HTML and Its Role in Web Development\n\n## 1. What is HTML?\n\n- **HTML** stands for **HyperText Markup Language**.\n- It is the **standard markup language** for creating web pages.\n- HTML describes the **structure** of a webpage using **tags** and **elements**.\n\n---\n\n## 2. Role of HTML in Web Development\n\n- **Structure**: HTML provides the basic structure of web content.\n- **Content Display**: It defines headings, paragraphs, lists, links, images, and more.\n- **Foundation Layer**: HTML works alongside **CSS** (for styling) and **JavaScript** (for interactivity).\n- **SEO & Accessibility**: Proper HTML helps search engines understand the content and improves accessibility.\n\n---\n\n## 3. Basic Structure of an HTML Document\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <title>My First Webpage</title>\n</head>\n<body>\n  <h1>Welcome to My Website</h1>\n  <p>This is a paragraph of text.</p>\n</body>\n</html>\n```\n\n### Explanation:\n- `<!DOCTYPE html>`: Declares the document type.\n- `<html>`: Root element of an HTML page.\n- `<head>`: Contains metadata (title, links, etc.).\n- `<title>`: Title shown in the browser tab.\n- `<body>`: Visible content of the page.\n- `<h1>`: Heading tag.\n- `<p>`: Paragraph tag.\n\n---\n\n## 4. Common HTML Elements\n\n- **Headings**: `<h1>` to `<h6>`\n- **Paragraph**: `<p>`\n- **Links**: `<a href=\"https://example.com\">Click here</a>`\n- **Images**: `<img src=\"image.jpg\" alt=\"Description\">`\n- **Lists**: Ordered `<ol>`, Unordered `<ul>`, List items `<li>`\n- **Tables**: `<table>`, `<tr>`, `<td>`, `<th>`\n\n---\n\n## 5. Importance in Web Development\n\n- HTML is the **starting point** of every web page.\n- Without HTML, browsers cannot display content.\n- It ensures content is structured and readable.\n\n---\n\n## 6. Summary\n\n- **HTML** is the foundation of web development.\n- It structures and organizes web content.\n- Used alongside **CSS** and **JavaScript** for complete web experiences.\n\n> **Next Step:** Learn about HTML elements and how to build more complex page structures! \n",
                        "unlocked": true,
                        "questions": [
                            {
                                "questionId": "q-1-1",
                                "question": "What does HTML stand for?",
                                "options": ["Hyper Text Markup Language", "High Text Machine Language", "Hyperlink Text Management Language"],
                                "correctAnswer": "Hyper Text Markup Language",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-1-2",
                                "question": "HTML is used to?",
                                "options": ["Structure content on the web", "Style web pages", "Add interactivity to pages"],
                                "correctAnswer": "Structure content on the web",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-1-3",
                                "question": "Which of the following is a correct HTML tag?",
                                "options": ["<body>", "<script>", "<style>"],
                                "correctAnswer": "<body>",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-1-2",
                        "title": "Basic HTML Structure",
                        "content": "## Understand the Basic Structure of an HTML Document\n\n## 1. Basic HTML Skeleton\n\nEvery HTML document follows a basic structure to ensure the browser reads and displays the content correctly.\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Page Title</title>\n</head>\n<body>\n  <h1>Main Heading</h1>\n  <p>This is a paragraph of text.</p>\n</body>\n</html>\n```\n\n---\n\n## 2. Breakdown of Each Part\n\n### `<!DOCTYPE html>`\n- Declares the document type.\n- Tells the browser to render the page in **standards-compliant mode**.\n\n### `<html>`\n- The **root element** that wraps the entire HTML content.\n\n### `<head>`\n- Contains **meta-information** about the document.\n- Includes:\n  - `<title>`: The title shown on the browser tab.\n  - Metadata like character set, viewport settings.\n  - Links to stylesheets and scripts.\n\n### `<body>`\n- Contains everything that is **visible** to the user.\n- Includes headings, paragraphs, images, links, lists, etc.\n\n---\n\n## 3. Visual Representation\n\n```\nDocument\n└── html\n    ├── head\n    │   └── title\n    └── body\n        ├── h1 (Heading)\n        └── p (Paragraph)\n```\n\n---\n\n## 4. Important Notes\n\n- **Indentation**: Helps to keep code clean and readable.\n- **Closing Tags**: Always close tags properly to avoid errors.\n- **Nest Elements**: Maintain proper nesting for structure and readability.\n\n---\n\n## 5. Summary\n\n- HTML documents follow a clear and structured format.\n- Main sections are: **DOCTYPE**, **html**, **head**, and **body**.\n- Understanding this structure is essential for building web pages.\n\n> **Next Step:** Start adding elements like headings, paragraphs, and links to build your first webpage!\n",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-1-4",
                                "question": "Which tag is used to define the HTML document type?",
                                "options": ["<!DOCTYPE html>", "<html>", "<meta>"],
                                "correctAnswer": "<!DOCTYPE html>",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-1-5",
                                "question": "What tag is used to wrap all the content in an HTML document?",
                                "options": ["<html>", "<head>", "<body>"],
                                "correctAnswer": "<html>",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-1-6",
                                "question": "Where is the metadata placed in an HTML file?",
                                "options": ["In the <head> tag", "In the <body> tag", "At the bottom of the page"],
                                "correctAnswer": "In the <head> tag",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-1-3",
                        "title": "Headings and Paragraphs",
                        "content": "## Learn to Use Heading and Paragraph Tags in HTML\n\n## 1. Heading Tags\n\nHTML provides six levels of headings to define the structure and importance of content.\n\n### Syntax\n```html\n<h1>Main Heading</h1>\n<h2>Subheading</h2>\n<h3>Section Heading</h3>\n<h4>Subsection Heading</h4>\n<h5>Minor Heading</h5>\n<h6>Smallest Heading</h6>\n```\n\n### Explanation\n- `<h1>` is the most important heading.\n- `<h6>` is the least important heading.\n- Headings help in organizing the content and improve accessibility and SEO.\n\n### Example\n```html\n<h1>Welcome to My Website</h1>\n<h2>About Me</h2>\n<h3>Hobbies</h3>\n```\n\n---\n\n## 2. Paragraph Tag\n\nUse the `<p>` tag to define paragraphs in HTML.\n\n### Syntax\n```html\n<p>This is a paragraph of text providing more information about the topic.</p>\n```\n\n### Explanation\n- Paragraphs separate blocks of text.\n- Browsers automatically add some space (margin) before and after paragraphs.\n\n### Example\n```html\n<p>HTML stands for HyperText Markup Language. It is the standard language for creating web pages.</p>\n```\n\n---\n\n## 3. Visual Output Example\n\n```html\n<h1>Learning HTML</h1>\n<p>HTML is the building block of the web. It defines the structure of web pages.</p>\n<h2>Importance of Headings</h2>\n<p>Headings help in organizing content and making it easier to read.</p>\n```\n\n---\n\n## 4. Best Practices\n- Use headings in order: start from `<h1>` and go down.\n- Use paragraphs to make content readable.\n- Avoid skipping heading levels to maintain structure.\n\n---\n\n## 5. Summary\n- **Headings** (`<h1>` to `<h6>`) structure your content.\n- **Paragraphs** (`<p>`) describe details or provide supporting text.\n- Proper use of these tags improves readability and accessibility of your web page.\n\n> **Next Step:** Learn to use formatting tags like `<strong>`, `<em>`, and lists to enhance your content!\n",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-1-7",
                                "question": "How many heading tags are available in HTML?",
                                "options": ["3", "6", "5"],
                                "correctAnswer": "6",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-1-8",
                                "question": "Which tag is used for a paragraph?",
                                "options": ["<p>", "<h1>", "<para>"],
                                "correctAnswer": "<p>",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-1-9",
                                "question": "What is the largest heading tag?",
                                "options": ["<h1>", "<h6>", "<head>"],
                                "correctAnswer": "<h1>",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-1-4",
                        "title": "Comments and Whitespace",
                        "content": "## Explore How to Add Comments and Use Whitespace Effectively in HTML\n\n## 1. Adding Comments in HTML\n\n### Syntax\n```html\n<!-- This is a comment -->\n```\n\n### Explanation\n- Comments are not displayed in the browser.\n- They are useful for adding notes, explanations, or reminders in your code.\n- Browsers ignore anything written inside `<!-- -->`.\n\n### Example\n```html\n<!-- Main heading of the page -->\n<h1>Welcome to My Blog</h1>\n\n<!-- Paragraph explaining the purpose -->\n<p>This blog shares insights on web development.</p>\n```\n\n### Best Practices for Comments\n- Use comments to explain complex code sections.\n- Comment out code temporarily for testing purposes.\n\n---\n\n## 2. Using Whitespace Effectively\n\n### Explanation\n- HTML ignores extra spaces, tabs, and newlines.\n- Whitespace is used to make the code more readable.\n\n### Example (Readable Code)\n```html\n<h1>Welcome</h1>\n<p>\n  This is an example paragraph.\n  Note how spaces and newlines do not affect the output.\n</p>\n```\n\n### Example (Browser Output)\n> Welcome  \n> This is an example paragraph. Note how spaces and newlines do not affect the output.\n\n### Note\n- For adding intentional spaces in output, use `&nbsp;` (non-breaking space).\n\n```html\n<p>This&nbsp;&nbsp;has&nbsp;&nbsp;extra&nbsp;&nbsp;spaces.</p>\n```\n\n---\n\n## 3. Summary\n- **Comments**: Use `<!-- -->` to add notes in your HTML code.\n- **Whitespace**: Format your code with spaces and newlines for better readability. HTML ignores extra spaces in output.\n- **Tip**: Well-commented and neatly spaced code is easier to understand and maintain.\n\n> **Next Step:** Learn how to create lists and add links in HTML!\n",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-1-10",
                                "question": "Which of the following is the correct syntax for an HTML comment?",
                                "options": ["<!-- Comment -->", "// Comment", "/* Comment */"],
                                "correctAnswer": "<!-- Comment -->",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-1-11",
                                "question": "Whitespace in HTML is usually:",
                                "options": ["Collapsed", "Expanded", "Ignored"],
                                "correctAnswer": "Collapsed",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-1-12",
                                "question": "HTML ignores extra spaces and line breaks unless inside:",
                                "options": ["<pre>", "<code>", "<text>"],
                                "correctAnswer": "<pre>",
                                "userAnswer": ""
                            }
                        ]
                    }
                ],
                "assessment": {
                    "questions": [
                        {
                            "questionId": "assess-1-1",
                            "question": "What is the purpose of the <!DOCTYPE html> declaration?",
                            "options": ["To link stylesheets", "To declare the HTML version", "To define page layout"],
                            "correctAnswer": "To declare the HTML version",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-1-2",
                            "question": "Which tag defines the document’s title?",
                            "options": ["<title>", "<head>", "<meta>"],
                            "correctAnswer": "<title>",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-1-3",
                            "question": "What does the <body> tag contain?",
                            "options": ["Metadata", "Visible content", "Styles"],
                            "correctAnswer": "Visible content",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-1-4",
                            "question": "How is an HTML comment written?",
                            "options": ["<!-- This is a comment -->", "// This is a comment", "/* This is a comment */"],
                            "correctAnswer": "<!-- This is a comment -->",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-1-5",
                            "question": "Which tag is used for the main content of a page?",
                            "options": ["<main>", "<content>", "<section>"],
                            "correctAnswer": "<main>",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-1-6",
                            "question": "Which tag is used to define the metadata of an HTML page?",
                            "options": ["<meta>", "<data>", "<info>"],
                            "correctAnswer": "<meta>",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-1-7",
                            "question": "How many <h1> tags should be used per page ideally?",
                            "options": ["1", "2", "Unlimited"],
                            "correctAnswer": "1",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-1-8",
                            "question": "Which element represents the root of an HTML document?",
                            "options": ["<html>", "<head>", "<doc>"],
                            "correctAnswer": "<html>",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-1-9",
                            "question": "HTML tags are:",
                            "options": ["Case-insensitive", "Case-sensitive", "Always uppercase"],
                            "correctAnswer": "Case-insensitive",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-1-10",
                            "question": "Which tag is used to add a line break in HTML?",
                            "options": ["<br>", "<lb>", "<break>"],
                            "correctAnswer": "<br>",
                            "userAnswer": ""
                        }
                    ]
                }
            }
        ,
            {
                "chapterId": "ch-2",
                "title": "HTML Text Formatting and Styles",
                "unlocked": false,
                "modules": [
                    {
                        "moduleId": "mod-2-1",
                        "title": "Text Formatting Tags",
                        "content": "## Learn How to Use Formatting Tags like <b>, <i>, <u>, <strong>, <em> in HTML\n\n## 1. <b> Tag (Bold Text)\n### Syntax\n```html\n<b>This text is bold</b>\n```\n### Explanation\n- Makes the text visually bold.\n- Does not add extra importance (just styling).\n\n### Example\n```html\n<p>This is <b>bold</b> text.</p>\n```\n\n---\n\n## 2. <i> Tag (Italic Text)\n### Syntax\n```html\n<i>This text is italic</i>\n```\n### Explanation\n- Displays text in italics.\n- Purely stylistic, no emphasis or importance.\n\n### Example\n```html\n<p>This is <i>italic</i> text.</p>\n```\n\n---\n\n## 3. <u> Tag (Underlined Text)\n### Syntax\n```html\n<u>This text is underlined</u>\n```\n### Explanation\n- Underlines the text.\n- Use with care as underlines are commonly used for links.\n\n### Example\n```html\n<p>This is <u>underlined</u> text.</p>\n```\n\n---\n\n## 4. <strong> Tag (Strong Importance)\n### Syntax\n```html\n<strong>This text is strong</strong>\n```\n### Explanation\n- Displays the text in bold.\n- Adds **semantic importance**, indicating the text is important.\n\n### Example\n```html\n<p>Please <strong>read carefully</strong> before submitting.</p>\n```\n\n---\n\n## 5. <em> Tag (Emphasized Text)\n### Syntax\n```html\n<em>This text is emphasized</em>\n```\n### Explanation\n- Displays the text in italics.\n- Adds **semantic emphasis**, indicating stress or importance.\n\n### Example\n```html\n<p><em>Note:</em> Save your work frequently.</p>\n```\n\n---\n\n## Summary\n- **<b>**: Bold (visual only)\n- **<i>**: Italic (visual only)\n- **<u>**: Underlined (visual only)\n- **<strong>**: Bold + important meaning\n- **<em>**: Italic + emphasized meaning\n\n> **Tip:** Use `<strong>` and `<em>` for better accessibility and SEO, as they add meaning, not just style.\n\n> **Next Step:** Learn how to create lists and hyperlinks in HTML!\n",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-2-1",
                                "question": "Which tag is used to bold text in HTML?",
                                "options": ["<b>", "<strong>", "<bold>"],
                                "correctAnswer": "<b>",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-2-2",
                                "question": "Which tag is used for emphasized text?",
                                "options": ["<em>", "<i>", "<highlight>"],
                                "correctAnswer": "<em>",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-2-3",
                                "question": "What does the <u> tag do?",
                                "options": ["Underlines text", "Italicizes text", "Makes text bold"],
                                "correctAnswer": "Underlines text",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-2-2",
                        "title": "HTML Styles and the Style Attribute",
                        "content": "## Understand How to Use the `style` Attribute to Change Text Appearance in HTML\n\nThe `style` attribute in HTML is used to apply **inline CSS** (Cascading Style Sheets) directly to an element to change its appearance.\n\n## Basic Syntax\n```html\n<tagname style=\"property: value;\">Content</tagname>\n```\n\n- **`property`**: The CSS property you want to change (like color, font-size).\n- **`value`**: The value you assign to that property.\n\n---\n\n## Common Properties to Change Text Appearance\n\n### 1. Change Text Color\n```html\n<p style=\"color: blue;\">This is blue text.</p>\n```\n\n### 2. Change Font Size\n```html\n<p style=\"font-size: 20px;\">This text is 20 pixels in size.</p>\n```\n\n### 3. Change Font Family\n```html\n<p style=\"font-family: Arial;\">This text uses the Arial font.</p>\n```\n\n### 4. Make Text Bold\n```html\n<p style=\"font-weight: bold;\">This is bold text.</p>\n```\n\n### 5. Italicize Text\n```html\n<p style=\"font-style: italic;\">This is italic text.</p>\n```\n\n### 6. Add Text Decoration (Underline, Line-through)\n```html\n<p style=\"text-decoration: underline;\">This is underlined text.</p>\n<p style=\"text-decoration: line-through;\">This text has a line through it.</p>\n```\n\n### 7. Align Text\n```html\n<p style=\"text-align: center;\">This text is centered.</p>\n```\n\n---\n\n## Example: Combining Multiple Styles\n```html\n<p style=\"color: green; font-size: 18px; font-family: Verdana; text-align: center;\">\n  Styled text example.\n</p>\n```\n\n---\n\n## Notes\n- Use the `style` attribute for quick styling, but for larger projects, prefer **external CSS** for better organization.\n- Separate multiple CSS properties with semicolons `;`.\n\n> **Tip:** Inline styles are good for small changes, but using CSS files keeps your HTML cleaner and easier to manage!\n\n> **Next Step:** Learn how to use CSS classes and IDs for more powerful styling!\n",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-2-4",
                                "question": "Which attribute is used to add inline CSS styles?",
                                "options": ["style", "class", "font"],
                                "correctAnswer": "style",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-2-5",
                                "question": "How do you change text color using the style attribute?",
                                "options": ["style=\"color:blue;\"", "style=\"text-color:blue;\"", "font-color=\"blue\""],
                                "correctAnswer": "style=\"color:blue;\"",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-2-6",
                                "question": "Which tag supports the style attribute?",
                                "options": ["All HTML tags", "<div> only", "<style> only"],
                                "correctAnswer": "All HTML tags",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-2-3",
                        "title": "HTML Quotations and Citations",
                        "content": "## Learn to Use Quotation and Citation Tags in HTML\n\nHTML provides specific tags to mark quotations, citations, and abbreviations. These tags improve the meaning (semantics) of your content and can enhance accessibility.\n\n---\n\n## 1. `<blockquote>` — Block Quotation\n- Used for longer quotations that stand apart from the main text.\n- Browsers usually indent the blockquote automatically.\n\n```html\n<blockquote>\n  The only limit to our realization of tomorrow is our doubts of today.\n</blockquote>\n```\n\n### With Citation Attribute\n```html\n<blockquote cite=\"https://www.example.com/quote-source\">\n  The only limit to our realization of tomorrow is our doubts of today.\n</blockquote>\n```\n\n---\n\n## 2. `<q>` — Short Inline Quotation\n- Used for short quotations inside a paragraph.\n- Browsers usually add quotation marks automatically.\n\n```html\n<p>The famous saying is: <q>Time is money.</q></p>\n```\n\n---\n\n## 3. `<cite>` — Citation\n- Used to reference the title of a creative work (book, website, article, etc.).\n- Usually displayed in *italic* by default.\n\n```html\n<p><cite>The Great Gatsby</cite> is a classic novel by F. Scott Fitzgerald.</p>\n```\n\n---\n\n## 4. `<abbr>` — Abbreviation or Acronym\n- Used to indicate abbreviations.\n- The `title` attribute provides the full form when users hover over the abbreviation.\n\n```html\n<p><abbr title=\"World Health Organization\">WHO</abbr> was founded in 1948.</p>\n```\n\n---\n\n## Summary\n| Tag | Purpose |\n|-----|----------|\n| `<blockquote>` | Long block quotation |\n| `<q>` | Short inline quotation |\n| `<cite>` | Reference to a creative work |\n| `<abbr>` | Abbreviations with explanation |\n\n---\n\n> **Tip:** Using these tags makes your content more semantic and improves accessibility for screen readers!\n\n> **Next Step:** Learn about lists and how to structure content using ordered and unordered lists.\n",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-2-7",
                                "question": "Which tag is used for long quotations?",
                                "options": ["<blockquote>", "<quote>", "<q>"],
                                "correctAnswer": "<blockquote>",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-2-8",
                                "question": "What does the <abbr> tag represent?",
                                "options": ["Abbreviation", "Attribute", "Abstract"],
                                "correctAnswer": "Abbreviation",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-2-9",
                                "question": "The <cite> tag is used for?",
                                "options": ["Citing a reference", "Making italic text", "Creating a hyperlink"],
                                "correctAnswer": "Citing a reference",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-2-4",
                        "title": "HTML Colors",
                        "content": "## Understand How to Use Colors with HTML and Style Attributes\n\nIn HTML, you can use the `style` attribute to change the color of text, backgrounds, borders, and more. You can apply colors by name, hexadecimal codes, RGB, or other color formats.\n\n---\n\n## 1. Applying Text Color\nUse the `color` property to change text color.\n\n```html\n<p style=\"color: blue;\">This is blue text.</p>\n<p style=\"color: #FF5733;\">This is orange text using hex code.</p>\n<p style=\"color: rgb(255, 0, 0);\">This is red text using RGB.</p>\n```\n\n---\n\n## 2. Applying Background Color\nUse the `background-color` property to change the background color of an element.\n\n```html\n<p style=\"background-color: yellow;\">This paragraph has a yellow background.</p>\n<p style=\"background-color: #e0f7fa;\">This paragraph has a light blue background using hex.</p>\n```\n\n---\n\n## 3. Applying Color to Borders\nYou can also color borders.\n\n```html\n<p style=\"border: 2px solid green;\">This paragraph has a green border.</p>\n```\n\n---\n\n## 4. Color Values\nThere are different ways to specify colors:\n- **Color Names:** `red`, `blue`, `green`, etc.\n- **Hexadecimal:** `#RRGGBB` (e.g., `#ff0000` for red)\n- **RGB:** `rgb(255, 0, 0)`\n- **RGBA (with transparency):** `rgba(255, 0, 0, 0.5)`\n- **HSL:** `hsl(0, 100%, 50%)`\n\n---\n\n## Example with Multiple Styles\n```html\n<p style=\"color: white; background-color: black; border: 1px solid white;\">\n  This is white text on a black background with a white border.\n</p>\n```\n\n---\n\n## Summary\n- Use `color` for text color.\n- Use `background-color` for background.\n- Use `border` to style borders with color.\n- Colors can be defined using names, hex codes, RGB, RGBA, or HSL.\n\n> **Tip:** Using consistent color schemes improves the visual appeal and readability of your web pages.\n\n> **Next Step:** Learn how to style text with fonts, sizes, and alignment!\n",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-2-10",
                                "question": "What value types can be used for HTML colors?",
                                "options": ["Color names, hex codes, RGB", "Only color names", "Only hex codes"],
                                "correctAnswer": "Color names, hex codes, RGB",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-2-11",
                                "question": "Which is a valid hex color code?",
                                "options": ["#FF5733", "rgb(255,0,0)", "color:red"],
                                "correctAnswer": "#FF5733",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-2-12",
                                "question": "Which attribute is used to set background color inline?",
                                "options": ["style", "bgcolor", "background"],
                                "correctAnswer": "style",
                                "userAnswer": ""
                            }
                        ]
                    }
                ],
                "assessment": {
                    "questions": [
                        {
                            "questionId": "assess-2-1",
                            "question": "Which tag is used to italicize text?",
                            "options": ["<i>", "<em>", "<italic>"],
                            "correctAnswer": "<i>",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-2-2",
                            "question": "How do you underline text?",
                            "options": ["<u>", "<underline>", "<ul>"],
                            "correctAnswer": "<u>",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-2-3",
                            "question": "What is the purpose of the <strong> tag?",
                            "options": ["Emphasize strong importance", "Italicize text", "Underline text"],
                            "correctAnswer": "Emphasize strong importance",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-2-4",
                            "question": "How do you set text color to red using inline style?",
                            "options": ["style=\"color:red;\"", "style=\"text:red;\"", "color:red"],
                            "correctAnswer": "style=\"color:red;\"",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-2-5",
                            "question": "Which tag is used for a short inline quotation?",
                            "options": ["<q>", "<quote>", "<blockquote>"],
                            "correctAnswer": "<q>",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-2-6",
                            "question": "What is the correct way to define an abbreviation?",
                            "options": ["<abbr title=\"Hypertext Markup Language\">HTML</abbr>", "<abbreviation>HTML</abbreviation>", "<title abbr=\"HTML\">"],
                            "correctAnswer": "<abbr title=\"Hypertext Markup Language\">HTML</abbr>",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-2-7",
                            "question": "Which tag changes background color using style?",
                            "options": ["Any tag with style", "<body>", "<background>"],
                            "correctAnswer": "Any tag with style",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-2-8",
                            "question": "Which of the following is a valid RGB color format?",
                            "options": ["rgb(255,255,255)", "#255255255", "255,255,255"],
                            "correctAnswer": "rgb(255,255,255)",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-2-9",
                            "question": "What does <em> tag imply semantically?",
                            "options": ["Emphasis", "Italics only", "Underline"],
                            "correctAnswer": "Emphasis",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-2-10",
                            "question": "Which HTML element is used to define important text?",
                            "options": ["<strong>", "<b>", "<important>"],
                            "correctAnswer": "<strong>",
                            "userAnswer": ""
                        }
                    ]
                }
            }
        ,
            {
                "chapterId": "ch-3",
                "title": "HTML Lists, Tables, and Links",
                "unlocked": false,
                "modules": [
                    {
                        "moduleId": "mod-3-1",
                        "title": "HTML Lists",
                        "content": "## Learn How to Use Ordered, Unordered, and Definition Lists in HTML\n\nLists in HTML help organize content in a structured way. There are three main types of lists:\n\n---\n\n## 1. Unordered List (`<ul>`)\nAn unordered list uses bullet points.\n\n```html\n<ul>\n  <li>HTML</li>\n  <li>CSS</li>\n  <li>JavaScript</li>\n</ul>\n```\n\n**Output:**\n- HTML\n- CSS\n- JavaScript\n\n---\n\n## 2. Ordered List (`<ol>`)\nAn ordered list uses numbers or letters.\n\n```html\n<ol>\n  <li>Plan</li>\n  <li>Design</li>\n  <li>Develop</li>\n  <li>Test</li>\n</ol>\n```\n\n**Output:**\n1. Plan\n2. Design\n3. Develop\n4. Test\n\nYou can also change the type of numbers:\n\n```html\n<ol type=\"A\">\n  <li>Step One</li>\n  <li>Step Two</li>\n</ol>\n```\n\n**Types:**\n- `1` (default)\n- `A` (uppercase letters)\n- `a` (lowercase letters)\n- `I` (uppercase Roman numerals)\n- `i` (lowercase Roman numerals)\n\n---\n\n## 3. Definition List (`<dl>`, `<dt>`, `<dd>`)\nA definition list pairs terms with descriptions.\n\n```html\n<dl>\n  <dt>HTML</dt>\n  <dd>A markup language for creating web pages.</dd>\n\n  <dt>CSS</dt>\n  <dd>Used to style HTML content.</dd>\n\n  <dt>JavaScript</dt>\n  <dd>Makes web pages interactive.</dd>\n</dl>\n```\n\n**Output:**\nHTML\n: A markup language for creating web pages.\n\nCSS\n: Used to style HTML content.\n\nJavaScript\n: Makes web pages interactive.\n\n---\n\n## Summary\n- **Unordered list (`<ul>`)** — Bullet points.\n- **Ordered list (`<ol>`)** — Numbered or lettered lists.\n- **Definition list (`<dl>`)** — Term and description pairs.\n\n> **Tip:** Lists are great for organizing menus, steps, glossaries, and more!\n\n> **Next Step:** Learn how to create hyperlinks to connect different parts of your web page or external resources.\n",
                    "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-3-1",
                                "question": "Which tag is used for an unordered list?",
                                "options": ["<ul>", "<ol>", "<li>"],
                                "correctAnswer": "<ul>",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-3-2",
                                "question": "Which tag defines a list item?",
                                "options": ["<li>", "<item>", "<list>"],
                                "correctAnswer": "<li>",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-3-3",
                                "question": "Which tag is used for a definition list?",
                                "options": ["<dl>", "<list>", "<def>"],
                                "correctAnswer": "<dl>",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-3-2",
                        "title": "HTML Tables",
                        "content": "## Understand How to Create Tables Using `<table>`, `<tr>`, `<td>`, and `<th>` in HTML\n\nTables in HTML are used to display data in rows and columns, similar to a spreadsheet.\n\n---\n\n## Basic Table Structure\n\n```html\n<table>\n  <tr>\n    <th>Language</th>\n    <th>Purpose</th>\n  </tr>\n  <tr>\n    <td>HTML</td>\n    <td>Structure of web pages</td>\n  </tr>\n  <tr>\n    <td>CSS</td>\n    <td>Styling of web pages</td>\n  </tr>\n  <tr>\n    <td>JavaScript</td>\n    <td>Interactivity on web pages</td>\n  </tr>\n</table>\n```\n\n**Explanation:**\n- `<table>` — Starts the table.\n- `<tr>` (Table Row) — Defines a row in the table.\n- `<th>` (Table Header) — Defines a header cell (bold and centered by default).\n- `<td>` (Table Data) — Defines a standard data cell.\n\n---\n\n## Adding Borders and Styling\nYou can use the `border` attribute or CSS to add borders and improve appearance.\n\n```html\n<table border=\"1\">\n  <tr>\n    <th>Framework</th>\n    <th>Language</th>\n  </tr>\n  <tr>\n    <td>React</td>\n    <td>JavaScript</td>\n  </tr>\n  <tr>\n    <td>Spring Boot</td>\n    <td>Java</td>\n  </tr>\n</table>\n```\n\n> **Tip:** It’s better to use CSS for styling in modern web development.\n\n```html\n<table style=\"border: 1px solid black; border-collapse: collapse;\">\n  <tr>\n    <th style=\"border: 1px solid black;\">Tool</th>\n    <th style=\"border: 1px solid black;\">Use</th>\n  </tr>\n  <tr>\n    <td style=\"border: 1px solid black;\">Git</td>\n    <td style=\"border: 1px solid black;\">Version control</td>\n  </tr>\n</table>\n```\n\n---\n\n## Adding More Rows and Columns\nYou can expand tables as needed:\n\n```html\n<table border=\"1\">\n  <tr>\n    <th>Country</th>\n    <th>Capital</th>\n    <th>Continent</th>\n  </tr>\n  <tr>\n    <td>India</td>\n    <td>New Delhi</td>\n    <td>Asia</td>\n  </tr>\n  <tr>\n    <td>France</td>\n    <td>Paris</td>\n    <td>Europe</td>\n  </tr>\n</table>\n```\n\n---\n\n## Summary\n- Use `<table>` to create a table.\n- Use `<tr>` to create rows.\n- Use `<th>` for header cells.\n- Use `<td>` for data cells.\n- Style with CSS for better presentation.\n\n> **Next Step:** Learn how to merge cells with `colspan` and `rowspan` for more complex tables!\n",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-3-4",
                                "question": "Which tag defines a table row?",
                                "options": ["<tr>", "<td>", "<row>"],
                                "correctAnswer": "<tr>",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-3-5",
                                "question": "Which tag defines a header cell in a table?",
                                "options": ["<th>", "<thead>", "<td>"],
                                "correctAnswer": "<th>",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-3-6",
                                "question": "What tag is used for a cell in a table row?",
                                "options": ["<td>", "<tr>", "<cell>"],
                                "correctAnswer": "<td>",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-3-3",
                        "title": "HTML Links",
                        "content": "## Learn to Create Hyperlinks Using the `<a>` Tag and Its Attributes\n\nHyperlinks connect web pages and resources. In HTML, the `<a>` tag (anchor tag) is used to create links.\n\n---\n\n## Basic Syntax\n\n```html\n<a href=\"https://www.example.com\">Visit Example</a>\n```\n\n- `<a>` — Anchor tag to create a hyperlink.\n- `href` — Attribute that specifies the URL of the page the link goes to.\n- Link Text — The clickable text that users see.\n\n---\n\n## Open Link in a New Tab\n\nUse the `target` attribute:\n\n```html\n<a href=\"https://www.example.com\" target=\"_blank\">Open in New Tab</a>\n```\n\n- `target=\"_blank\"` — Opens the link in a new browser tab or window.\n\n---\n\n## Link to an Email Address\n\n```html\n<a href=\"mailto:someone@example.com\">Send Email</a>\n```\n\n- `mailto:` opens the user’s default email client with the recipient's address filled in.\n\n---\n\n## Link to a Phone Number\n\n```html\n<a href=\"tel:+1234567890\">Call Us</a>\n```\n\n- `tel:` makes the phone number clickable, useful for mobile users.\n\n---\n\n## Add Title Attribute (Tooltip)\n\n```html\n<a href=\"https://www.example.com\" title=\"Go to Example\">Visit Example</a>\n```\n\n- `title` shows extra information when you hover over the link.\n\n---\n\n## Linking to Page Sections (Internal Links)\n\n1. Assign an `id` to the target section:\n\n```html\n<h2 id=\"about\">About Us</h2>\n```\n\n2. Create a link to it:\n\n```html\n<a href=\"#about\">Go to About Section</a>\n```\n\n---\n\n## Summary\n- Use `<a>` to create links.\n- Use `href` to specify the destination.\n- Use `target=\"_blank\"` to open links in new tabs.\n- Use `mailto:` for email links and `tel:` for phone links.\n- Use `#id` for internal page navigation.\n\n> **Next Step:** Learn how to add images and make them clickable with the `<a>` tag!\n",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-3-7",
                                "question": "Which tag is used to define a hyperlink?",
                                "options": ["<a>", "<link>", "<href>"],
                                "correctAnswer": "<a>",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-3-8",
                                "question": "Which attribute specifies the link destination?",
                                "options": ["href", "src", "link"],
                                "correctAnswer": "href",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-3-9",
                                "question": "What does target=\"_blank\" do?",
                                "options": ["Opens link in a new tab", "Closes the tab", "Makes link bold"],
                                "correctAnswer": "Opens link in a new tab",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-3-4",
                        "title": "Link Styling and Navigation",
                        "content": "## Explore Ways to Style Links and Create Navigation Menus\n\nLinks can be styled to make them visually appealing and to match the design of your website. You can also combine links to create navigation menus.\n\n---\n\n## Styling Links with CSS\n\n### Change Link Color\n```html\n<a href=\"https://example.com\">Visit Example</a>\n```\n```html\n<style>\na {\n  color: blue; /* Change text color */\n}\n</style>\n```\n\n### Remove Underline\n```html\n<style>\na {\n  text-decoration: none; /* Removes underline */\n}\n</style>\n```\n\n### Change Link on Hover\n```html\n<style>\na:hover {\n  color: red; /* Change color when mouse hovers */\n  text-decoration: underline;\n}\n</style>\n```\n\n### Different States of Links\n```html\n<style>\na:link {\n  color: blue; /* Unvisited link */\n}\n\na:visited {\n  color: purple; /* Visited link */\n}\n\na:hover {\n  color: red; /* Hover effect */\n}\n\na:active {\n  color: green; /* Active link (when clicked) */\n}\n</style>\n```\n\n---\n\n## Creating Navigation Menus\n\n### Simple Horizontal Navigation Menu\n```html\n<nav>\n  <a href=\"#home\">Home</a>\n  <a href=\"#services\">Services</a>\n  <a href=\"#contact\">Contact</a>\n</nav>\n```\n```html\n<style>\nnav {\n  background-color: #333;\n  padding: 10px;\n}\n\nnav a {\n  color: white;\n  text-decoration: none;\n  margin: 0 15px;\n}\n\nnav a:hover {\n  text-decoration: underline;\n}\n</style>\n```\n\n### Vertical Navigation Menu (Using Lists)\n```html\n<nav>\n  <ul>\n    <li><a href=\"#home\">Home</a></li>\n    <li><a href=\"#services\">Services</a></li>\n    <li><a href=\"#contact\">Contact</a></li>\n  </ul>\n</nav>\n```\n```html\n<style>\nnav ul {\n  list-style-type: none;\n  padding: 0;\n}\n\nnav ul li {\n  margin: 10px 0;\n}\n\nnav ul li a {\n  text-decoration: none;\n  color: #333;\n}\n\nnav ul li a:hover {\n  color: #007BFF;\n}\n</style>\n```\n\n---\n\n## Summary\n- Use CSS to change link colors, remove underlines, and add hover effects.\n- Style links in different states: `:link`, `:visited`, `:hover`, `:active`.\n- Build simple or advanced navigation menus using `<nav>`, `<a>`, and lists.\n\n> **Next Step:** Learn how to add images to your webpage and style them effectively!\n",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-3-10",
                                "question": "Which pseudo-class targets visited links?",
                                "options": [":visited", ":hover", ":link"],
                                "correctAnswer": ":visited",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-3-11",
                                "question": "What does the :hover pseudo-class do?",
                                "options": ["Styles links when mouse is over", "Styles after click", "Styles while loading"],
                                "correctAnswer": "Styles links when mouse is over",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-3-12",
                                "question": "Which HTML element is commonly used to group navigation links?",
                                "options": ["<nav>", "<menu>", "<section>"],
                                "correctAnswer": "<nav>",
                                "userAnswer": ""
                            }
                        ]
                    }
                ],
                "assessment": {
                    "questions": [
                        {
                            "questionId": "assess-3-1",
                            "question": "Which tag is used for ordered lists?",
                            "options": ["<ol>", "<ul>", "<li>"],
                            "correctAnswer": "<ol>",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-3-2",
                            "question": "Which tag defines a definition term?",
                            "options": ["<dt>", "<dd>", "<dfn>"],
                            "correctAnswer": "<dt>",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-3-3",
                            "question": "What is the purpose of the <th> tag?",
                            "options": ["Table heading", "Table body", "Table border"],
                            "correctAnswer": "Table heading",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-3-4",
                            "question": "Which tag is used to group table rows?",
                            "options": ["<tbody>", "<group>", "<tablebody>"],
                            "correctAnswer": "<tbody>",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-3-5",
                            "question": "What is the use of the href attribute?",
                            "options": ["Specifies link destination", "Specifies font size", "Adds table border"],
                            "correctAnswer": "Specifies link destination",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-3-6",
                            "question": "Which tag is used to open a link in new tab?",
                            "options": ["<a target=\"_blank\">", "<a newtab>", "<link new>"],
                            "correctAnswer": "<a target=\"_blank\">",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-3-7",
                            "question": "Which tag should you use for navigation menus?",
                            "options": ["<nav>", "<menu>", "<section>"],
                            "correctAnswer": "<nav>",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-3-8",
                            "question": "What does :hover do in CSS?",
                            "options": ["Styles when mouse hovers", "Styles after click", "Applies to visited links"],
                            "correctAnswer": "Styles when mouse hovers",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-3-9",
                            "question": "What tag groups a definition list?",
                            "options": ["<dl>", "<list>", "<def>"],
                            "correctAnswer": "<dl>",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-3-10",
                            "question": "Which element defines a table in HTML?",
                            "options": ["<table>", "<grid>", "<chart>"],
                            "correctAnswer": "<table>",
                            "userAnswer": ""
                        }
                    ]
                }
            }
        ,
            {
                "chapterId": "ch-4",
                "title": "HTML Forms and Input Elements",
                "unlocked": false,
                "modules": [
                    {
                        "moduleId": "mod-4-1",
                        "title": "HTML Form Basics",
                        "content": "## Understand the Structure of HTML Forms and the Purpose of the `<form>` Tag\n\nForms are essential in HTML for collecting user input. The `<form>` tag defines the form area, and inside it, you place input fields, buttons, and labels.\n\n---\n\n## Purpose of the `<form>` Tag\n- The `<form>` tag creates a space where users can enter data.\n- When submitted, the data can be sent to a server for processing.\n\n### Basic Syntax\n```html\n<form action=\"/submit\" method=\"post\">\n  <!-- Form elements go here -->\n</form>\n```\n\n- **action**: URL where the form data is sent.\n- **method**: HTTP method (commonly `GET` or `POST`).\n\n---\n\n## Basic Form Structure Example\n```html\n<form action=\"/submit\" method=\"post\">\n  <label for=\"username\">Username:</label>\n  <input type=\"text\" id=\"username\" name=\"username\">\n\n  <label for=\"email\">Email:</label>\n  <input type=\"email\" id=\"email\" name=\"email\">\n\n  <input type=\"submit\" value=\"Submit\">\n</form>\n```\n\n### Explanation\n- `<label>`: Describes the purpose of each input field.\n- `<input>`: Takes user input. \n- `<input type=\"submit\">`: Button to submit the form.\n\n---\n\n## Common Input Types in Forms\n- **text**: Single-line text input.\n- **email**: Email address input (validates format).\n- **password**: Password field.\n- **checkbox**: For multiple choices.\n- **radio**: For selecting one option from multiple.\n- **submit**: Button to send form data.\n\n---\n\n## Form Submission Methods\n- **GET**: Appends data to the URL (visible).\n- **POST**: Sends data in the body of the HTTP request (more secure).\n\n### Example: Using GET Method\n```html\n<form action=\"/search\" method=\"get\">\n  <input type=\"text\" name=\"query\">\n  <input type=\"submit\" value=\"Search\">\n</form>\n```\n\n---\n\n## Summary\n- The `<form>` tag defines a section for collecting user inputs.\n- Use the `action` attribute to specify where data goes.\n- Use `method=\"get\"` for simple searches and `method=\"post\"` for sensitive data.\n- Forms include elements like `<input>`, `<label>`, and `<button>` for interaction.\n\n> **Next Step:** Learn about different input types and how to style your form for better user experience!\n",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-4-1",
                                "question": "Which tag is used to create an HTML form?",
                                "options": ["<form>", "<input>", "<fieldset>"],
                                "correctAnswer": "<form>",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-4-2",
                                "question": "What attribute specifies where to send form data?",
                                "options": ["action", "method", "submit"],
                                "correctAnswer": "action",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-4-3",
                                "question": "What does the method attribute define?",
                                "options": ["How form data is sent", "Input type", "Label styling"],
                                "correctAnswer": "How form data is sent",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-4-2",
                        "title": "Input Types and Attributes",
                        "content": "## Explore Different Input Types in HTML: text, password, checkbox, and radio\n\nHTML offers various input types to collect different kinds of data from users. Each type serves a specific purpose to improve user interaction.\n\n---\n\n## 1. Text Input\n- Collects single-line text from the user.\n- Commonly used for names, search queries, etc.\n\n```html\n<label for=\"username\">Username:</label>\n<input type=\"text\" id=\"username\" name=\"username\">\n```\n\n---\n\n## 2. Password Input\n- Masks the input to keep it private (like passwords).\n\n```html\n<label for=\"password\">Password:</label>\n<input type=\"password\" id=\"password\" name=\"password\">\n```\n\n- Characters appear as dots or asterisks.\n\n---\n\n## 3. Checkbox Input\n- Allows users to select one or more options.\n\n```html\n<label>\n  <input type=\"checkbox\" name=\"interests\" value=\"coding\"> Coding\n</label>\n<label>\n  <input type=\"checkbox\" name=\"interests\" value=\"music\"> Music\n</label>\n```\n\n- Users can select multiple checkboxes at once.\n\n---\n\n## 4. Radio Button Input\n- Lets users select **only one option** from a list.\n- Group radio buttons by giving them the same `name` attribute.\n\n```html\n<label>\n  <input type=\"radio\" name=\"gender\" value=\"male\"> Male\n</label>\n<label>\n  <input type=\"radio\" name=\"gender\" value=\"female\"> Female\n</label>\n<label>\n  <input type=\"radio\" name=\"gender\" value=\"other\"> Other\n</label>\n```\n\n- Only one radio button in the group can be selected at a time.\n\n---\n\n## Summary\n| Input Type | Purpose |\n|------------|----------|\n| `text` | Collect single-line text |\n| `password` | Collect hidden (masked) text |\n| `checkbox` | Allow multiple selections |\n| `radio` | Allow a single selection from a group |\n\n> **Tip:** Always use `<label>` elements for better accessibility!\n\n---\n\n## Next Step\nExplore additional input types like `email`, `number`, `date`, and `file` to handle even more user data!\n",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-4-4",
                                "question": "Which input type is used for entering passwords?",
                                "options": ["password", "text", "secure"],
                                "correctAnswer": "password",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-4-5",
                                "question": "What does the 'name' attribute do in an input field?",
                                "options": ["Identifies the input when submitting", "Gives placeholder text", "Sets font style"],
                                "correctAnswer": "Identifies the input when submitting",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-4-6",
                                "question": "Which input type is used for selecting one option among many?",
                                "options": ["radio", "checkbox", "select"],
                                "correctAnswer": "radio",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-4-3",
                        "title": "Form Labels and Grouping",
                        "content": "## Learn to Use `<label>`, `<fieldset>`, and `<legend>` for Better Form Accessibility\n\nImproving form accessibility makes it easier for all users, including those using assistive technologies, to interact with your website. Tags like `<label>`, `<fieldset>`, and `<legend>` help achieve this.\n\n---\n\n## 1. `<label>` Tag\n- Connects text descriptions to form controls.\n- Improves usability and accessibility.\n\n### Example:\n```html\n<label for=\"email\">Email Address:</label>\n<input type=\"email\" id=\"email\" name=\"email\">\n```\n\n- The `for` attribute in `<label>` matches the `id` of the input element.\n- Clicking the label focuses on the input field.\n\n---\n\n## 2. `<fieldset>` Tag\n- Groups related elements in a form.\n- Visually separates different sections and helps screen readers understand form structure.\n\n### Example:\n```html\n<fieldset>\n  <legend>Personal Information</legend>\n  <label for=\"fname\">First Name:</label>\n  <input type=\"text\" id=\"fname\" name=\"fname\">\n\n  <label for=\"lname\">Last Name:</label>\n  <input type=\"text\" id=\"lname\" name=\"lname\">\n</fieldset>\n```\n\n- `<fieldset>` creates a box around grouped form controls.\n\n---\n\n## 3. `<legend>` Tag\n- Provides a caption for the `<fieldset>`.\n- Helps users understand what the group of inputs is about.\n\n### Example (continued):\n```html\n<fieldset>\n  <legend>Account Details</legend>\n  <label for=\"username\">Username:</label>\n  <input type=\"text\" id=\"username\" name=\"username\">\n\n  <label for=\"password\">Password:</label>\n  <input type=\"password\" id=\"password\" name=\"password\">\n</fieldset>\n```\n\n- `<legend>` should be used right after the opening `<fieldset>` tag.\n\n---\n\n## Benefits of Using These Tags\n- **Better accessibility:** Screen readers can navigate forms more effectively.\n- **Improved usability:** Clicking labels focuses inputs.\n- **Clear form structure:** Users understand sections easily.\n\n---\n\n## Next Step\nLearn how to style forms and validate input for an even better user experience!\n",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-4-7",
                                "question": "Which tag is used to label an input field?",
                                "options": ["<label>", "<tag>", "<name>"],
                                "correctAnswer": "<label>",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-4-8",
                                "question": "What tag groups form elements together?",
                                "options": ["<fieldset>", "<group>", "<section>"],
                                "correctAnswer": "<fieldset>",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-4-9",
                                "question": "Which tag is used to define a caption for a group of form elements?",
                                "options": ["<legend>", "<label>", "<title>"],
                                "correctAnswer": "<legend>",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-4-4",
                        "title": "Buttons and Form Controls",
                        "content": "## Learn About Submit, Reset, and Custom Buttons in Forms\n\nButtons in forms are essential for performing actions like submitting data, clearing inputs, or triggering custom behaviors. Let’s explore the three main types:\n\n---\n\n## 1. **Submit Button**\n- Sends form data to the server or specified action URL.\n- Defined using `<button type=\"submit\">` or `<input type=\"submit\">`.\n\n### Example:\n```html\n<form action=\"/submit\" method=\"post\">\n  <label for=\"username\">Username:</label>\n  <input type=\"text\" id=\"username\" name=\"username\">\n  \n  <button type=\"submit\">Submit</button>\n</form>\n```\n\n- When clicked, the form is submitted to the URL specified in the `action` attribute.\n\n---\n\n## 2. **Reset Button**\n- Clears all the form fields and resets them to their default values.\n- Defined using `<button type=\"reset\">` or `<input type=\"reset\">`.\n\n### Example:\n```html\n<form>\n  <label for=\"email\">Email:</label>\n  <input type=\"email\" id=\"email\" name=\"email\">\n\n  <button type=\"reset\">Reset Form</button>\n</form>\n```\n\n- Useful when you want to give users the option to clear all inputs quickly.\n\n---\n\n## 3. **Custom Button**\n- Performs actions using JavaScript.\n- Defined with `<button type=\"button\">`.\n- Does **not** submit or reset the form by default.\n\n### Example:\n```html\n<form>\n  <label for=\"name\">Name:</label>\n  <input type=\"text\" id=\"name\" name=\"name\">\n\n  <button type=\"button\" onclick=\"alert('Hello, ' + document.getElementById('name').value + '!')\">\n    Greet User\n  </button>\n</form>\n```\n\n- Custom buttons are perfect for validating forms, showing messages, or performing other actions before submission.\n\n---\n\n## Summary\n| Button Type  | Purpose                                   |\n|-------------|-------------------------------------------|\n| Submit      | Sends form data to the server             |\n| Reset       | Clears all form fields                    |\n| Custom      | Executes custom scripts (JavaScript)       |\n\n---\n\n## Next Step\nYou can enhance buttons by styling them with CSS and adding more interactivity using JavaScript!\n",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-4-10",
                                "question": "Which input type is used to submit a form?",
                                "options": ["submit", "send", "button"],
                                "correctAnswer": "submit",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-4-11",
                                "question": "What does a reset button do?",
                                "options": ["Clears form fields", "Submits form", "Validates form"],
                                "correctAnswer": "Clears form fields",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-4-12",
                                "question": "Which tag can create a button with custom behavior?",
                                "options": ["<button>", "<input>", "<custom-button>"],
                                "correctAnswer": "<button>",
                                "userAnswer": ""
                            }
                        ]
                    }
                ],
                "assessment": {
                    "questions": [
                        {
                            "questionId": "assess-4-1",
                            "question": "What attribute specifies how form data is sent?",
                            "options": ["method", "send", "format"],
                            "correctAnswer": "method",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-4-2",
                            "question": "Which input type allows users to select multiple options?",
                            "options": ["checkbox", "radio", "select"],
                            "correctAnswer": "checkbox",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-4-3",
                            "question": "What is the correct tag to add a form button?",
                            "options": ["<button>", "<input type='button'>", "Both"],
                            "correctAnswer": "Both",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-4-4",
                            "question": "Which attribute should be used to ensure a field must be filled before submission?",
                            "options": ["required", "mandatory", "validate"],
                            "correctAnswer": "required",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-4-5",
                            "question": "What tag is used to group form fields semantically?",
                            "options": ["<fieldset>", "<group>", "<section>"],
                            "correctAnswer": "<fieldset>",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-4-6",
                            "question": "Which element provides a label for a group of form controls?",
                            "options": ["<legend>", "<label>", "<caption>"],
                            "correctAnswer": "<legend>",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-4-7",
                            "question": "How is the submit action defined in an HTML form?",
                            "options": ["<input type='submit'>", "<form submit>", "<submit>"],
                            "correctAnswer": "<input type='submit'>",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-4-8",
                            "question": "Which input type is typically used for collecting email addresses?",
                            "options": ["email", "text", "mail"],
                            "correctAnswer": "email",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-4-9",
                            "question": "Which tag is used to create a multi-line text input?",
                            "options": ["<textarea>", "<input type='text-area'>", "<textinput>"],
                            "correctAnswer": "<textarea>",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-4-10",
                            "question": "Which form attribute disables autocomplete?",
                            "options": ["autocomplete='off'", "autofill='false'", "disable='true'"],
                            "correctAnswer": "autocomplete='off'",
                            "userAnswer": ""
                        }
                    ]
                }
            }
        ,
            {
                "chapterId": "ch-5",
                "title": "HTML5 Semantic Elements",
                "unlocked": false,
                "modules": [
                    {
                        "moduleId": "mod-5-1",
                        "title": "Introduction to Semantic Elements",
                        "content": "## Understand What Semantic HTML Is and Why It Is Important\n\nSemantic HTML refers to the use of HTML tags that convey the meaning and structure of the content clearly. These tags describe **what the content is**, not just how it looks.\n\n---\n\n## What is Semantic HTML?\nSemantic HTML uses meaningful tags to give context to the web page content. Examples of semantic tags include:\n\n- `<header>`: Represents the header section of a page or section.\n- `<nav>`: Defines a navigation area.\n- `<main>`: Represents the main content of the document.\n- `<section>`: Groups related content together.\n- `<article>`: Represents a standalone piece of content.\n- `<aside>`: Contains content related to the main content (like sidebars).\n- `<footer>`: Defines the footer for a section or page.\n\n### Example:\n```html\n<header>\n  <h1>My Blog</h1>\n</header>\n\n<nav>\n  <a href=\"/home\">Home</a>\n  <a href=\"/about\">About</a>\n</nav>\n\n<main>\n  <article>\n    <h2>Post Title</h2>\n    <p>This is the content of the blog post.</p>\n  </article>\n</main>\n\n<footer>\n  <p>© 2025 My Blog</p>\n</footer>\n```\n\n---\n\n## Why Is Semantic HTML Important?\n\n1. **Improves Accessibility**\n   - Screen readers and assistive technologies can better interpret the page structure.\n   - Helps users with disabilities navigate the content easily.\n\n2. **Enhances SEO (Search Engine Optimization)**\n   - Search engines understand the content better and rank pages more accurately.\n\n3. **Better Code Readability**\n   - Makes your HTML easier to read and maintain for developers.\n\n4. **Consistent Structure**\n   - Provides a clear and logical layout of the webpage.\n\n---\n\n## Summary\nSemantic HTML is about writing HTML in a way that describes the meaning of the content. It makes your web pages more accessible, improves SEO, and helps both developers and browsers understand the content better.\n\n**Tip:** Always choose a semantic tag over a non-semantic one when possible!\n",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-5-1",
                                "question": "What does semantic HTML mean?",
                                "options": ["HTML with meaning", "HTML with styling", "HTML with JavaScript"],
                                "correctAnswer": "HTML with meaning",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-5-2",
                                "question": "Which of the following is a semantic tag?",
                                "options": ["<div>", "<span>", "<article>"],
                                "correctAnswer": "<article>",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-5-3",
                                "question": "What is the purpose of using semantic elements?",
                                "options": [
                                    "For better SEO and accessibility",
                                    "To style the webpage",
                                    "To add scripts"
                                ],
                                "correctAnswer": "For better SEO and accessibility",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-5-2",
                        "title": "Common Semantic Elements",
                        "content": "## Explore Commonly Used Semantic Elements in HTML5\n\nHTML5 introduced several semantic elements to provide a clear structure and meaning to web content. These elements help both developers and browsers understand the content more effectively.\n\n---\n\n## 1. `<header>` Tag\n- Represents the introductory content of a page or a section.\n- Often contains logos, navigation links, and introductory content.\n\n### Example:\n```html\n<header>\n  <h1>Welcome to My Website</h1>\n  <nav>\n    <a href=\"#home\">Home</a>\n    <a href=\"#about\">About</a>\n  </nav>\n</header>\n```\n\n---\n\n## 2. `<nav>` Tag\n- Defines a navigation section for links.\n- Helps search engines and screen readers to identify navigation areas.\n\n### Example:\n```html\n<nav>\n  <ul>\n    <li><a href=\"#home\">Home</a></li>\n    <li><a href=\"#services\">Services</a></li>\n    <li><a href=\"#contact\">Contact</a></li>\n  </ul>\n</nav>\n```\n\n---\n\n## 3. `<main>` Tag\n- Represents the dominant content of the document.\n- It should only be used once per page, containing unique content that isn't duplicated elsewhere.\n\n### Example:\n```html\n<main>\n  <h2>About Us</h2>\n  <p>This section contains information about our company.</p>\n</main>\n```\n\n---\n\n## 4. `<section>` Tag\n- Groups related content together within a page.\n- Can be used for distinct sections such as a blog post or a product description.\n\n### Example:\n```html\n<section>\n  <h2>Our Services</h2>\n  <p>We offer web development, design, and marketing services.</p>\n</section>\n```\n\n---\n\n## 5. `<article>` Tag\n- Represents a self-contained piece of content that could be distributed independently.\n- Ideal for blog posts, news articles, or any content that stands alone.\n\n### Example:\n```html\n<article>\n  <h2>How to Learn Web Development</h2>\n  <p>This is an informative article about starting with web development.</p>\n</article>\n```\n\n---\n\n## 6. `<aside>` Tag\n- Defines content that is tangentially related to the content around it.\n- Often used for sidebars, quotes, or supplementary information.\n\n### Example:\n```html\n<aside>\n  <h3>Related Posts</h3>\n  <ul>\n    <li><a href=\"#post1\">Introduction to HTML</a></li>\n    <li><a href=\"#post2\">CSS Basics</a></li>\n  </ul>\n</aside>\n```\n\n---\n\n## 7. `<footer>` Tag\n- Represents the footer section of a page or section.\n- Typically contains copyright information, contact details, or additional navigation.\n\n### Example:\n```html\n<footer>\n  <p>© 2025 My Company. All Rights Reserved.</p>\n  <a href=\"#privacy-policy\">Privacy Policy</a>\n</footer>\n```\n\n---\n\n## Summary\nSemantic HTML5 elements help structure the content meaningfully. These elements include:\n\n- `<header>`: Introductory content and navigation\n- `<nav>`: Navigation links\n- `<main>`: Main content of the page\n- `<section>`: A group of related content\n- `<article>`: Independent, self-contained content\n- `<aside>`: Tangential content, such as sidebars\n- `<footer>`: Footer with legal and contact information\n\nUsing these tags makes your website more accessible, easier to maintain, and better understood by search engines.\n",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-5-4",
                                "question": "Which tag is used for navigation links?",
                                "options": ["<nav>", "<section>", "<aside>"],
                                "correctAnswer": "<nav>",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-5-5",
                                "question": "Which tag defines content aside from the main content?",
                                "options": ["<aside>", "<header>", "<footer>"],
                                "correctAnswer": "<aside>",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-5-6",
                                "question": "Which tag defines the main content of a document?",
                                "options": ["<main>", "<body>", "<article>"],
                                "correctAnswer": "<main>",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-5-3",
                        "title": "Structure Using Semantic Elements",
                        "content": "## Learn How to Create a Well-Structured Layout Using Semantic Tags\n\nUsing semantic tags in HTML allows you to create a clear and logical structure for your webpage. These tags provide meaning to your content and improve accessibility, search engine optimization (SEO), and maintainability of your code.\n\n---\n\n## 1. Basic Structure of a Well-Structured Webpage\nA well-structured webpage using semantic tags might include a header, main content, a sidebar, and a footer. Here's a basic example:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Semantic Layout</title>\n</head>\n<body>\n\n  <header>\n    <h1>Welcome to My Website</h1>\n    <nav>\n      <a href=\"#home\">Home</a> |\n      <a href=\"#about\">About</a> |\n      <a href=\"#contact\">Contact</a>\n    </nav>\n  </header>\n\n  <main>\n    <section>\n      <h2>Introduction</h2>\n      <p>This section contains an overview of the website.</p>\n    </section>\n\n    <section>\n      <h2>Blog</h2>\n      <article>\n        <h3>My First Blog Post</h3>\n        <p>This is the content of the blog post.</p>\n      </article>\n    </section>\n\n    <aside>\n      <h3>Related Posts</h3>\n      <ul>\n        <li><a href=\"#\">HTML5 Tutorial</a></li>\n        <li><a href=\"#\">CSS Layouts</a></li>\n      </ul>\n    </aside>\n  </main>\n\n  <footer>\n    <p>© 2025 My Website. All Rights Reserved.</p>\n  </footer>\n\n</body>\n</html>\n```\n\n---\n\n## 2. Using `<header>` for Website Header\nThe `<header>` tag is used to define the introductory part of a webpage. This often includes the website’s logo, navigation links, and introductory text.\n\nExample:\n```html\n<header>\n  <h1>My Website</h1>\n  <nav>\n    <a href=\"#home\">Home</a>\n    <a href=\"#about\">About</a>\n    <a href=\"#services\">Services</a>\n  </nav>\n</header>\n```\n\n---\n\n## 3. Organizing Content with `<main>`\nThe `<main>` tag is used to encapsulate the primary content of the page. This helps search engines and screen readers understand where the most important content resides.\n\nExample:\n```html\n<main>\n  <section>\n    <h2>About Us</h2>\n    <p>Learn more about what we do and who we are.</p>\n  </section>\n\n  <section>\n    <h2>Our Services</h2>\n    <p>Discover our various services tailored for you.</p>\n  </section>\n</main>\n```\n\n---\n\n## 4. Creating Grouped Content with `<section>`\nThe `<section>` tag is used to group related content together. This helps in organizing the content logically into distinct sections.\n\nExample:\n```html\n<section>\n  <h2>Our Mission</h2>\n  <p>We aim to provide the best quality service.</p>\n</section>\n```\n\n---\n\n## 5. Structuring Articles with `<article>`\nUse the `<article>` tag to represent standalone content, such as blog posts, news articles, or tutorials. Each article can be distributed or syndicated independently.\n\nExample:\n```html\n<article>\n  <h3>How to Build a Website</h3>\n  <p>Follow these steps to create your own website from scratch.</p>\n</article>\n```\n\n---\n\n## 6. Adding Tangential Content with `<aside>`\nThe `<aside>` tag is used for content that is related to the main content but not central to it. Typically, it's used for sidebars or additional info like quotes or related links.\n\nExample:\n```html\n<aside>\n  <h3>Related Resources</h3>\n  <ul>\n    <li><a href=\"#\">CSS Basics</a></li>\n    <li><a href=\"#\">JavaScript Fundamentals</a></li>\n  </ul>\n</aside>\n```\n\n---\n\n## 7. Defining Footer with `<footer>`\nThe `<footer>` tag defines the footer content of a page, usually containing copyright information, contact links, or legal notices.\n\nExample:\n```html\n<footer>\n  <p>© 2025 My Website. All Rights Reserved.</p>\n  <p>Contact us at <a href=\"mailto:info@mywebsite.com\">info@mywebsite.com</a></p>\n</footer>\n```\n\n---\n\n## 8. Conclusion\nUsing semantic tags allows you to structure your content in a meaningful way. A typical well-structured webpage might include:\n- `<header>` for introductory content\n- `<main>` for the primary content of the page\n- `<section>` and `<article>` to group related content\n- `<aside>` for sidebars and related information\n- `<footer>` for footer content like copyright and contact info\n\nSemantic HTML not only improves SEO and accessibility but also makes your code more maintainable and easier for other developers to understand.",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-5-7",
                                "question": "Which tag is used for introductory content at the top of a page?",
                                "options": ["<header>", "<top>", "<nav>"],
                                "correctAnswer": "<header>",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-5-8",
                                "question": "Which tag is typically used for footer content?",
                                "options": ["<footer>", "<bottom>", "<aside>"],
                                "correctAnswer": "<footer>",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-5-9",
                                "question": "Which tag is appropriate for self-contained content?",
                                "options": ["<article>", "<div>", "<section>"],
                                "correctAnswer": "<article>",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-5-4",
                        "title": "Benefits and Best Practices",
                        "content": "## Understand the Benefits of Semantic HTML and How to Use It Effectively\n\nSemantic HTML refers to using HTML tags that have meaning, making the content of a webpage easier to understand for both humans and machines. Using semantic tags helps to improve accessibility, SEO, and overall web structure.\n\n---\n\n## 1. What is Semantic HTML?\nSemantic HTML uses tags that convey the meaning of the content within them. These tags help to describe the structure of the document and the relationships between different parts of content. This is in contrast to non-semantic tags like `<div>` and `<span>`, which only group elements without indicating their purpose.\n\n---\n\n## 2. Key Benefits of Using Semantic HTML\n### a. Improved Accessibility\nSemantic tags make it easier for screen readers and other assistive technologies to understand and navigate the content. This is essential for users with disabilities, such as those who are blind or have low vision.\n\nExample:\n```html\n<header>\n  <h1>My Accessible Website</h1>\n  <nav>\n    <a href=\"#home\">Home</a>\n    <a href=\"#about\">About</a>\n    <a href=\"#contact\">Contact</a>\n  </nav>\n</header>\n```\n\n### b. Better SEO (Search Engine Optimization)\nSearch engines like Google use semantic HTML tags to better understand the content of a webpage. Proper use of tags like `<article>`, `<section>`, `<header>`, and `<footer>` improves the page’s search engine ranking.\n\nExample:\n```html\n<article>\n  <h2>Understanding HTML</h2>\n  <p>HTML stands for Hypertext Markup Language...</p>\n</article>\n```\n\n### c. Enhanced Code Readability and Maintainability\nUsing semantic HTML makes your code more readable and easier to maintain. Developers can quickly understand the structure and purpose of the content without needing extensive comments or documentation.\n\nExample:\n```html\n<section>\n  <h2>Our Services</h2>\n  <p>Learn more about the services we offer.</p>\n</section>\n```\n\n### d. Clearer Structure for Developers\nWith semantic HTML, the page structure is defined clearly, which helps both current and future developers understand the layout and structure. This reduces the complexity of the code and allows for faster development.\n\nExample:\n```html\n<main>\n  <section>\n    <h2>Latest News</h2>\n    <p>Read the latest updates about our company.</p>\n  </section>\n</main>\n```\n\n---\n\n## 3. Commonly Used Semantic HTML Tags\nHere are some of the most commonly used semantic tags:\n\n- `<header>`: Represents the introductory content or navigation for the page.\n- `<footer>`: Contains footer content like copyright or contact information.\n- `<main>`: Represents the main content of the document.\n- `<section>`: Defines sections of content within the page.\n- `<article>`: Represents independent content that can be distributed or reused.\n- `<aside>`: Represents content tangentially related to the main content.\n- `<nav>`: Represents navigation links.\n\nExample of using these tags:\n```html\n<header>\n  <h1>Welcome to My Website</h1>\n  <nav>\n    <a href=\"#home\">Home</a>\n    <a href=\"#about\">About</a>\n    <a href=\"#contact\">Contact</a>\n  </nav>\n</header>\n\n<main>\n  <section>\n    <h2>Our Services</h2>\n    <p>Learn more about what we offer.</p>\n  </section>\n</main>\n\n<footer>\n  <p>&copy; 2025 My Website</p>\n</footer>\n```\n\n---\n\n## 4. How to Use Semantic HTML Effectively\n- **Choose the right tag for the content**: Use tags like `<article>` for blog posts, `<section>` for groupings of content, and `<footer>` for footer information.\n- **Use tags in a hierarchical structure**: Properly nesting semantic elements creates a clear and logical document structure.\n- **Keep the page layout simple**: Avoid overcomplicating the structure by using too many tags. Use only those that make sense for the content.\n\n---\n\n## 5. Conclusion\nSemantic HTML offers several benefits, including improved accessibility, better SEO, easier maintenance, and clearer code structure. By using tags that describe the content’s meaning, you help make your website more accessible, user-friendly, and optimized for search engines.\n\n### Key Takeaways:\n- Always use semantic tags when possible.\n- Tags like `<header>`, `<article>`, and `<footer>` help structure the page effectively.\n- Semantic HTML enhances both the user and developer experience, improving web accessibility and SEO.",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-5-10",
                                "question": "What is one benefit of semantic HTML?",
                                "options": [
                                    "Improved styling",
                                    "Improved accessibility",
                                    "More JavaScript functionality"
                                ],
                                "correctAnswer": "Improved accessibility",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-5-11",
                                "question": "Semantic HTML is helpful for which group of users?",
                                "options": [
                                    "Developers only",
                                    "Search engines and screen readers",
                                    "Designers only"
                                ],
                                "correctAnswer": "Search engines and screen readers",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-5-12",
                                "question": "Which is NOT a semantic HTML tag?",
                                "options": ["<div>", "<main>", "<article>"],
                                "correctAnswer": "<div>",
                                "userAnswer": ""
                            }
                        ]
                    }
                ],
                "assessment": {
                    "questions": [
                        {
                            "questionId": "assess-5-1",
                            "question": "What does semantic HTML refer to?",
                            "options": [
                                "HTML with better styling",
                                "HTML that uses meaningful tags",
                                "HTML used only for scripting"
                            ],
                            "correctAnswer": "HTML that uses meaningful tags",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-5-2",
                            "question": "Which of these is a semantic element?",
                            "options": ["<article>", "<span>", "<div>"],
                            "correctAnswer": "<article>",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-5-3",
                            "question": "Which tag is used to define a page footer?",
                            "options": ["<footer>", "<bottom>", "<aside>"],
                            "correctAnswer": "<footer>",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-5-4",
                            "question": "Which tag is used for navigation menus?",
                            "options": ["<nav>", "<menu>", "<ul>"],
                            "correctAnswer": "<nav>",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-5-5",
                            "question": "What does the <main> tag represent?",
                            "options": [
                                "Navigation section",
                                "Sidebar content",
                                "Main content of the document"
                            ],
                            "correctAnswer": "Main content of the document",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-5-6",
                            "question": "Which semantic tag is used for standalone content?",
                            "options": ["<article>", "<div>", "<span>"],
                            "correctAnswer": "<article>",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-5-7",
                            "question": "Which tag is used for additional, tangential content?",
                            "options": ["<aside>", "<section>", "<footer>"],
                            "correctAnswer": "<aside>",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-5-8",
                            "question": "Why is semantic HTML important for SEO?",
                            "options": [
                                "It reduces file size",
                                "It adds metadata automatically",
                                "It helps search engines understand content"
                            ],
                            "correctAnswer": "It helps search engines understand content",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-5-9",
                            "question": "Which tag provides structure but is not semantic?",
                            "options": ["<div>", "<article>", "<nav>"],
                            "correctAnswer": "<div>",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-5-10",
                            "question": "Which tag defines content grouped under a heading?",
                            "options": ["<section>", "<article>", "<aside>"],
                            "correctAnswer": "<section>",
                            "userAnswer": ""
                        }
                    ]
                }
            }
        ,
            {
                "chapterId": "ch-6",
                "title": "Forms and Input",
                "unlocked": false,
                "modules": [
                    {
                        "moduleId": "mod-6-1",
                        "title": "HTML Forms",
                        "content": "## Understand the Basics of Creating Forms in HTML\n\nForms are essential in HTML for gathering user input, such as text, selections, or file uploads. The `<form>` tag is used to define the form, and input elements are used to collect data from users.\n\n---\n\n## 1. The `<form>` Tag\nThe `<form>` element is used to wrap all the input fields and controls required for data submission. It can also specify where the form data should be sent and how it should be submitted.\n\nExample:\n```html\n<form action=\"/submit_form\" method=\"post\">\n  <!-- form elements here -->\n</form>\n```\n- **action**: Specifies the URL where the form data will be sent.\n- **method**: Defines how the form data is sent (either `GET` or `POST`). `POST` is commonly used for submitting sensitive information.\n\n---\n\n## 2. Form Elements\n### a. Input Fields\nThe `<input>` tag is used for various types of user input, including text, passwords, checkboxes, and more.\n\nExample:\n```html\n<input type=\"text\" name=\"username\" placeholder=\"Enter your username\">\n<input type=\"password\" name=\"password\" placeholder=\"Enter your password\">\n<input type=\"submit\" value=\"Submit\">\n```\n- **type**: Specifies the kind of input (e.g., `text`, `password`, `submit`).\n- **name**: Identifies the input element (used to send the value of the input in the form data).\n- **value**: Specifies the initial value of the input or button.\n\n### b. Textarea\nThe `<textarea>` tag is used for multi-line text input.\n\nExample:\n```html\n<textarea name=\"message\" rows=\"4\" cols=\"50\" placeholder=\"Enter your message\"></textarea>\n```\n- **rows**: Specifies the number of visible text lines.\n- **cols**: Specifies the width of the text area in characters.\n\n### c. Select Dropdown\nThe `<select>` and `<option>` tags create dropdown menus.\n\nExample:\n```html\n<select name=\"country\">\n  <option value=\"us\">United States</option>\n  <option value=\"ca\">Canada</option>\n  <option value=\"uk\">United Kingdom</option>\n</select>\n```\n\n### d. Radio Buttons\nRadio buttons allow users to choose only one option from a group.\n\nExample:\n```html\n<input type=\"radio\" name=\"gender\" value=\"male\"> Male\n<input type=\"radio\" name=\"gender\" value=\"female\"> Female\n```\n\n### e. Checkboxes\nCheckboxes allow users to select one or more options.\n\nExample:\n```html\n<input type=\"checkbox\" name=\"newsletter\" value=\"subscribe\"> Subscribe to newsletter\n```\n\n---\n\n## 3. Form Submission\nForms are typically submitted by clicking a button of type `submit`. The form data is then sent to the server according to the action and method specified in the `<form>` tag.\n\nExample of a submit button:\n```html\n<input type=\"submit\" value=\"Submit\">\n```\n\n---\n\n## 4. Form Validation\nForm elements can be validated using HTML5 attributes such as `required`, `minlength`, `maxlength`, and `pattern` to ensure the user provides valid data before submission.\n\nExample:\n```html\n<input type=\"email\" name=\"email\" required placeholder=\"Enter your email\">\n<input type=\"number\" name=\"age\" min=\"18\" max=\"99\" required>\n```\n- **required**: Ensures the field is not left empty.\n- **min** and **max**: Restrict input to a certain range.\n- **pattern**: Defines a regular expression for input validation.\n\n---\n\n## 5. Conclusion\nCreating forms in HTML involves using the `<form>` tag to define the form and various input elements like `<input>`, `<textarea>`, `<select>`, and `<button>` to gather user input. By using form attributes and validation techniques, you can create interactive and user-friendly web forms.\n\n### Key Takeaways:\n- Use the `<form>` tag to wrap form elements.\n- Different input types allow you to collect various kinds of data.\n- Form validation helps ensure user data is accurate and complete.",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-6-1",
                                "question": "Which tag is used to create an HTML form?",
                                "options": ["<form>", "<input>", "<label>"],
                                "correctAnswer": "<form>",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-6-2",
                                "question": "What attribute of <form> specifies the URL to send form data?",
                                "options": ["action", "method", "target"],
                                "correctAnswer": "action",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-6-3",
                                "question": "Which method is more secure for submitting sensitive data?",
                                "options": ["GET", "POST", "SEND"],
                                "correctAnswer": "POST",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-6-2",
                        "title": "Input Types and Attributes",
                        "content": "## Explore Various Input Types and Their Attributes\n\nHTML forms include different input types to gather data from users. Each type has specific attributes that define the kind of input the user can provide. Understanding these input types and their attributes will help create more dynamic and functional forms.\n\n---\n\n## 1. Text Input (`<input type=\"text\">`)\nThe most basic type of input, used for single-line text entries.\n\nExample:\n```html\n<input type=\"text\" name=\"username\" placeholder=\"Enter your username\">\n```\n- **placeholder**: Displays placeholder text inside the input field.\n- **name**: Identifies the input for form submission.\n- **maxlength**: Specifies the maximum number of characters the user can enter.\n\n---\n\n## 2. Password Input (`<input type=\"password\">`)\nUsed for password fields where the input is obscured.\n\nExample:\n```html\n<input type=\"password\" name=\"password\" placeholder=\"Enter your password\">\n```\n- **placeholder**: Displays placeholder text.\n- **required**: Makes the field mandatory for submission.\n- **minlength**: Ensures the password has a minimum length.\n\n---\n\n## 3. Email Input (`<input type=\"email\">`)\nUsed for collecting email addresses. The input is validated for a proper email format.\n\nExample:\n```html\n<input type=\"email\" name=\"email\" placeholder=\"Enter your email\">\n```\n- **pattern**: Can define a regular expression to match a specific email format.\n- **required**: Ensures the email field is not left empty.\n- **multiple**: Allows multiple email addresses separated by commas.\n\n---\n\n## 4. Number Input (`<input type=\"number\">`)\nAllows the user to input numeric values and provides additional controls for number entry.\n\nExample:\n```html\n<input type=\"number\" name=\"age\" min=\"18\" max=\"99\" placeholder=\"Enter your age\">\n```\n- **min**: Specifies the minimum value.\n- **max**: Specifies the maximum value.\n- **step**: Defines the increment (e.g., `step=\"0.5\"` for decimals).\n- **required**: Makes the field mandatory.\n\n---\n\n## 5. Checkbox Input (`<input type=\"checkbox\">`)\nUsed for binary choices where the user can either select or deselect the option.\n\nExample:\n```html\n<input type=\"checkbox\" name=\"newsletter\" value=\"subscribe\"> Subscribe to newsletter\n```\n- **checked**: Preselects the checkbox by default.\n- **required**: Makes the checkbox mandatory.\n\n---\n\n## 6. Radio Button (`<input type=\"radio\">`)\nAllows the user to select only one option from a group of options.\n\nExample:\n```html\n<input type=\"radio\" name=\"gender\" value=\"male\"> Male\n<input type=\"radio\" name=\"gender\" value=\"female\"> Female\n```\n- **checked**: Preselects one radio button.\n- **name**: Groups radio buttons so only one option can be selected at a time.\n\n---\n\n## 7. File Input (`<input type=\"file\">`)\nLets the user upload files from their device.\n\nExample:\n```html\n<input type=\"file\" name=\"profile_picture\">\n```\n- **accept**: Specifies the types of files the user can select (e.g., `accept=\"image/*\"` for images).\n- **multiple**: Allows multiple files to be selected.\n\n---\n\n## 8. Date Input (`<input type=\"date\">`)\nUsed to let the user select a date from a date picker.\n\nExample:\n```html\n<input type=\"date\" name=\"birthdate\">\n```\n- **min**: Specifies the earliest selectable date.\n- **max**: Specifies the latest selectable date.\n- **required**: Makes the field mandatory.\n\n---\n\n## 9. Time Input (`<input type=\"time\">`)\nAllows the user to select a time.\n\nExample:\n```html\n<input type=\"time\" name=\"meeting_time\">\n```\n- **min**: Specifies the earliest time.\n- **max**: Specifies the latest time.\n\n---\n\n## 10. URL Input (`<input type=\"url\">`)\nCollects a valid URL and validates the input as a web address.\n\nExample:\n```html\n<input type=\"url\" name=\"website\" placeholder=\"Enter your website URL\">\n```\n- **pattern**: Defines a regular expression to further restrict the URL format.\n- **required**: Ensures the URL field is filled.\n\n---\n\n## 11. Range Input (`<input type=\"range\">`)\nAllows the user to select a value within a specified range using a slider.\n\nExample:\n```html\n<input type=\"range\" name=\"volume\" min=\"0\" max=\"100\" step=\"1\">\n```\n- **min**: Sets the minimum value of the range.\n- **max**: Sets the maximum value.\n- **step**: Defines the increment step.\n\n---\n\n## 12. Submit Button (`<input type=\"submit\">`)\nSends the form data to the server for processing.\n\nExample:\n```html\n<input type=\"submit\" value=\"Submit\">\n```\n- **value**: Specifies the text on the button.\n- **disabled**: Disables the button.\n\n---\n\n## 13. Reset Button (`<input type=\"reset\">`)\nResets all form fields to their default values.\n\nExample:\n```html\n<input type=\"reset\" value=\"Reset\">\n```\n\n---\n\n## Conclusion\nHTML input types provide a range of elements to handle different kinds of data collection. Understanding the attributes of these input types helps in creating user-friendly and effective forms for your web applications. Key input types include text, password, number, radio, checkbox, and file, each serving a specific purpose based on the type of data being collected.\n\n### Key Takeaways:\n- HTML forms include various input types for different kinds of data.\n- Input types are customizable with attributes like `min`, `max`, `required`, `placeholder`, and `pattern`.\n- Choose the correct input type for better user experience and data validation.",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-6-4",
                                "question": "Which input type is used for password fields?",
                                "options": ["text", "password", "secure"],
                                "correctAnswer": "password",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-6-5",
                                "question": "What input type is used to create a checkbox?",
                                "options": ["text", "checkbox", "select"],
                                "correctAnswer": "checkbox",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-6-6",
                                "question": "Which attribute makes a form field mandatory?",
                                "options": ["required", "readonly", "disabled"],
                                "correctAnswer": "required",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-6-3",
                        "title": "Form Validation",
                        "content": "## Learn About Built-In HTML Validation Features\n\nHTML provides built-in form validation features that allow you to ensure the data entered by users is accurate and complete. These features can be used without needing JavaScript, making it easier to create forms with validation rules.\n\n---\n\n## 1. Required Fields (`required` attribute)\nThe `required` attribute is used to make an input field mandatory. The form cannot be submitted unless the field has a value.\n\nExample:\n```html\n<input type=\"text\" name=\"username\" required placeholder=\"Enter your username\">\n```\n- If the user attempts to submit the form without filling out this field, the browser will display an error message prompting the user to fill out the required field.\n\n---\n\n## 2. Pattern Matching (`pattern` attribute)\nThe `pattern` attribute allows you to define a regular expression for validating the input value. It ensures that the input matches a specific format, such as an email address or phone number.\n\nExample:\n```html\n<input type=\"text\" name=\"phone\" pattern=\"[0-9]{3}-[0-9]{3}-[0-9]{4}\" placeholder=\"Enter phone number (XXX-XXX-XXXX)\" required>\n```\n- If the user enters a value that doesn't match the pattern, the browser will prevent the form submission and display an error message.\n\n---\n\n## 3. Email Validation (`type=\"email\"`)\nWhen the `type=\"email\"` is used, the browser will validate that the input follows the proper email format (e.g., `username@example.com`).\n\nExample:\n```html\n<input type=\"email\" name=\"email\" required placeholder=\"Enter your email\">\n```\n- The browser will automatically check if the entered email is in a valid format.\n- The form will not be submitted until a valid email address is provided.\n\n---\n\n## 4. Number Validation (`type=\"number\"`)\nThe `type=\"number\"` attribute ensures that only numeric input is allowed. Additionally, you can specify constraints like minimum and maximum values using `min` and `max` attributes.\n\nExample:\n```html\n<input type=\"number\" name=\"age\" min=\"18\" max=\"100\" required>\n```\n- This input will only accept numbers between 18 and 100.\n- If the user enters a value outside this range, an error message will appear.\n\n---\n\n## 5. Minimum and Maximum Length (`minlength` and `maxlength` attributes)\nThe `minlength` and `maxlength` attributes define the minimum and maximum number of characters allowed in a text input.\n\nExample:\n```html\n<input type=\"text\" name=\"password\" minlength=\"8\" maxlength=\"16\" required placeholder=\"Enter password\">\n```\n- The password field must have at least 8 characters and no more than 16 characters.\n- If the user doesn't meet the length requirements, the form won't be submitted.\n\n---\n\n## 6. Date and Time Validation (`type=\"date\"`, `type=\"time\"`, `type=\"datetime-local\"`)\nWhen using the `type=\"date\"`, `type=\"time\"`, or `type=\"datetime-local\"`, the browser will ensure the input is a valid date or time.\n\nExample (date):\n```html\n<input type=\"date\" name=\"birthdate\" required>\n```\n- The input will only accept values in a valid date format, and the browser may offer a date picker.\n\nExample (time):\n```html\n<input type=\"time\" name=\"meeting_time\" required>\n```\n- Only valid times will be accepted, with the option to pick from a time picker.\n\n---\n\n## 7. URL Validation (`type=\"url\"`)\nWhen you use the `type=\"url\"`, the browser checks whether the input value is a valid URL.\n\nExample:\n```html\n<input type=\"url\" name=\"website\" required placeholder=\"Enter website URL\">\n```\n- The browser ensures the entered URL is in the correct format (e.g., `https://www.example.com`).\n\n---\n\n## 8. Input Range Validation (`type=\"range\"`)\nFor inputs of type `range`, the browser ensures that the selected value falls within the specified range.\n\nExample:\n```html\n<input type=\"range\" name=\"volume\" min=\"0\" max=\"100\" step=\"1\" required>\n```\n- This will only accept values between 0 and 100.\n- If the value exceeds the range or is not a valid number, the form will not submit.\n\n---\n\n## 9. File Input Validation (`type=\"file\"`)\nThe `type=\"file\"` allows the user to upload files. You can specify the types of files that are allowed using the `accept` attribute.\n\nExample:\n```html\n<input type=\"file\" name=\"resume\" accept=\".pdf, .docx\" required>\n```\n- This restricts file uploads to PDF and DOCX formats only.\n- You can also specify the maximum file size with the `max-file-size` attribute, although this requires custom validation in some browsers.\n\n---\n\n## 10. Resetting Form (`reset` method)\nYou can use the `reset()` method to reset all form fields to their default values.\n\nExample:\n```html\n<button type=\"reset\">Reset</button>\n```\n- This will clear all input values, except for fields marked with `readonly`.\n\n---\n\n## Conclusion\nHTML provides several built-in validation features that allow you to verify user input before submitting a form. These validation features include requiring fields, pattern matching, number and email validation, and more. Using these built-in methods improves user experience and helps to ensure that the data submitted through forms is valid and formatted correctly.\n\n### Key Takeaways:\n- Built-in HTML validation is simple to implement and doesn't require JavaScript.\n- Attributes like `required`, `pattern`, `min`, and `maxlength` help ensure valid data submission.\n- HTML5 provides specific input types for emails, numbers, dates, and files with automatic validation.\n- By using these validation features, you can improve form accessibility and reduce user errors.",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-6-7",
                                "question": "Which attribute ensures the input follows a certain pattern?",
                                "options": ["pattern", "required", "maxlength"],
                                "correctAnswer": "pattern",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-6-8",
                                "question": "What attribute limits the number of characters in an input?",
                                "options": ["maxlength", "minlength", "pattern"],
                                "correctAnswer": "maxlength",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-6-9",
                                "question": "Which input type allows users to select a date?",
                                "options": ["text", "date", "calendar"],
                                "correctAnswer": "date",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-6-4",
                        "title": "Form Elements and Layout",
                        "content": "## Use Elements like <label>, <fieldset>, and <textarea> Effectively\n\nIn HTML, elements such as `<label>`, `<fieldset>`, and `<textarea>` play an important role in enhancing the usability and accessibility of forms. These elements allow you to create more structured and user-friendly forms.\n\n---\n\n## 1. <label> Element\nThe `<label>` element is used to define a label for an input element, improving accessibility and user experience. It associates the label with a specific form control.\n\n### Usage of `<label>`:\n- Clicking on the label will focus the corresponding input element.\n- The `for` attribute in the `<label>` tag is used to link the label to an input element by matching the `id` of the input.\n\nExample:\n```html\n<label for=\"username\">Username:</label>\n<input type=\"text\" id=\"username\" name=\"username\" required>\n```\n- In this example, clicking the 'Username:' label will focus the input field with the id `username`.\n\n---\n\n## 2. <fieldset> Element\nThe `<fieldset>` element is used to group related elements in a form, providing a visual boundary around them. This improves the structure and readability of the form, especially for complex forms with many fields.\n\n### Usage of `<fieldset>`:\n- The `<fieldset>` element is often used with the `<legend>` element to provide a title for the grouped elements.\n\nExample:\n```html\n<fieldset>\n  <legend>Personal Information</legend>\n  <label for=\"first-name\">First Name:</label>\n  <input type=\"text\" id=\"first-name\" name=\"first-name\">\n  <label for=\"last-name\">Last Name:</label>\n  <input type=\"text\" id=\"last-name\" name=\"last-name\">\n</fieldset>\n```\n- The form fields for 'First Name' and 'Last Name' are grouped within a `<fieldset>` for better organization.\n\n---\n\n## 3. <textarea> Element\nThe `<textarea>` element is used to create a multi-line text input field where users can input longer text, such as comments or descriptions.\n\n### Usage of `<textarea>`:\n- The `<textarea>` tag does not require the `type` attribute, as it is specifically designed for multi-line text input.\n- It supports attributes like `rows` (number of visible text lines) and `cols` (width of the text area).\n\nExample:\n```html\n<label for=\"comments\">Your Comments:</label>\n<textarea id=\"comments\" name=\"comments\" rows=\"4\" cols=\"50\" placeholder=\"Enter your comments here\"></textarea>\n```\n- In this example, the user can type multiple lines of text in the 'Your Comments' field.\n- The `rows` and `cols` attributes define the visible size of the text area, and the `placeholder` provides a hint to the user.\n\n---\n\n## Key Benefits of Using These Elements\n- **Accessibility:** The `<label>` element improves accessibility by allowing screen readers to correctly identify form elements.\n- **Form Organization:** The `<fieldset>` element groups related form fields together, making the form visually more organized and easier to navigate.\n- **Usability:** The `<textarea>` element offers a better experience for multi-line text input, enabling users to easily type longer comments or feedback.\n\n---\n\n## Conclusion\nUsing the `<label>`, `<fieldset>`, and `<textarea>` elements effectively helps you create more organized, accessible, and user-friendly forms. These elements are essential for improving form navigation, enhancing accessibility, and providing users with a better experience when filling out forms.\n\n### Key Takeaways:\n- The `<label>` element helps associate a label with an input field, making forms easier to use and more accessible.\n- The `<fieldset>` element groups form fields logically, improving the form's structure.\n- The `<textarea>` element allows users to input multi-line text, making it ideal for longer input like comments or descriptions.",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-6-10",
                                "question": "Which tag is used to group related elements in a form?",
                                "options": ["<fieldset>", "<group>", "<section>"],
                                "correctAnswer": "<fieldset>",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-6-11",
                                "question": "Which tag is used to associate a label with an input?",
                                "options": ["<label>", "<div>", "<span>"],
                                "correctAnswer": "<label>",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-6-12",
                                "question": "Which tag creates a multiline input field?",
                                "options": ["<input>", "<textarea>", "<textbox>"],
                                "correctAnswer": "<textarea>",
                                "userAnswer": ""
                            }
                        ]
                    }
                ],
                "assessment": {
                    "questions": [
                        {
                            "questionId": "assess-6-1",
                            "question": "Which HTML element is used to create a form?",
                            "options": ["<form>", "<input>", "<textarea>"],
                            "correctAnswer": "<form>",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-6-2",
                            "question": "Which attribute specifies where to send the form data?",
                            "options": ["action", "href", "src"],
                            "correctAnswer": "action",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-6-3",
                            "question": "Which HTML input type allows users to select only one option from a set?",
                            "options": ["checkbox", "radio", "select"],
                            "correctAnswer": "radio",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-6-4",
                            "question": "What tag is used to provide a label for an input?",
                            "options": ["<label>", "<name>", "<desc>"],
                            "correctAnswer": "<label>",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-6-5",
                            "question": "What is the purpose of the 'required' attribute?",
                            "options": ["To hide the field", "To make a field mandatory", "To disable the field"],
                            "correctAnswer": "To make a field mandatory",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-6-6",
                            "question": "Which tag creates a dropdown menu?",
                            "options": ["<input>", "<select>", "<option>"],
                            "correctAnswer": "<select>",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-6-7",
                            "question": "What input type should be used for email addresses?",
                            "options": ["text", "email", "address"],
                            "correctAnswer": "email",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-6-8",
                            "question": "Which tag is used to create a multiline text field?",
                            "options": ["<input>", "<textarea>", "<field>"],
                            "correctAnswer": "<textarea>",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-6-9",
                            "question": "Which attribute restricts characters in an input field to a pattern?",
                            "options": ["pattern", "validate", "constraint"],
                            "correctAnswer": "pattern",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-6-10",
                            "question": "Which tag is used to group form fields?",
                            "options": ["<fieldset>", "<group>", "<div>"],
                            "correctAnswer": "<fieldset>",
                            "userAnswer": ""
                        }
                    ]
                }
            }

        ]
    },
    {
        "id": "course-5",
        "title": "CSS Mastery",
        "description": "Learn Cascading Style Sheets (CSS) from fundamentals to advanced concepts with real-world examples and projects.",
        "chapters": [
            {
                "chapterId": "ch-1",
                "title": "Introduction to CSS",
                "unlocked": true,
                "modules": [
                    {
                        "moduleId": "mod-1-1",
                        "title": "What is CSS?",
                        "content": "## Understand the Basics of CSS and Its Role in Web Development\n\n## 1. What is CSS?\n\n**CSS** stands for **Cascading Style Sheets**. It is a stylesheet language used to describe the **presentation and styling** of a web page written in HTML.\n\nWhile HTML provides the structure of the webpage, CSS is responsible for making the web page look visually appealing by controlling layout, colors, fonts, spacing, and more.\n\n### Example of HTML vs CSS:\n**HTML (Structure):**\n```html\n<h1>Welcome to My Website</h1>\n<p>This is a paragraph.</p>\n```\n\n**CSS (Styling):**\n```css\nh1 {\n  color: blue;\n  text-align: center;\n}\n\np {\n  font-size: 16px;\n  color: gray;\n}\n```\n\n---\n\n## 2. Role of CSS in Web Development\n\nCSS plays a crucial role in web development by:\n\n- **Improving Visual Appearance:** Makes the website visually attractive.\n- **Maintaining Consistency:** Ensures a uniform style across all pages.\n- **Enhancing User Experience:** Good design improves readability and navigation.\n- **Responsive Design:** Helps make websites work well on different devices like mobiles, tablets, and desktops.\n- **Separation of Concerns:** Keeps design separate from structure (HTML), making it easier to manage and maintain.\n\n---\n\n## 3. How CSS is Added to Web Pages\n\nThere are three main ways to add CSS to your web pages:\n\n### a. Inline CSS\nCSS is added directly to the HTML element using the `style` attribute.\n\n```html\n<p style=\"color: green; font-size: 18px;\">This is inline CSS.</p>\n```\n\n### b. Internal CSS\nCSS is written within a `<style>` tag in the HTML `<head>` section.\n\n```html\n<head>\n  <style>\n    p {\n      color: red;\n    }\n  </style>\n</head>\n```\n\n### c. External CSS\nCSS is written in a separate `.css` file and linked to the HTML file.\n\n```html\n<head>\n  <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n```\n\n**External CSS** is the recommended way as it promotes clean code and reusability.\n\n---\n\n## 4. CSS Syntax\n\nCSS consists of **selectors** and **declarations**.\n\n### Example:\n```css\nselector {\n  property: value;\n}\n```\n\n### Breakdown:\n- **Selector:** Targets the HTML element to style.\n- **Property:** The aspect of the element to style (e.g., color, font-size).\n- **Value:** The value assigned to the property.\n\n### Example:\n```css\nh1 {\n  color: purple;\n  font-size: 30px;\n}\n```\n\n---\n\n## 5. Summary\n\n- **CSS** is essential for styling and designing web pages.\n- It controls the layout, colors, fonts, and overall appearance.\n- CSS can be added inline, internally, or externally.\n- Understanding CSS is crucial for creating professional and responsive web designs.\n\n> Mastering CSS will allow you to build visually appealing and user-friendly websites that work across all devices. 🎨🖥️",
                        "unlocked": true,
                        "questions": [
                            {
                                "questionId": "q-1-1",
                                "question": "What does CSS stand for?",
                                "options": ["Cascading Style Sheets", "Creative Style System", "Computer Style Syntax"],
                                "correctAnswer": "Cascading Style Sheets",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-1-2",
                                "question": "Which tag is used to link CSS in HTML?",
                                "options": ["<link>", "<style>", "<script>"],
                                "correctAnswer": "<link>",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-1-3",
                                "question": "Which HTML attribute is used to apply inline CSS?",
                                "options": ["style", "css", "class"],
                                "correctAnswer": "style",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-1-2",
                        "title": "Types of CSS",
                        "content": "## Learn About Inline, Internal, and External CSS\n\n## What is CSS?\n\nCSS (Cascading Style Sheets) is used to style and layout web pages — for example, to change fonts, colors, spacing, and layout. There are three primary ways to apply CSS to HTML documents:\n\n- **Inline CSS**\n- **Internal CSS**\n- **External CSS**\n\nUnderstanding the differences helps you choose the right method based on your project needs.\n\n---\n\n## 1. Inline CSS\n\n### Definition:\nCSS is written directly within the HTML tag using the `style` attribute.\n\n### When to Use:\n- Quick, single-element styling.\n- Testing or overriding other styles temporarily.\n\n### Example:\n```html\n<p style=\"color: blue; font-size: 18px;\">This is an inline styled paragraph.</p>\n```\n\n### Pros:\n- Fast and easy for small changes.\n- No need for external files.\n\n### Cons:\n- Not reusable.\n- Hard to maintain with larger projects.\n\n---\n\n## 2. Internal CSS\n\n### Definition:\nCSS is written inside the `<style>` tag within the `<head>` section of the HTML document.\n\n### When to Use:\n- Styling a single HTML page.\n- When external files are not practical.\n\n### Example:\n```html\n<head>\n  <style>\n    p {\n      color: green;\n      font-size: 20px;\n    }\n  </style>\n</head>\n<body>\n  <p>This is a paragraph with internal CSS.</p>\n</body>\n```\n\n### Pros:\n- Keeps CSS in one place for the page.\n- No need for external CSS files.\n\n### Cons:\n- Not reusable across multiple pages.\n- Increases HTML file size.\n\n---\n\n## 3. External CSS\n\n### Definition:\nCSS is written in a separate `.css` file and linked to the HTML document using the `<link>` tag.\n\n### When to Use:\n- For styling multiple web pages consistently.\n- For large projects with multiple stylesheets.\n\n### Example:\n**HTML file (index.html):**\n```html\n<head>\n  <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n  <p>This is a paragraph with external CSS.</p>\n</body>\n```\n\n**CSS file (styles.css):**\n```css\np {\n  color: red;\n  font-size: 22px;\n}\n```\n\n### Pros:\n- Reusable and maintainable.\n- Keeps HTML and CSS separate for cleaner code.\n- Better for caching and faster page load times.\n\n### Cons:\n- Requires external file management.\n- Needs internet access to load external CSS (if hosted externally).\n\n---\n\n **Tip:** For professional web development, prefer **external CSS** for better maintainability and scalability! 🚀\n\n---\n\n## Conclusion\n\nUnderstanding inline, internal, and external CSS helps you choose the right approach for your web development projects. Mastering all three gives you flexibility and control over how you style your web pages!",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-1-4",
                                "question": "Which type of CSS is defined inside the HTML tag?",
                                "options": ["Inline", "Internal", "External"],
                                "correctAnswer": "Inline",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-1-5",
                                "question": "Which tag is used for internal CSS?",
                                "options": ["<style>", "<script>", "<link>"],
                                "correctAnswer": "<style>",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-1-6",
                                "question": "Which file extension is used for external CSS?",
                                "options": [".html", ".css", ".js"],
                                "correctAnswer": ".css",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-1-3",
                        "title": "CSS Syntax",
                        "content" : "## Understand How CSS Rules Are Written and Interpreted\n\n## What is a CSS Rule?\n\nA CSS rule defines how a particular element or group of elements should be styled. It consists of **selectors** and **declarations**.\n\n**Basic Structure of a CSS Rule:** selector { property: value; }\n\n- **Selector:** Targets the HTML element you want to style.\n- **Property:** The style you want to apply (like `color`, `font-size`).\n- **Value:** The setting for the property (like `blue`, `16px`).\n\n---\n\n## Example of a CSS Rule\n\np { color: blue; font-size: 18px; }\n\n- **Selector:** `p` (all paragraph elements)\n- **Properties:** `color` — sets text color to blue, `font-size` — sets font size to 18px\n\n---\n\n## Multiple Declarations in One Rule\n\ndiv { background-color: yellow; border: 1px solid black; padding: 10px; }\n\n---\n\n## CSS Interpretation Flow\n\nWhen the browser loads an HTML page, it: 1. Parses the HTML. 2. Loads CSS (inline, internal, or external). 3. Matches selectors to HTML elements. 4. Applies the corresponding styles according to the CSS cascade, specificity, and importance.\n\n> **Tip:** If multiple rules apply to the same element, the browser will use specificity and cascade rules to decide which one wins!\n\n---\n\n## Advanced Example\n\nbutton { background-color: green; color: white; padding: 10px 20px; } #submitBtn { background-color: blue; } .highlight { background-color: yellow; }\n\n**Breakdown:** - `button`: targets all `<button>` elements. - `#submitBtn`: targets an element with ID `submitBtn`. - `.highlight`: targets elements with class `highlight`.\n\n---\n\n## Summary\n\n- **Selector:** Targets HTML elements (example: `p`, `.class`, `#id`)\n- **Property:** The style attribute to apply (example: `color`, `margin`)\n- **Value:** Defines the setting for the property (example: `blue`, `10px`)\n- **Declaration:** Property and value pair (example: `color: blue;`)\n\n---\n\n## Conclusion\n\nWriting clean and well-structured CSS rules is essential for designing beautiful, maintainable web pages. Understand how the browser reads and applies these rules to control the look and feel of your site effectively! \uD83C\uDFA8✨\n\n> **Pro Tip:** Always format your CSS neatly and comment your styles for better readability and collaboration.\n",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-1-7",
                                "question": "What symbol is used to define a class selector in CSS?",
                                "options": [".", "#", "&"],
                                "correctAnswer": ".",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-1-8",
                                "question": "Which of the following is a valid CSS declaration?",
                                "options": ["color: red;", "font-size = 14px;", "margin - 10px"],
                                "correctAnswer": "color: red;",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-1-9",
                                "question": "Which symbol is used to separate property and value?",
                                "options": [":", "=", "-"],
                                "correctAnswer": ":",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-1-4",
                        "title": "Selectors",
                        "content": "## Explore Various CSS Selectors: Class, ID, and Universal Selectors\n\n## What Are CSS Selectors?\n\nCSS selectors are patterns used to select and style specific elements in HTML. They tell the browser which HTML elements the CSS rules should apply to.\n\n---\n\n## Types of CSS Selectors\n\n### 1. **Class Selector (`.`)**\n- Targets elements with a specific class attribute.\n- Can be used for multiple elements.\n\n```css\n.button {\n  background-color: green;\n  color: white;\n}\n```\n\n**HTML Example:**\n```html\n<button class=\"button\">Click Me</button>\n<div class=\"button\">Another Button</div>\n```\n\n---\n\n### 2. **ID Selector (`#`)**\n- Targets a single element with a unique ID attribute.\n- Should be used only once per page.\n\n```css\n#header {\n  font-size: 24px;\n  color: navy;\n}\n```\n\n**HTML Example:**\n```html\n<h1 id=\"header\">Welcome!</h1>\n```\n\n---\n\n### 3. **Universal Selector (`*`)**\n- Applies to **all** elements in the document.\n- Useful for resetting or applying global styles.\n\n```css\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n```\n\n---\n\n## Selector Specificity\n- **ID Selector** > **Class Selector** > **Universal Selector**\n- If multiple rules apply, the more specific selector wins.\n\n> **Tip:** Avoid overusing the universal selector as it affects all elements and can cause performance issues.\n\n---\n\n## Advanced Example\n```css\n/* Universal selector resets */\n* {\n  margin: 0;\n  padding: 0;\n}\n\n/* Class selector for reusable styles */\n.card {\n  padding: 20px;\n  border: 1px solid #ddd;\n}\n\n/* ID selector for unique element */\n#mainTitle {\n  font-size: 32px;\n  color: teal;\n}\n```\n\n**HTML Example:**\n```html\n<h1 id=\"mainTitle\">Dashboard</h1>\n<div class=\"card\">Profile Information</div>\n<div class=\"card\">Settings</div>\n```\n\n---\n\n## Conclusion\n\nUnderstanding selectors is the foundation of writing efficient CSS. Use class selectors for reusable styles, ID selectors for unique elements, and the universal selector for global rules. Mastering these will help you write cleaner, more maintainable CSS! 🎨✨\n\n> **Pro Tip:** Combine selectors for more precise targeting and cleaner stylesheets.\n",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-1-10",
                                "question": "What symbol is used for ID selector in CSS?",
                                "options": ["#", ".", "&"],
                                "correctAnswer": "#",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-1-11",
                                "question": "Which selector targets all elements in CSS?",
                                "options": ["*", "#", "."],
                                "correctAnswer": "*",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-1-12",
                                "question": "How do you select an element with the class 'menu'?",
                                "options": [".menu", "#menu", "menu"],
                                "correctAnswer": ".menu",
                                "userAnswer": ""
                            }
                        ]
                    }
                ],
                "assessment": {
                    "questions": [
                        {
                            "questionId": "assess-1-1",
                            "question": "Which of the following is not a type of CSS?",
                            "options": ["External", "Inline", "Remote"],
                            "correctAnswer": "Remote",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-1-2",
                            "question": "What is the correct syntax for CSS comments?",
                            "options": ["/* comment */", "// comment", "<!-- comment -->"],
                            "correctAnswer": "/* comment */",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-1-3",
                            "question": "Which property is used to change text color?",
                            "options": ["color", "font-color", "text-color"],
                            "correctAnswer": "color",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-1-4",
                            "question": "Which property controls the size of text?",
                            "options": ["font-size", "text-size", "font-style"],
                            "correctAnswer": "font-size",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-1-5",
                            "question": "Which of these selectors is most specific?",
                            "options": [".class", "#id", "*"],
                            "correctAnswer": "#id",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-1-6",
                            "question": "Where is the external CSS file referenced in HTML?",
                            "options": ["In the <head> tag", "In the <body> tag", "After the </html> tag"],
                            "correctAnswer": "In the <head> tag",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-1-7",
                            "question": "How do you apply the same CSS to multiple elements?",
                            "options": ["Separate them with commas", "Use + operator", "Use &"],
                            "correctAnswer": "Separate them with commas",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-1-8",
                            "question": "What is the purpose of a universal selector?",
                            "options": ["To select all elements", "To select only paragraphs", "To select headers"],
                            "correctAnswer": "To select all elements",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-1-9",
                            "question": "Which keyword is used to apply the same rule to all elements?",
                            "options": ["*", "@all", "!all"],
                            "correctAnswer": "*",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-1-10",
                            "question": "Which selector selects elements with a specific attribute?",
                            "options": ["[attr]", ".attr", "#attr"],
                            "correctAnswer": "[attr]",
                            "userAnswer": ""
                        }
                    ]
                }
            }
        ,
            {
                "chapterId": "ch-2",
                "title": "CSS Colors and Backgrounds",
                "unlocked": false,
                "modules": [
                    {
                        "moduleId": "mod-2-1",
                        "title": "Working with Colors",
                        "content": "## Learn How to Use Named Colors, HEX, RGB, and HSL Values in CSS\n\n## Why Colors Matter in CSS?\n\nColors enhance the visual appeal of web pages and help convey emotions and branding effectively.\nCSS provides multiple ways to specify colors: **Named Colors**, **HEX**, **RGB**, and **HSL**.\n\n---\n\n## 1. **Named Colors**\n- CSS supports predefined color names.\n- Easy to remember but limited in variety.\n\n```css\nh1 {\n  color: blue;\n}\n\np {\n  background-color: lightgray;\n}\n```\n\n> **Example Colors:** red, green, blue, black, white, orange, purple, yellow\n\n---\n\n## 2. **HEX Values**\n- Hexadecimal representation of colors.\n- Format: `#RRGGBB`\n- Allows 16 million+ color variations.\n\n```css\nbody {\n  background-color: #f0f0f0;\n}\n\nh2 {\n  color: #ff5733;\n}\n```\n\n> **Tip:** Short HEX is possible: `#fff` equals `#ffffff` (white)\n\n---\n\n## 3. **RGB (Red, Green, Blue)**\n- Defines colors using the intensity of red, green, and blue.\n- Format: `rgb(red, green, blue)`\n\n```css\ndiv {\n  background-color: rgb(255, 99, 71); /* Tomato */\n}\n\nspan {\n  color: rgb(0, 128, 0); /* Green */\n}\n```\n\n> **Note:** Values range from 0 to 255.\n\n---\n\n## 4. **HSL (Hue, Saturation, Lightness)**\n- More intuitive way to represent colors.\n- Format: `hsl(hue, saturation%, lightness%)`\n\n```css\nsection {\n  background-color: hsl(120, 100%, 50%); /* Green */\n}\n\nfooter {\n  color: hsl(0, 100%, 50%); /* Red */\n}\n```\n\n> **Hue:** Color angle (0 = red, 120 = green, 240 = blue)  \n> **Saturation:** Intensity of color (0% = gray, 100% = full color)  \n> **Lightness:** Brightness (0% = black, 50% = normal, 100% = white)\n\n## Conclusion\n\nUsing different color formats in CSS provides flexibility and precision in design. 🎨\n\n- Use **Named Colors** for simplicity.\n- Use **HEX** for web-standard colors.\n- Use **RGB** for dynamic color changes with JS.\n- Use **HSL** for intuitive adjustments in hue, saturation, and brightness.\n\n> **Pro Tip:** Experiment with transparency using `rgba()` and `hsla()` for even more control!\n\n```css\n.transparent-box {\n  background-color: rgba(255, 0, 0, 0.5); /* Semi-transparent red */\n}\n```\n",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-2-1",
                                "question": "Which CSS value represents red using HEX?",
                                "options": ["#FF0000", "#00FF00", "#0000FF"],
                                "correctAnswer": "#FF0000",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-2-2",
                                "question": "Which color format is this: rgb(255, 0, 0)?",
                                "options": ["RGB", "HEX", "HSL"],
                                "correctAnswer": "RGB",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-2-3",
                                "question": "Which of the following is a named color in CSS?",
                                "options": ["blue", "#0000FF", "rgb(0, 0, 255)"],
                                "correctAnswer": "blue",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-2-2",
                        "title": "Background Properties",
                        "content": "## Explore CSS Properties like background-color, background-image, and More\n\n## Why Background Properties Matter?\n\nCSS background properties allow you to style the backdrop of elements, making your web page visually engaging and attractive.\n\n---\n\n## 1. **background-color**\n- Sets the background color of an element.\n\n```css\nbody {\n  background-color: #f9f9f9;\n}\n\nh1 {\n  background-color: lightblue;\n}\n```\n\n> **Tip:** Use transparent or rgba for opacity control.\n\n---\n\n## 2. **background-image**\n- Adds an image as the background.\n\n```css\nheader {\n  background-image: url('banner.jpg');\n}\n```\n\n> **Note:** Ensure the image path is correct!\n\n---\n\n## 3. **background-repeat**\n- Controls if/how the background image repeats.\n\n```css\nheader {\n  background-image: url('pattern.png');\n  background-repeat: no-repeat;\n}\n```\n\n> Options: `repeat`, `no-repeat`, `repeat-x`, `repeat-y`\n\n---\n\n## 4. **background-size**\n- Defines the size of the background image.\n\n```css\nsection {\n  background-image: url('background.jpg');\n  background-size: cover;\n}\n```\n\n> Options: `auto`, `cover`, `contain`, or custom values (e.g., `100px 200px`)\n\n---\n\n## 5. **background-position**\n- Positions the background image.\n\n```css\nfooter {\n  background-image: url('footer-bg.png');\n  background-position: center bottom;\n}\n```\n\n> Examples: `top left`, `center center`, `bottom right`\n\n---\n\n## 6. **background-attachment**\n- Determines whether the background scrolls with the content or stays fixed.\n\n```css\nbody {\n  background-image: url('scroll-bg.jpg');\n  background-attachment: fixed;\n}\n```\n\n> Options: `scroll`, `fixed`, `local`\n\n---\n\n## 7. **Shorthand Property: background**\n- Combine multiple background properties in one line.\n\n```css\nsection {\n  background: url('bg.jpg') no-repeat center center / cover;\n}\n```\n\n---\n\n## Conclusion\n\nMastering background properties helps create visually rich and responsive designs! 🌟\n\n> **Pro Tip:** Test different combinations of background properties to achieve unique effects!\n\n```css\n.container {\n  background: linear-gradient(rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.5)), url('background.jpg');\n  background-size: cover;\n  background-position: center;\n}\n```\n",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-2-4",
                                "question": "Which property sets the background color of an element?",
                                "options": ["background-color", "color", "bg-color"],
                                "correctAnswer": "background-color",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-2-5",
                                "question": "How do you repeat a background image horizontally?",
                                "options": ["repeat-x", "repeat-y", "repeat-horizontal"],
                                "correctAnswer": "repeat-x",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-2-6",
                                "question": "Which value prevents a background image from repeating?",
                                "options": ["no-repeat", "none", "disable"],
                                "correctAnswer": "no-repeat",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-2-3",
                        "title": "Gradient Backgrounds",
                        "content": "## Understand How to Create Linear and Radial Gradients\n\n## What are CSS Gradients?\n\nCSS gradients allow you to create smooth transitions between two or more colors, without needing to use an image. They make your designs more dynamic and lightweight!\n\n---\n\n## 1. **Linear Gradients**\n- Creates a gradient along a straight line (top to bottom, left to right, or at any angle).\n\n### Syntax\n```css\nbackground: linear-gradient(direction, color1, color2, ...);\n```\n\n### Example: Top to Bottom Gradient\n```css\n.box {\n  background: linear-gradient(to bottom, red, yellow);\n}\n```\n\n### Example: Left to Right Gradient\n```css\n.box {\n  background: linear-gradient(to right, blue, lightblue);\n}\n```\n\n### Example: Angled Gradient\n```css\n.box {\n  background: linear-gradient(45deg, green, yellow);\n}\n```\n\n> **Tip:** You can add multiple color stops for complex effects!\n\n```css\n.box {\n  background: linear-gradient(to right, red, orange, yellow, green, blue, indigo, violet);\n}\n```\n\n---\n\n## 2. **Radial Gradients**\n- Creates a gradient radiating outward from an origin (center or custom position).\n\n### Syntax\n```css\nbackground: radial-gradient(shape size at position, start-color, ..., last-color);\n```\n\n### Example: Default Circle Gradient\n```css\n.circle {\n  background: radial-gradient(circle, red, yellow, green);\n}\n```\n\n### Example: Ellipse Gradient\n```css\n.ellipse {\n  background: radial-gradient(ellipse, pink, purple);\n}\n```\n\n### Example: Positioned Radial Gradient\n```css\n.positioned {\n  background: radial-gradient(circle at top left, blue, white);\n}\n```\n\n> **Tip:** Use `closest-side`, `farthest-corner` for controlling the spread.\n\n```css\n.box {\n  background: radial-gradient(circle closest-side, red, transparent);\n}\n```\n\n---\n\n## Conclusion\n\nGradients add depth and vibrancy to your web pages! 🎨\n\n> **Pro Tip:** Combine gradients with transparency for beautiful overlay effects.\n\n```css\n.overlay {\n  background: linear-gradient(rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.5)), url('image.jpg');\n  background-size: cover;\n}\n```\n",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-2-7",
                                "question": "What is the correct syntax for a linear gradient?",
                                "options": ["linear-gradient(red, blue)", "gradient(linear, red, blue)", "linear(red, blue)"],
                                "correctAnswer": "linear-gradient(red, blue)",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-2-8",
                                "question": "Which gradient creates a circular color transition?",
                                "options": ["radial-gradient", "circle-gradient", "ellipse-gradient"],
                                "correctAnswer": "radial-gradient",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-2-9",
                                "question": "Which property allows multiple background images?",
                                "options": ["background-image", "background", "background-blend-mode"],
                                "correctAnswer": "background-image",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-2-4",
                        "title": "Background Attachment and Positioning",
                        "content": "## Learn How to Fix Background Images and Control Their Position\n\n## What is a Background Image in CSS?\n\nA background image is an image placed behind the content of an element. CSS provides properties to control its position, repeat behavior, and attachment (fixed or scrollable).\n\n---\n\n## 1. **Setting a Background Image**\n\n### Syntax\n```css\nselector {\n  background-image: url('path/to/image.jpg');\n}\n```\n\n### Example\n```css\nbody {\n  background-image: url('background.jpg');\n}\n```\n\n---\n\n## 2. **Fixing the Background Image**\n\nUse the `background-attachment` property to make the background image stay in place when scrolling.\n\n### Options:\n- **scroll** (default): Background scrolls with the page.\n- **fixed**: Background stays fixed when you scroll.\n- **local**: Background scrolls with the element's content.\n\n### Example: Fixed Background\n```css\nbody {\n  background-image: url('background.jpg');\n  background-attachment: fixed;\n}\n```\n\n> **Note:** Fixed backgrounds work best with larger images and high contrast.\n\n---\n\n## 3. **Controlling Background Position**\n\nUse `background-position` to control where the background image appears.\n\n### Syntax\n```css\nselector {\n  background-position: x-axis y-axis;\n}\n```\n\n### Example: Center the Background\n```css\nbody {\n  background-image: url('background.jpg');\n  background-position: center center;\n}\n```\n\n### Common Values\n- `left top`\n- `left center`\n- `center center`\n- `right bottom`\n- Pixel or percentage values like `50% 50%` or `100px 200px`\n\n### Example: Custom Position\n```css\nbody {\n  background-image: url('background.jpg');\n  background-position: 100px 50px;\n}\n```\n\n---\n\n## 4. **Combine Fixed Background with Position**\n\n### Example\n```css\nbody {\n  background-image: url('background.jpg');\n  background-attachment: fixed;\n  background-position: center top;\n  background-repeat: no-repeat;\n  background-size: cover;\n}\n```\n\n> **Tip:** Use `background-size: cover;` to make sure the image covers the whole background!\n\n---\n\n## Conclusion\n\nControlling background images adds depth and professionalism to your design. 🎨\n\n> **Pro Tip:** Combine positioning, fixed backgrounds, and size control for stunning effects!\n\n```css\nbody {\n  background: url('bg.jpg') no-repeat center center fixed;\n  background-size: cover;\n}\n```\n",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-2-10",
                                "question": "Which property fixes a background image while scrolling?",
                                "options": ["background-attachment", "background-repeat", "background-fixed"],
                                "correctAnswer": "background-attachment",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-2-11",
                                "question": "What value keeps the background image fixed?",
                                "options": ["fixed", "scroll", "static"],
                                "correctAnswer": "fixed",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-2-12",
                                "question": "Which property sets the starting position of a background image?",
                                "options": ["background-position", "background-origin", "background-anchor"],
                                "correctAnswer": "background-position",
                                "userAnswer": ""
                            }
                        ]
                    }
                ],
                "assessment": {
                    "questions": [
                        {
                            "questionId": "assess-2-1",
                            "question": "Which of the following is a valid CSS color format?",
                            "options": ["rgb(255,255,255)", "color(255,255,255)", "rgba(255)"],
                            "correctAnswer": "rgb(255,255,255)",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-2-2",
                            "question": "What is the result of background-color: transparent?",
                            "options": ["No background color", "White background", "Black background"],
                            "correctAnswer": "No background color",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-2-3",
                            "question": "How do you apply a background image in CSS?",
                            "options": ["background-image: url('image.jpg')", "background: image('image.jpg')", "background: url('image.jpg')"],
                            "correctAnswer": "background-image: url('image.jpg')",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-2-4",
                            "question": "Which property sets the size of the background image?",
                            "options": ["background-size", "background-width", "bg-size"],
                            "correctAnswer": "background-size",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-2-5",
                            "question": "Which gradient direction is top to bottom?",
                            "options": ["to bottom", "to top", "bottom-top"],
                            "correctAnswer": "to bottom",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-2-6",
                            "question": "Which background property can take multiple comma-separated values?",
                            "options": ["background", "background-color", "background-position"],
                            "correctAnswer": "background",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-2-7",
                            "question": "How do you set a semi-transparent background color?",
                            "options": ["rgba()", "hsla()", "both"],
                            "correctAnswer": "both",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-2-8",
                            "question": "What is the default value for background-repeat?",
                            "options": ["repeat", "no-repeat", "repeat-x"],
                            "correctAnswer": "repeat",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-2-9",
                            "question": "How do you stretch a background image to fit an element?",
                            "options": ["background-size: cover", "background-stretch", "background-fit"],
                            "correctAnswer": "background-size: cover",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-2-10",
                            "question": "Which property blends background layers together?",
                            "options": ["background-blend-mode", "mix-blend-mode", "layer-blend"],
                            "correctAnswer": "background-blend-mode",
                            "userAnswer": ""
                        }
                    ]
                }
            }
        ,
            {
                "chapterId": "ch-3",
                "title": "CSS Fonts and Text",
                "unlocked": false,
                "modules": [
                    {
                        "moduleId": "mod-3-1",
                        "title": "Font Properties",
                        "content": "## Learn About Font Properties: font-family, font-size, font-style, font-weight, and Shorthand\n\n## Importance of Font Styling in CSS\n\nFonts play a key role in making your website look attractive and readable. CSS offers various properties to control the appearance of text.\n\n---\n\n## 1. **font-family**\n\nSpecifies the font for an element.\n\n### Syntax\n```css\nselector {\n  font-family: 'Font Name', fallback;\n}\n```\n\n### Example\n```css\np {\n  font-family: 'Arial', sans-serif;\n}\n```\n\n> **Tip:** Always include a generic fallback (like `serif`, `sans-serif`, or `monospace`).\n\n---\n\n## 2. **font-size**\n\nControls the size of the text.\n\n### Syntax\n```css\nselector {\n  font-size: value;\n}\n```\n\n### Example\n```css\nh1 {\n  font-size: 32px;\n}\n```\n\n### Units to Use\n- **px:** Pixels (fixed size)\n- **em:** Relative to parent element\n- **rem:** Relative to root element\n- **%:** Percentage\n\n> **Tip:** Use `rem` for better scalability!\n\n---\n\n## 3. **font-style**\n\nDefines the style of the font (normal, italic, or oblique).\n\n### Syntax\n```css\nselector {\n  font-style: value;\n}\n```\n\n### Example\n```css\nem {\n  font-style: italic;\n}\n```\n\n### Values\n- `normal`\n- `italic`\n- `oblique`\n\n---\n\n## 4. **font-weight**\n\nSpecifies the thickness of the font.\n\n### Syntax\n```css\nselector {\n  font-weight: value;\n}\n```\n\n### Example\n```css\nstrong {\n  font-weight: bold;\n}\n```\n\n### Common Values\n- `normal`\n- `bold`\n- `lighter`\n- Numeric values: `100`, `400` (normal), `700` (bold), etc.\n\n> **Tip:** Numeric values give you more control over font thickness!\n\n---\n\n## 5. **Shorthand for Fonts**\n\nCombine multiple font properties in a single line.\n\n### Syntax\n```css\nselector {\n  font: font-style font-variant font-weight font-size/line-height font-family;\n}\n```\n\n### Example\n```css\np {\n  font: italic small-caps bold 16px/1.5 'Arial', sans-serif;\n}\n```\n\n### Simple Example\n```css\nh2 {\n  font: bold 24px 'Verdana', sans-serif;\n}\n```\n\n> **Note:** At a minimum, `font-size` and `font-family` are required in shorthand.\n\n---\n\n## Conclusion\n\nMastering font properties helps improve readability and style in your web pages! 🎨✨\n\n> **Pro Tip:** Test different fonts and sizes to create a visually appealing hierarchy.\n\n```css\nbody {\n  font: normal 16px/1.6 'Roboto', sans-serif;\n}\n```\n",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-3-1",
                                "question": "Which property sets the typeface for an element?",
                                "options": ["font-family", "font-type", "text-family"],
                                "correctAnswer": "font-family",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-3-2",
                                "question": "How do you make text bold using CSS?",
                                "options": ["font-weight: bold", "font-style: bold", "text-weight: bold"],
                                "correctAnswer": "font-weight: bold",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-3-3",
                                "question": "Which value of font-style makes text italic?",
                                "options": ["italic", "oblique", "bold"],
                                "correctAnswer": "italic",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-3-2",
                        "title": "Text Alignment and Decoration",
                        "content": "## Control Text Alignment, Decoration, Indentation, and Spacing\n\n## Why Text Control Matters?\n\nProper control over text alignment, decoration, indentation, and spacing improves readability and visual appeal of web pages.\n\n---\n\n## 1. **Text Alignment**\n\nAligns text horizontally within its container.\n\n### Syntax\n```css\nselector {\n  text-align: value;\n}\n```\n\n### Values\n- `left` (default)\n- `right`\n- `center`\n- `justify`\n\n### Example\n```css\np {\n  text-align: justify;\n}\nh2 {\n  text-align: center;\n}\n```\n\n> **Tip:** Use `justify` for clean, newspaper-style alignment.\n\n---\n\n## 2. **Text Decoration**\n\nAdds decorative lines to text (like underline, overline, etc.).\n\n### Syntax\n```css\nselector {\n  text-decoration: value;\n}\n```\n\n### Values\n- `none`\n- `underline`\n- `overline`\n- `line-through`\n\n### Example\n```css\na {\n  text-decoration: none;\n}\nh1 {\n  text-decoration: underline;\n}\n```\n\n> **Note:** `text-decoration` is often used to style links.\n\n---\n\n## 3. **Text Indentation**\n\nIndents the first line of text inside an element.\n\n### Syntax\n```css\nselector {\n  text-indent: value;\n}\n```\n\n### Example\n```css\np {\n  text-indent: 40px;\n}\n```\n\n### Units\n- `px`\n- `em`\n- `%`\n\n> **Tip:** Use `em` for scalable indentation.\n\n---\n\n## 4. **Text Spacing**\n\nControls space between letters and words.\n\n### a) **Letter Spacing**\nIncreases or decreases the space between characters.\n\n```css\nselector {\n  letter-spacing: value;\n}\n```\n\n**Example:**\n```css\nh1 {\n  letter-spacing: 2px;\n}\n```\n\n### b) **Word Spacing**\nControls the space between words.\n\n```css\nselector {\n  word-spacing: value;\n}\n```\n\n**Example:**\n```css\np {\n  word-spacing: 4px;\n}\n```\n\n---\n\n## Conclusion\n\nBy mastering these text properties, you can greatly enhance your website's typography and readability! 🎨📝\n\n> **Pro Tip:** Combine these properties for professional-looking text layouts.\n\n```css\np {\n  text-align: justify;\n  text-indent: 2em;\n  letter-spacing: 1px;\n  word-spacing: 3px;\n}\n```\n",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-3-4",
                                "question": "Which property aligns text to the right?",
                                "options": ["text-align: right", "align: right", "text-position: right"],
                                "correctAnswer": "text-align: right",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-3-5",
                                "question": "Which value of text-decoration creates underlined text?",
                                "options": ["underline", "line", "under"],
                                "correctAnswer": "underline",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-3-6",
                                "question": "Which property indents the first line of text?",
                                "options": ["text-indent", "margin-left", "padding-left"],
                                "correctAnswer": "text-indent",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-3-3",
                        "title": "Text Transformation and Spacing",
                        "content": "## Use text-transform, letter-spacing, word-spacing, and line-height\n\n## Why Text Styling Matters?\n\nThese properties control the appearance, spacing, and flow of text, making your content more readable and visually appealing.\n\n---\n\n## 1. **text-transform**\n\nControls the capitalization of text.\n\n### Syntax\n```css\nselector {\n  text-transform: value;\n}\n```\n\n### Values\n- `none` (default)\n- `capitalize` (first letter of each word capitalized)\n- `uppercase` (all letters in uppercase)\n- `lowercase` (all letters in lowercase)\n\n### Example\n```css\nh1 {\n  text-transform: uppercase;\n}\np.intro {\n  text-transform: capitalize;\n}\n```\n\n> **Tip:** Use `text-transform` for headings or emphasis.\n\n---\n\n## 2. **letter-spacing**\n\nAdjusts the space between individual letters.\n\n### Syntax\n```css\nselector {\n  letter-spacing: value;\n}\n```\n\n### Values\n- Can be positive (increase space) or negative (reduce space)\n- Units: `px`, `em`, etc.\n\n### Example\n```css\nh2 {\n  letter-spacing: 2px;\n}\np {\n  letter-spacing: 0.5px;\n}\n```\n\n> **Tip:** Increase `letter-spacing` for better readability in uppercase text.\n\n---\n\n## 3. **word-spacing**\n\nAdjusts the space between words.\n\n### Syntax\n```css\nselector {\n  word-spacing: value;\n}\n```\n\n### Example\n```css\np.description {\n  word-spacing: 4px;\n}\nh3 {\n  word-spacing: 2px;\n}\n```\n\n> **Tip:** Use `word-spacing` to improve readability in large paragraphs.\n\n---\n\n## 4. **line-height**\n\nControls the height of lines of text, improving readability and spacing.\n\n### Syntax\n```css\nselector {\n  line-height: value;\n}\n```\n\n### Values\n- Number (multiplier of the font size)\n- Length (e.g., `px`, `em`)\n- Percentage (relative to the current font size)\n\n### Example\n```css\np {\n  line-height: 1.6;\n}\narticle {\n  line-height: 24px;\n}\n```\n\n> **Tip:** A line height of 1.4 to 1.6 improves readability for body text.\n\n---\n\n## Conclusion\n\nCombining these text properties will help you create clean, readable, and well-spaced typography in your web pages! ✨\n\n> **Pro Tip:** Try mixing these properties for the best visual effect.\n\n```css\np.custom-text {\n  text-transform: capitalize;\n  letter-spacing: 1px;\n  word-spacing: 3px;\n  line-height: 1.5;\n}\n```\n",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-3-7",
                                "question": "Which value of text-transform capitalizes all letters?",
                                "options": ["uppercase", "capitalize", "all-caps"],
                                "correctAnswer": "uppercase",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-3-8",
                                "question": "Which property changes the space between characters?",
                                "options": ["letter-spacing", "text-spacing", "char-spacing"],
                                "correctAnswer": "letter-spacing",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-3-9",
                                "question": "Which property sets the height between lines?",
                                "options": ["line-height", "text-height", "font-spacing"],
                                "correctAnswer": "line-height",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-3-4",
                        "title": "Google Fonts and Font Embedding",
                        "content": "## Explore Using Custom Fonts via @import and <link>\n\n## Why Use Custom Fonts?\n\nCustom fonts make your website stand out and match the design style you want. Google Fonts is a popular source of free custom fonts.\n\n---\n\n## 1. **Using `<link>` Tag to Import Fonts**\n\nThe `<link>` method adds the font directly in your HTML file.\n\n### Steps\n1. Go to [Google Fonts](https://fonts.google.com/)\n2. Select your desired font.\n3. Copy the `<link>` provided.\n\n### Example\n```html\n<head>\n  <link href=\"https://fonts.googleapis.com/css2?family=Roboto&display=swap\" rel=\"stylesheet\">\n</head>\n```\n\n### Using in CSS\n```css\nbody {\n  font-family: 'Roboto', sans-serif;\n}\n```\n\n> **Tip:** Use `<link>` when you want to include fonts quickly in your HTML.\n\n---\n\n## 2. **Using `@import` in CSS to Import Fonts**\n\nThe `@import` method allows you to bring fonts directly into your CSS file.\n\n### Example\n```css\n@import url('https://fonts.googleapis.com/css2?family=Roboto&display=swap');\n\nbody {\n  font-family: 'Roboto', sans-serif;\n}\n```\n\n> **Tip:** Use `@import` when you prefer to manage everything inside your CSS file.\n\n---\n\n## Best Practices\n\n- Always provide fallback fonts: `'Roboto', sans-serif;`\n- Limit the number of custom fonts to improve load time.\n- Choose fonts that enhance readability.\n\n---\n\n## Pro Tip ✨\n\nYou can import multiple fonts at once!\n\n### Example\n```css\n@import url('https://fonts.googleapis.com/css2?family=Roboto&family=Open+Sans&display=swap');\n\nh1 {\n  font-family: 'Open Sans', sans-serif;\n}\n\np {\n  font-family: 'Roboto', sans-serif;\n}\n```\n\n---\n\n## Conclusion\n\nUsing custom fonts through `@import` or `<link>` brings style and uniqueness to your web projects. Choose the method that fits your workflow and design goals!\n\n> **Experiment:** Try combining different font families for headings and body text to create hierarchy and visual interest.\n",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-3-10",
                                "question": "What is the correct way to import a Google Font?",
                                "options": ["@import url('...');", "font-import(...)", "@font(...)"],
                                "correctAnswer": "@import url('...');",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-3-11",
                                "question": "Where should the <link> tag for Google Fonts be placed?",
                                "options": ["Inside <head>", "Inside <body>", "After <html>"],
                                "correctAnswer": "Inside <head>",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-3-12",
                                "question": "Which tag allows embedding of fonts in HTML?",
                                "options": ["<link>", "<style>", "<embed>"],
                                "correctAnswer": "<link>",
                                "userAnswer": ""
                            }
                        ]
                    }
                ],
                "assessment": {
                    "questions": [
                        {
                            "questionId": "assess-3-1",
                            "question": "How do you set the font size to 16 pixels?",
                            "options": ["font-size: 16px;", "text-size: 16px;", "font: 16px;"],
                            "correctAnswer": "font-size: 16px;",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-3-2",
                            "question": "Which property controls the spacing between words?",
                            "options": ["word-spacing", "spacing", "text-spacing"],
                            "correctAnswer": "word-spacing",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-3-3",
                            "question": "What does text-transform: capitalize do?",
                            "options": ["Capitalizes the first letter of each word", "Makes all text uppercase", "Makes all text lowercase"],
                            "correctAnswer": "Capitalizes the first letter of each word",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-3-4",
                            "question": "What is the default text alignment in CSS?",
                            "options": ["left", "center", "justify"],
                            "correctAnswer": "left",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-3-5",
                            "question": "Which value of font-style makes the text italic?",
                            "options": ["italic", "bold", "underline"],
                            "correctAnswer": "italic",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-3-6",
                            "question": "Which tag helps in embedding external font styles?",
                            "options": ["<link>", "<font>", "<import>"],
                            "correctAnswer": "<link>",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-3-7",
                            "question": "What does font-weight: 700 mean?",
                            "options": ["Bold text", "Light text", "Normal text"],
                            "correctAnswer": "Bold text",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-3-8",
                            "question": "Which CSS rule makes the first line of a paragraph indented?",
                            "options": ["text-indent", "margin-left", "line-indent"],
                            "correctAnswer": "text-indent",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-3-9",
                            "question": "Which value for line-height creates double spacing?",
                            "options": ["2", "1.5", "100%"],
                            "correctAnswer": "2",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-3-10",
                            "question": "Which Google Fonts embed method is correct in HTML?",
                            "options": ["<link href='...' rel='stylesheet'>", "<script src='...'></script>", "<style src='...'></style>"],
                            "correctAnswer": "<link href='...' rel='stylesheet'>",
                            "userAnswer": ""
                        }
                    ]
                }
            }
        ,
            {
                "chapterId": "ch-4",
                "title": "CSS Box Model",
                "unlocked": false,
                "modules": [
                    {
                        "moduleId": "mod-4-1",
                        "title": "Understanding the Box Model",
                        "content": "## Learn the Components of the CSS Box Model: Content, Padding, Border, and Margin\n\n## What is the CSS Box Model?\n\nThe CSS Box Model is a fundamental concept that describes how elements are structured and spaced on a web page.\n\nEvery element on a webpage is a rectangular box, consisting of:\n1. **Content**\n2. **Padding**\n3. **Border**\n4. **Margin**\n\n---\n\n## 1. **Content**\n\n- The actual content of the box (like text, images, etc.).\n- Size controlled by `width` and `height`.\n\n### Example\n```css\ndiv {\n  width: 200px;\n  height: 100px;\n}\n```\n\n---\n\n## 2. **Padding**\n\n- Space between the content and the border.\n- Makes space *inside* the box.\n\n### Example\n```css\ndiv {\n  padding: 20px;\n}\n```\n\n> **Tip:** Padding increases the size of the box without affecting outside elements.\n\n---\n\n## 3. **Border**\n\n- The edge surrounding the padding (and content).\n- Can be styled with color, width, and style.\n\n### Example\n```css\ndiv {\n  border: 2px solid black;\n}\n```\n\n> **Note:** Borders are visible lines around your element.\n\n---\n\n## 4. **Margin**\n\n- Space *outside* the border.\n- Creates distance between elements.\n\n### Example\n```css\ndiv {\n  margin: 30px;\n}\n```\n\n> **Pro Tip:** Margins collapse vertically when two elements with margins meet!\n\n---\n\n## Visual Representation 🎨\n\n```\n+--------------------------+\n|       Margin             |\n|  +------------------+   |\n|  |    Border        |   |\n|  |  +-----------+   |   |\n|  |  |  Padding  |   |   |\n|  |  | +-------+ |   |   |\n|  |  | |Content| |   |   |\n|  |  | +-------+ |   |   |\n|  |  +-----------+   |   |\n|  +------------------+   |\n+--------------------------+\n```\n\n---\n\n## Best Practices\n\n- Understand the total width: `width + padding + border + margin`\n- Use `box-sizing: border-box;` to include padding and border in the total width.\n\n### Example\n```css\n* {\n  box-sizing: border-box;\n}\n```\n\n---\n\n## Conclusion\n\nThe CSS Box Model is the foundation of layout in web design. Mastering it helps you control spacing and alignment like a pro!\n\n> **Experiment:** Play with padding and margin to see how elements move and grow!\n",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-4-1",
                                "question": "Which part of the box model surrounds the content?",
                                "options": ["Padding", "Margin", "Border"],
                                "correctAnswer": "Padding",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-4-2",
                                "question": "What property is used to add space between content and border?",
                                "options": ["padding", "margin", "spacing"],
                                "correctAnswer": "padding",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-4-3",
                                "question": "Which part lies outside the border?",
                                "options": ["Margin", "Padding", "Content"],
                                "correctAnswer": "Margin",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-4-2",
                        "title": "Padding and Margin",
                        "content": "## Explore How to Use Padding and Margin for Layout Spacing\n\n## Introduction\n\nIn CSS, **padding** and **margin** are crucial for controlling space inside and outside elements. Understanding them helps create well-structured and visually appealing layouts.\n\n---\n\n## Padding 🧩\n\n- **Padding** is the space *inside* the element, between the content and the border.\n- Increases space *within* the element without affecting nearby elements.\n\n### Syntax\n```css\nelement {\n  padding: 20px; /* Applies to all sides */\n}\n```\n\n### Individual Sides\n```css\nelement {\n  padding-top: 10px;\n  padding-right: 15px;\n  padding-bottom: 10px;\n  padding-left: 15px;\n}\n```\n\n### Shorthand Notation\n```css\nelement {\n  padding: 10px 15px 10px 15px; /* Top Right Bottom Left */\n}\n```\n\n> **Tip:** Use padding to make content more readable and spaced within its container.\n\n---\n\n## Margin 📏\n\n- **Margin** is the space *outside* the element, between the border and other elements.\n- Used to create distance between neighboring elements.\n\n### Syntax\n```css\nelement {\n  margin: 20px; /* Applies to all sides */\n}\n```\n\n### Individual Sides\n```css\nelement {\n  margin-top: 10px;\n  margin-right: 15px;\n  margin-bottom: 10px;\n  margin-left: 15px;\n}\n```\n\n### Shorthand Notation\n```css\nelement {\n  margin: 10px 15px 10px 15px; /* Top Right Bottom Left */\n}\n```\n\n> **Pro Tip:** Margins can collapse vertically between elements!\n\n---\n\n## Padding vs. Margin: Quick Comparison\n\n| Feature | Padding | Margin |\n|---------|---------|--------|\n| Location | Inside the border | Outside the border |\n| Affects Element Size? | Yes | No (except for positioning) |\n| Use Case | Inner spacing of content | Outer spacing between elements |\n\n---\n\n## Practical Example 💡\n\n```css\n.container {\n  padding: 20px;\n  margin: 30px;\n  background-color: #f0f0f0;\n  border: 2px solid #ccc;\n}\n```\n\nThis code creates a container with:\n- **20px padding** inside the border\n- **30px margin** around the outside\n- A background color and border for clarity\n\n---\n\n## Best Practices\n\n- Use **padding** to improve readability inside elements.\n- Use **margin** to control layout flow and spacing between elements.\n- Apply `box-sizing: border-box;` to include padding and borders within the element's total width and height.\n\n### Example\n```css\n* {\n  box-sizing: border-box;\n}\n```\n\n---\n\n## Conclusion\n\nPadding and margin are essential tools in CSS for controlling spacing and layout. Mastering these properties gives you precise control over the structure and design of your web pages.\n\n> **Try it out:** Experiment with different padding and margin values to see their effect in real time!\n",
                        "unlocked": false,

                        "questions": [
                            {
                                "questionId": "q-4-4",
                                "question": "Which property sets the outermost spacing?",
                                "options": ["margin", "padding", "border-spacing"],
                                "correctAnswer": "margin",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-4-5",
                                "question": "What is the shorthand for setting all padding sides?",
                                "options": ["padding: 10px;", "padding-all: 10px;", "padding-set: 10px;"],
                                "correctAnswer": "padding: 10px;",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-4-6",
                                "question": "Which margin value centers an element horizontally?",
                                "options": ["margin: 0 auto;", "margin: auto 0;", "margin-center: true;"],
                                "correctAnswer": "margin: 0 auto;",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-4-3",
                        "title": "Borders and Outlines",
                        "content": "## Learn to Style Borders and Outlines of Elements Using CSS\n\n## Introduction\n\nBorders and outlines help highlight and define elements on a webpage. While they might look similar, they serve different purposes and offer various styling options.\n\n---\n\n## 1. **Borders** 🖊️\n\nA border is drawn *around* the padding and content of an element.\n\n### Basic Border Syntax\n```css\nelement {\n  border: 2px solid black;\n}\n```\n\n### Border Properties\n- **border-width:** Thickness of the border.\n- **border-style:** Style of the border (solid, dashed, dotted, double, groove, ridge, inset, outset, none, hidden).\n- **border-color:** Color of the border.\n\n### Example\n```css\ndiv {\n  border-width: 3px;\n  border-style: dashed;\n  border-color: blue;\n}\n```\n\n### Shorthand Property\n```css\ndiv {\n  border: 3px dashed blue;\n}\n```\n\n### Individual Sides\n```css\ndiv {\n  border-top: 2px solid red;\n  border-right: 2px solid green;\n  border-bottom: 2px solid blue;\n  border-left: 2px solid yellow;\n}\n```\n\n---\n\n## 2. **Outlines** ✏️\n\nAn outline is a line drawn *outside* the element's border to make it stand out.\n\n> **Difference:** Unlike borders, outlines do **not** take up space and do **not** affect layout.\n\n### Basic Outline Syntax\n```css\nelement {\n  outline: 2px solid red;\n}\n```\n\n### Outline Properties\n- **outline-width:** Thickness of the outline.\n- **outline-style:** Style of the outline (solid, dashed, dotted, etc.).\n- **outline-color:** Color of the outline.\n\n### Outline Offset\n- **outline-offset:** Space between the border and the outline.\n\n```css\nelement {\n  outline: 3px solid green;\n  outline-offset: 5px;\n}\n```\n\n---\n\n```css\n.button {\n  border: 2px solid blue;\n  outline: 3px dashed red;\n  outline-offset: 4px;\n  padding: 10px;\n  background-color: #f9f9f9;\n}\n```\n\nThis will create:\n- A **blue solid border**\n- A **red dashed outline** spaced 4px outside the border\n- Clear visual emphasis on the button\n\n---\n\n## Best Practices\n\n- Use **borders** for defining shapes and boxes.\n- Use **outlines** for accessibility focus indicators and highlighting elements.\n- Combine both for advanced styling effects!\n\n---\n\n## Conclusion\n\nStyling borders and outlines is a great way to enhance visual structure and accessibility. Play around with different styles, widths, and colors to see what fits your design best!\n\n> **Try it out:** Experiment with borders and outlines in your project to improve visual clarity!\n",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-4-7",
                                "question": "Which property defines the thickness of a border?",
                                "options": ["border-width", "border-thickness", "line-width"],
                                "correctAnswer": "border-width",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-4-8",
                                "question": "How do you make a dashed border?",
                                "options": ["border-style: dashed;", "border-dash: true;", "border-type: dashed;"],
                                "correctAnswer": "border-style: dashed;",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-4-9",
                                "question": "Which property adds a border outside the element’s box?",
                                "options": ["outline", "extra-border", "border-out"],
                                "correctAnswer": "outline",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-4-4",
                        "title": "Box Sizing",
                        "content": "## Understand How `box-sizing` Affects Element Dimensions\n\n## Introduction\n\nIn CSS, the **`box-sizing`** property defines how the total width and height of an element are calculated. Understanding this property helps you create layouts that behave consistently across different screen sizes.\n\n---\n\n## The Default Box Model\n\nBy default, the width and height you set for an element apply **only to the content area**. Padding and borders are added **outside** of these dimensions.\n\n### Example (Default behavior)\n```css\ndiv {\n  width: 200px;\n  padding: 20px;\n  border: 5px solid black;\n}\n```\n\n**Actual total width calculation:**\n```\n= Content width + Padding (left + right) + Border (left + right)\n= 200px + 40px + 10px\n= 250px\n```\n\n---\n\n## Values of `box-sizing`\n\n### 1. **content-box** (Default)\n- Width and height include **only** the content.\n- Padding and border are **added** outside the defined width and height.\n\n```css\nelement {\n  box-sizing: content-box;\n}\n```\n\n### 2. **border-box** (Recommended)\n- Width and height **include** content, padding, and border.\n- Prevents unexpected element sizes.\n\n```css\nelement {\n  box-sizing: border-box;\n}\n```\n\n**Total width remains exactly as specified!**\n\n---\n\n## Practical Example 💡\n\n```css\n.container {\n  width: 300px;\n  padding: 20px;\n  border: 5px solid black;\n  box-sizing: border-box;\n}\n```\n\nIn this case:\n- Total width = **300px** (includes content, padding, and border)\n\n---\n\n## Best Practice ⭐\n\nIt’s common to set `box-sizing: border-box;` globally to make layouts more predictable:\n\n```css\n* {\n  box-sizing: border-box;\n}\n```\n\nThis ensures that padding and borders are included in the element’s total width and height.\n\n---\n\n## Conclusion\n\nThe `box-sizing` property is essential for controlling how element sizes are calculated. Using `border-box` helps avoid layout issues and ensures your designs behave consistently across browsers and screen sizes.\n\n> **Try it out:** Experiment with different `box-sizing` values and see how they affect your layouts!\n",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-4-10",
                                "question": "What does box-sizing: border-box do?",
                                "options": ["Includes padding and border in width", "Excludes border from width", "Only includes margin"],
                                "correctAnswer": "Includes padding and border in width",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-4-11",
                                "question": "What is the default box-sizing value?",
                                "options": ["content-box", "border-box", "auto-box"],
                                "correctAnswer": "content-box",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-4-12",
                                "question": "Which box-sizing setting is easier for layouts?",
                                "options": ["border-box", "content-box", "margin-box"],
                                "correctAnswer": "border-box",
                                "userAnswer": ""
                            }
                        ]
                    }
                ],
                "assessment": {
                    "questions": [
                        {
                            "questionId": "assess-4-1",
                            "question": "What property adjusts spacing between elements?",
                            "options": ["margin", "padding", "spacing"],
                            "correctAnswer": "margin",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-4-2",
                            "question": "Which part of the box model comes first from inside?",
                            "options": ["Content", "Padding", "Border"],
                            "correctAnswer": "Content",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-4-3",
                            "question": "Which value of border-style creates a solid line?",
                            "options": ["solid", "line", "full"],
                            "correctAnswer": "solid",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-4-4",
                            "question": "What is the result of box-sizing: border-box?",
                            "options": ["Width includes padding and border", "Width excludes border", "Only margin counts in width"],
                            "correctAnswer": "Width includes padding and border",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-4-5",
                            "question": "Which property creates space inside the element’s border?",
                            "options": ["padding", "margin", "content"],
                            "correctAnswer": "padding",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-4-6",
                            "question": "How do you create a red solid border of 2px?",
                            "options": ["border: 2px solid red;", "border: red 2px solid;", "border: solid 2px red;"],
                            "correctAnswer": "border: 2px solid red;",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-4-7",
                            "question": "What does margin collapse mean?",
                            "options": ["Adjacent vertical margins merge", "Horizontal margins double", "All margins vanish"],
                            "correctAnswer": "Adjacent vertical margins merge",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-4-8",
                            "question": "Which shorthand sets margin for all sides?",
                            "options": ["margin: 10px;", "margin-all: 10px;", "set-margin: 10px;"],
                            "correctAnswer": "margin: 10px;",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-4-9",
                            "question": "What happens if outline-width is set to 0?",
                            "options": ["Outline is not visible", "Outline collapses", "Border disappears"],
                            "correctAnswer": "Outline is not visible",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-4-10",
                            "question": "Which box-sizing setting gives exact control over width?",
                            "options": ["border-box", "content-box", "auto"],
                            "correctAnswer": "border-box",
                            "userAnswer": ""
                        }
                    ]
                }
            }
        ,
            {
                "chapterId": "ch-5",
                "title": "Positioning and Display",
                "unlocked": false,
                "modules": [
                    {
                        "moduleId": "mod-5-1",
                        "title": "CSS Position Property",
                        "content": "## Understand How Different Position Values Affect Layout\n\n## Introduction\n\nThe **`position`** property in CSS controls how an element is placed in the document flow. Different values like **static**, **relative**, **absolute**, **fixed**, and **sticky** affect an element’s positioning behavior and layout relationship with other elements.\n\n---\n\n## 1. Static (Default)\n\n- **Default position for all elements.**\n- Elements follow the normal document flow.\n- **Top, bottom, left, right** properties have no effect.\n\n```css\nelement {\n  position: static;\n}\n```\n\n📌 **Use case:** General flow of elements, no special positioning needed.\n\n---\n\n## 2. Relative\n\n- Positioned **relative to its normal position**.\n- It stays in the flow but can be shifted using **top, bottom, left, right**.\n\n```css\nelement {\n  position: relative;\n  top: 10px;\n  left: 20px;\n}\n```\n\n📌 **Use case:** Slightly adjust an element's position without removing it from the flow.\n\n---\n\n## 3. Absolute\n\n- Positioned **relative to the nearest positioned ancestor** (not static).\n- If no positioned ancestor, it uses the **document body**.\n- Element is **removed** from the normal flow.\n\n```css\nelement {\n  position: absolute;\n  top: 0;\n  left: 0;\n}\n```\n\n📌 **Use case:** Precise placement of elements, overlays, tooltips.\n\n---\n\n## 4. Fixed\n\n- Positioned **relative to the viewport**.\n- **Does not move** when the page is scrolled.\n\n```css\nelement {\n  position: fixed;\n  bottom: 0;\n  right: 0;\n}\n```\n\n📌 **Use case:** Sticky headers, floating buttons, persistent footers.\n\n---\n\n## 5. Sticky\n\n- Acts like **relative** until a certain scroll position, then behaves like **fixed**.\n- Useful for elements that stick when scrolling past them.\n\n```css\nelement {\n  position: sticky;\n  top: 0;\n}\n```\n\n📌 **Use case:** Sticky navigation menus or headings.\n\n---\n\n## Conclusion\n\nUnderstanding these position values allows you to create flexible, responsive layouts. Experiment with each to see how they interact with the document flow and other elements!\n\n> 💡 **Tip:** Use browser dev tools to play with position values live and observe their effects!\n",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-5-1",
                                "question": "Which is the default position value in CSS?",
                                "options": ["static", "relative", "absolute"],
                                "correctAnswer": "static",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-5-2",
                                "question": "Which position value keeps an element fixed at a location during scroll?",
                                "options": ["fixed", "sticky", "absolute"],
                                "correctAnswer": "fixed",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-5-3",
                                "question": "What position value allows positioning based on the nearest ancestor?",
                                "options": ["absolute", "relative", "static"],
                                "correctAnswer": "absolute",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-5-2",
                        "title": "Display Property",
                        "content": "## Explore How Display Values Affect Elements\n\n## Introduction\n\nThe **`display`** property in CSS defines how an element is displayed in the document layout. Different values like **block**, **inline**, **inline-block**, **none**, and **flex** change how elements behave and interact with others.\n\n---\n\n## 1. Block\n\n- The element starts on a **new line**.\n- Takes up the **full width** available.\n- Respect width and height properties.\n\n```css\nelement {\n  display: block;\n}\n```\n\n📌 **Examples:** `<div>`, `<p>`, `<h1>` by default.\n\n📌 **Use case:** Layout containers, sections, wrappers.\n\n---\n\n## 2. Inline\n\n- Does **not start** on a new line.\n- Takes up **only as much width** as necessary.\n- Ignores width and height properties.\n\n```css\nelement {\n  display: inline;\n}\n```\n\n📌 **Examples:** `<span>`, `<a>`, `<strong>` by default.\n\n📌 **Use case:** Styling pieces of text within paragraphs.\n\n---\n\n## 3. Inline-block\n\n- Combines features of **inline** and **block** elements.\n- Does **not break** onto a new line.\n- **Respects width and height** properties.\n\n```css\nelement {\n  display: inline-block;\n  width: 100px;\n  height: 50px;\n}\n```\n\n📌 **Use case:** Buttons, menu items, or any element needing inline placement but block features.\n\n---\n\n## 4. None\n\n- **Completely removes** the element from the document flow.\n- The element is **not visible**, and space is **not reserved** for it.\n\n```css\nelement {\n  display: none;\n}\n```\n\n📌 **Use case:** Hiding elements dynamically (e.g., using JavaScript), dropdowns, modals before showing.\n\n---\n\n## 5. Flex\n\n- Turns the container into a **flex container**.\n- Provides **flexible layouts** with control over alignment and spacing.\n\n```css\ncontainer {\n  display: flex;\n}\n```\n\n📌 **Use case:** Responsive layouts, navigation bars, grids.\n\n---\n\n## Conclusion\n\nMastering the **display** property helps you control how elements stack, flow, and interact within your layout. Play with different values to see immediate changes in your web page structure!\n\n> 💡 **Tip:** Combine display values with **positioning** and **box model** properties for advanced layouts!\n",

                    "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-5-4",
                                "question": "Which display value places elements on a new line?",
                                "options": ["block", "inline", "inline-block"],
                                "correctAnswer": "block",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-5-5",
                                "question": "Which display value removes the element from the layout?",
                                "options": ["none", "hidden", "invisible"],
                                "correctAnswer": "none",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-5-6",
                                "question": "Which display value supports width/height while staying inline?",
                                "options": ["inline-block", "inline", "block"],
                                "correctAnswer": "inline-block",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-5-3",
                        "title": "Visibility and Z-Index",
                        "content": "## Control Element Visibility and Stacking Order\n\n## Introduction\n\nIn CSS, you can control whether elements are visible and how they stack using the **`visibility`** and **`z-index`** properties. These help in designing dynamic layouts and controlling overlapping elements.\n\n---\n\n## 1. Visibility Property\n\nThe **`visibility`** property controls the visibility of an element **without removing it from the layout flow**.\n\n### Values:\n\n- **visible** *(default)*: Element is visible.\n- **hidden**: Element is invisible, but space is still reserved.\n\n```css\nelement {\n  visibility: hidden;\n}\n```\n\n📌 **Use case:** Temporarily hiding elements while keeping their space occupied.\n\n### Example:\n```html\n<p style=\"visibility: hidden;\">This paragraph is hidden but still takes up space.</p>\n```\n\n---\n\n## 2. z-index Property\n\nThe **`z-index`** property controls the **stacking order** of overlapping elements.\n\n- Higher **z-index** values are placed **on top**.\n- Works only on **positioned elements** (position: relative, absolute, fixed, sticky).\n\n```css\nelement {\n  position: relative;\n  z-index: 10;\n}\n```\n\n📌 **Use case:** Layering modals, tooltips, and overlapping sections.\n\n### Example:\n```html\n<div style=\"position: relative; z-index: 1; background: lightblue;\">Background Element</div>\n<div style=\"position: relative; z-index: 2; background: lightcoral;\">Foreground Element</div>\n```\n\n### Important:\n- Negative values are allowed: `z-index: -1;`\n- Default value is **auto**, which follows HTML order.\n\n---\n\n## Tips 💡\n\n- Use **visibility: hidden;** when you want to hide an element but keep its layout.\n- Use **z-index** with care to avoid confusing layer orders.\n- Combine **positioning** and **z-index** for complex layouts like dropdowns and modals.\n\n---\n\n## Conclusion\n\nUnderstanding **visibility** and **z-index** allows you to build advanced layouts, control layers, and create interactive UI components. Practice stacking and hiding elements to create cleaner, well-organized web pages!\n\n> 💡 **Pro Tip:** Test `z-index` values in the browser dev tools to debug layering issues quickly!\n",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-5-7",
                                "question": "Which property hides an element but keeps its space?",
                                "options": ["visibility: hidden", "display: none", "opacity: 0"],
                                "correctAnswer": "visibility: hidden",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-5-8",
                                "question": "Which property removes an element from the document flow?",
                                "options": ["display: none", "visibility: hidden", "opacity: 0"],
                                "correctAnswer": "display: none",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-5-9",
                                "question": "Which property controls the stack order of overlapping elements?",
                                "options": ["z-index", "stack-order", "layer"],
                                "correctAnswer": "z-index",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-5-4",
                        "title": "Float and Clear",
                        "content": "## Understand Float-Based Layouts and How to Clear Floated Elements\n\n## Introduction\n\nBefore Flexbox and Grid, **float-based layouts** were widely used for structuring web pages. The **float** property allows elements to be placed side by side, but it requires proper clearing to prevent layout issues.\n\n---\n\n## 1. What is Float?\n\nThe **float** property places an element to the left or right, allowing inline content to wrap around it.\n\n### Syntax:\n```css\nelement {\n  float: left; /* or right */\n}\n```\n\n### Values:\n- **left**: Floats the element to the left.\n- **right**: Floats the element to the right.\n- **none** *(default)*: No float.\n- **inherit**: Inherits the float value from its parent.\n\n### Example:\n```html\n<img src=\"image.jpg\" style=\"float: left; margin-right: 10px;\" alt=\"Sample Image\">\n<p>This text will wrap around the floated image.</p>\n```\n\n📌 **Use case:** Creating sidebars, text wrapping around images.\n\n---\n\n## 2. Common Issue with Floats\n\nFloated elements are **removed from the normal document flow**, which can cause parent containers to collapse if they contain only floated children.\n\n### Problem Example:\n```html\n<div style=\"border: 1px solid #000;\">\n  <div style=\"float: left; width: 50%;\">Left</div>\n  <div style=\"float: right; width: 50%;\">Right</div>\n</div>\n<!-- The parent div collapses because it has only floated children -->\n```\n\n---\n\n## 3. Clearing Floats\n\n### Solution 1: Clearfix Hack\nAdd a pseudo-element to clear the float.\n\n```css\n.clearfix::after {\n  content: \"\";\n  display: table;\n  clear: both;\n}\n```\n\n### Apply it to the parent container:\n```html\n<div class=\"clearfix\">\n  <div style=\"float: left;\">Left</div>\n  <div style=\"float: right;\">Right</div>\n</div>\n```\n\n### Solution 2: Use the clear property\nApply **clear** to the next element after the floats.\n\n```css\n.next-element {\n  clear: both;\n}\n```\n\n### Solution 3: Overflow Hack\nGive the parent container an overflow value other than `visible`.\n\n```css\n.parent {\n  overflow: hidden;\n}\n```\n\n📌 **Use case:** Prevent parent containers from collapsing when they contain floated children.\n\n---\n\n## Tips 💡\n\n- Floats were originally designed for **text flow**, not full layouts.\n- Modern layout systems like **Flexbox** and **Grid** are preferred for complex designs.\n- Use clearfix when dealing with legacy float-based layouts.\n\n---\n\n## Conclusion\n\nFloat-based layouts are an essential part of CSS history. While modern methods are more robust, understanding floats and how to clear them helps maintain and debug older projects effectively.\n\n> 💡 **Pro Tip:** When possible, prefer Flexbox or Grid for layout tasks. Use floats for specific purposes like wrapping text around images!\n",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-5-10",
                                "question": "Which property allows elements to wrap around floated content?",
                                "options": ["float", "wrap", "align"],
                                "correctAnswer": "float",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-5-11",
                                "question": "What does clear: both do?",
                                "options": ["Stops wrapping around floated elements", "Adds margin to both sides", "Aligns center"],
                                "correctAnswer": "Stops wrapping around floated elements",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-5-12",
                                "question": "What layout issue often occurs when elements are floated without clearing?",
                                "options": ["Collapsing parent", "Overlap", "Border doubling"],
                                "correctAnswer": "Collapsing parent",
                                "userAnswer": ""
                            }
                        ]
                    }
                ],
                "assessment": {
                    "questions": [
                        {
                            "questionId": "assess-5-1",
                            "question": "Which position value refers to the element's normal flow?",
                            "options": ["static", "relative", "absolute"],
                            "correctAnswer": "static",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-5-2",
                            "question": "What display value is commonly used for navigation bars?",
                            "options": ["flex", "inline", "block"],
                            "correctAnswer": "flex",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-5-3",
                            "question": "How can you prevent overlap using stacking?",
                            "options": ["Use z-index", "Use margin", "Use position: static"],
                            "correctAnswer": "Use z-index",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-5-4",
                            "question": "Which value of visibility hides the element but reserves space?",
                            "options": ["hidden", "none", "collapse"],
                            "correctAnswer": "hidden",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-5-5",
                            "question": "What float value places an element to the left?",
                            "options": ["float: left", "float: right", "align: left"],
                            "correctAnswer": "float: left",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-5-6",
                            "question": "How can you fix collapsing parent issue with float?",
                            "options": ["Use clear fix", "Add margin", "Set display: block"],
                            "correctAnswer": "Use clear fix",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-5-7",
                            "question": "Which position makes element scroll with the page?",
                            "options": ["absolute", "static", "relative"],
                            "correctAnswer": "relative",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-5-8",
                            "question": "Which display property completely removes an element from the DOM flow?",
                            "options": ["display: none", "visibility: hidden", "opacity: 0"],
                            "correctAnswer": "display: none",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-5-9",
                            "question": "How to show inline elements with block features?",
                            "options": ["display: inline-block", "inline-flex", "block-inline"],
                            "correctAnswer": "display: inline-block",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-5-10",
                            "question": "What property must be used with position: absolute to work as expected?",
                            "options": ["A positioned ancestor", "z-index", "display: block"],
                            "correctAnswer": "A positioned ancestor",
                            "userAnswer": ""
                        }
                    ]
                }
            }
        ,
            {
                "chapterId": "ch-6",
                "title": "CSS Flexbox and Grid",
                "unlocked": false,
                "modules": [
                    {
                        "moduleId": "mod-6-1",
                        "title": "Introduction to Flexbox",
                        "content": "## Learn How Flexbox Simplifies Layout Creation\n\n## Introduction\n\n**Flexbox** (Flexible Box Layout) is a powerful layout module in CSS that makes it easy to design flexible and responsive layouts. It simplifies alignment, spacing, and distribution of elements inside a container, even when their sizes are dynamic.\n\n---\n\n## 1. Setting Up Flexbox\n\nTo start using Flexbox, apply **display: flex;** to a container.\n\n```css\n.container {\n  display: flex;\n}\n```\n\nAll direct child elements become **flex items**.\n\n---\n\n## 2. Main Properties of Flexbox\n\n### A. Container Properties (Parent)\n\n- **flex-direction**: Defines the direction of items.\n  - `row` *(default)*: Left to right.\n  - `column`: Top to bottom.\n\n```css\n.container {\n  flex-direction: row; /* or column */\n}\n```\n\n- **justify-content**: Aligns items along the main axis.\n  - `flex-start`, `flex-end`, `center`, `space-between`, `space-around`, `space-evenly`\n\n```css\n.container {\n  justify-content: center;\n}\n```\n\n- **align-items**: Aligns items along the cross axis.\n  - `stretch`, `flex-start`, `flex-end`, `center`, `baseline`\n\n```css\n.container {\n  align-items: center;\n}\n```\n\n- **flex-wrap**: Allows items to wrap to the next line.\n  - `nowrap` *(default)*, `wrap`, `wrap-reverse`\n\n```css\n.container {\n  flex-wrap: wrap;\n}\n```\n\n### B. Item Properties (Children)\n\n- **flex-grow**: Item's ability to grow to fill space.\n\n```css\n.item {\n  flex-grow: 1;\n}\n```\n\n- **flex-shrink**: Item's ability to shrink when necessary.\n\n```css\n.item {\n  flex-shrink: 1;\n}\n```\n\n- **flex-basis**: Initial size of an item before space distribution.\n\n```css\n.item {\n  flex-basis: 200px;\n}\n```\n\n- **flex (shorthand)**:\n\n```css\n.item {\n  flex: 1 1 200px; /* grow shrink basis */\n}\n```\n\n- **align-self**: Overrides align-items for a single item.\n\n```css\n.item {\n  align-self: center;\n}\n```\n\n---\n\n## 3. Example Layout\n\n```html\n<div class=\"container\">\n  <div class=\"item\">Item 1</div>\n  <div class=\"item\">Item 2</div>\n  <div class=\"item\">Item 3</div>\n</div>\n```\n\n```css\n.container {\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n  height: 200px;\n}\n\n.item {\n  background: lightblue;\n  padding: 20px;\n}\n```\n\n---\n\n## 4. Benefits of Flexbox ✅\n\n- Easy horizontal and vertical centering\n- Flexible item sizing\n- Better control over spacing and alignment\n- Supports responsive designs\n\n---\n\n## Tips 💡\n\n- Use **flex-direction: column;** for vertical layouts.\n- Combine **justify-content** and **align-items** for perfect centering.\n- Remember: Flexbox is **one-dimensional** (row or column, not both).\n\n---\n\n## Conclusion\n\nFlexbox provides a powerful, easy-to-use system for creating dynamic layouts. Whether you're aligning items, distributing space, or making designs responsive, Flexbox is a go-to tool for modern CSS layout creation.\n\n> 💡 **Pro Tip:** Practice with live coding tools to see Flexbox properties in action instantly!\n",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-6-1",
                                "question": "What is the main axis in Flexbox?",
                                "options": ["The horizontal axis", "The vertical axis", "The z-axis"],
                                "correctAnswer": "The horizontal axis",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-6-2",
                                "question": "Which property defines the flex direction?",
                                "options": ["flex-direction", "flex-wrap", "align-items"],
                                "correctAnswer": "flex-direction",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-6-3",
                                "question": "Which property aligns items horizontally?",
                                "options": ["justify-content", "align-items", "flex-wrap"],
                                "correctAnswer": "justify-content",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-6-2",
                        "title": "Flexbox Properties",
                        "content": "## Explore Flexbox Properties: justify-content, align-items, align-content, flex-wrap, and More\n\n## Introduction\n\nFlexbox comes with powerful properties to control layout and alignment. Let’s explore some of the most important ones: **justify-content, align-items, align-content, flex-wrap**, and more!\n\n---\n\n## 1. justify-content 🎯\n\nAligns items along the **main axis** (horizontal in row, vertical in column).\n\nOptions:\n- `flex-start`: Items at the start.\n- `flex-end`: Items at the end.\n- `center`: Items in the center.\n- `space-between`: Equal space between items.\n- `space-around`: Equal space around items.\n- `space-evenly`: Equal space between and around items.\n\n```css\n.container {\n  display: flex;\n  justify-content: center;\n}\n```\n\n---\n\n## 2. align-items 📦\n\nAligns items along the **cross axis**.\n\nOptions:\n- `stretch` *(default)*: Items stretch to fill container.\n- `flex-start`: Items at the start of cross axis.\n- `flex-end`: Items at the end of cross axis.\n- `center`: Items in the center.\n- `baseline`: Items align by their text baseline.\n\n```css\n.container {\n  display: flex;\n  align-items: center;\n}\n```\n\n---\n\n## 3. align-content 🎨\n\nAligns **multiple lines** of items when there is wrapping (works only with `flex-wrap: wrap`).\n\nOptions:\n- `flex-start`, `flex-end`, `center`, `space-between`, `space-around`, `stretch`\n\n```css\n.container {\n  display: flex;\n  flex-wrap: wrap;\n  align-content: space-between;\n}\n```\n\n---\n\n## 4. flex-wrap 🔄\n\nControls whether flex items stay on a single line or wrap onto multiple lines.\n\nOptions:\n- `nowrap` *(default)*: All items stay in one line.\n- `wrap`: Items wrap to the next line.\n- `wrap-reverse`: Items wrap in reverse order.\n\n```css\n.container {\n  display: flex;\n  flex-wrap: wrap;\n}\n```\n\n---\n\n## 5. flex-direction ↔️ ↕️\n\nSets the direction of flex items.\n\nOptions:\n- `row` *(default)*: Horizontal, left to right.\n- `row-reverse`: Horizontal, right to left.\n- `column`: Vertical, top to bottom.\n- `column-reverse`: Vertical, bottom to top.\n\n```css\n.container {\n  display: flex;\n  flex-direction: column;\n}\n```\n\n---\n\n## 6. gap 🧩\n\nAdds space between flex items without margin hacks!\n\n```css\n.container {\n  display: flex;\n  gap: 20px;\n}\n```\n\n---\n\n## 7. align-self (Individual Item Alignment) 🎯\n\nOverrides `align-items` for a single flex item.\n\n```css\n.item {\n  align-self: flex-end;\n}\n```\n\n---\n\n## Example Layout\n\n```html\n<div class=\"container\">\n  <div class=\"item\">Item 1</div>\n  <div class=\"item\">Item 2</div>\n  <div class=\"item\">Item 3</div>\n</div>\n```\n\n```css\n.container {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-evenly;\n  align-items: center;\n  align-content: center;\n  gap: 15px;\n  height: 300px;\n}\n\n.item {\n  background: lightblue;\n  padding: 20px;\n  width: 100px;\n}\n```\n\n---\n\n## Conclusion 🚀\n\nWith these Flexbox properties, you can create powerful, flexible layouts easily. Experiment with combinations to master responsive design!\n\n> 💡 **Pro Tip:** Use browser developer tools to visualize flex properties in real-time.\n",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-6-4",
                                "question": "Which property aligns items along the cross axis?",
                                "options": ["align-items", "justify-content", "flex-grow"],
                                "correctAnswer": "align-items",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-6-5",
                                "question": "Which property distributes extra space in the flex container?",
                                "options": ["justify-content", "align-content", "flex-grow"],
                                "correctAnswer": "flex-grow",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-6-6",
                                "question": "What does flex-wrap: wrap do?",
                                "options": ["Wraps items to the next line", "Hides overflow", "Aligns items right"],
                                "correctAnswer": "Wraps items to the next line",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-6-3",
                        "title": "CSS Grid Basics",
                        "content": "## Understand CSS Grid: Two-Dimensional Layout Control 🎨\n\n## Introduction\n\nCSS Grid is a powerful layout system designed to handle both **rows** and **columns**. Unlike Flexbox (which is one-dimensional), Grid provides complete two-dimensional control, making it perfect for complex web layouts.\n\n---\n\n## 1. Defining a Grid Container 📦\n\nStart by declaring a container as a grid using `display: grid;`.\n\n```css\n.container {\n  display: grid;\n}\n```\n\n---\n\n## 2. Setting Rows and Columns 📏\n\nUse `grid-template-rows` and `grid-template-columns` to define the number and size of rows and columns.\n\n```css\n.container {\n  display: grid;\n  grid-template-columns: 100px 200px;\n  grid-template-rows: 150px 150px;\n}\n```\n\n> 🧩 This creates a grid with 2 columns and 2 rows.\n\n---\n\n## 3. Using the fr Unit 🌟\n\nThe `fr` unit represents a fraction of the available space.\n\n```css\n.container {\n  display: grid;\n  grid-template-columns: 1fr 2fr;\n}\n```\n\n> ✅ 1st column: 1 fraction, 2nd column: 2 fractions.\n\n---\n\n## 4. Placing Items on the Grid 🎯\n\nItems automatically place themselves in grid cells, but you can manually control this using:\n\n```css\n.item1 {\n  grid-column: 1 / 3;\n  grid-row: 1 / 2;\n}\n```\n\n- `grid-column: start / end;`\n- `grid-row: start / end;`\n\n---\n\n## 5. Grid Gap 🧩\n\nControl space between rows and columns using `gap`:\n\n```css\n.container {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 20px;\n}\n```\n\n---\n\n## 6. Repeat Notation 🎉\n\nFor cleaner code, use `repeat()` to define repeating rows or columns.\n\n```css\n.container {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n}\n```\n\n> 🔄 This creates 3 equal-width columns.\n\n---\n\n## 7. Named Grid Lines 🏷️\n\nYou can name grid lines for better readability:\n\n```css\n.container {\n  display: grid;\n  grid-template-columns: [start] 1fr [middle] 2fr [end];\n}\n```\n\n---\n\n## 8. Implicit Rows and Columns 🛠️\n\nIf you don't define enough rows or columns, Grid auto-creates them.\n\nControl their size with:\n\n```css\n.container {\n  grid-auto-rows: 100px;\n}\n```\n\n---\n\n## 9. Grid Template Areas 🗺️\n\nDefine areas for a more visual layout approach.\n\n```css\n.container {\n  display: grid;\n  grid-template-areas:\n    \"header header\"\n    \"sidebar main\"\n    \"footer footer\";\n  grid-template-columns: 1fr 3fr;\n}\n\n.header { grid-area: header; }\n.sidebar { grid-area: sidebar; }\n.main { grid-area: main; }\n.footer { grid-area: footer; }\n```\n\n---\n\n## Example Layout 📋\n\n```html\n<div class=\"container\">\n  <div class=\"item\">Item 1</div>\n  <div class=\"item\">Item 2</div>\n  <div class=\"item\">Item 3</div>\n</div>\n```\n\n```css\n.container {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: 100px 100px;\n  gap: 10px;\n}\n\n.item {\n  background: lightcoral;\n  padding: 20px;\n}\n```\n\n---\n\n## Summary ✍️\n\n| Property                    | Description                            |\n|-----------------------------|----------------------------------------|\n| display: grid               | Define a grid container                |\n| grid-template-rows/columns  | Define rows and columns                |\n| grid-column / grid-row      | Place items within the grid            |\n| gap                         | Space between rows and columns         |\n| repeat()                    | Repeat rows or columns                 |\n| grid-template-areas         | Name and place areas of the layout     |\n\n---\n\n## Conclusion 🚀\n\nCSS Grid provides full control over rows and columns, making complex layouts simple and responsive. Combine Grid with Flexbox for powerful web designs!\n\n> 💡 **Pro Tip:** Use browser dev tools to visualize the grid layout in real-time.\n",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-6-7",
                                "question": "Which property defines the grid columns?",
                                "options": ["grid-template-columns", "grid-auto-flow", "column-count"],
                                "correctAnswer": "grid-template-columns",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-6-8",
                                "question": "Which value in grid makes items auto-flow row by row?",
                                "options": ["grid-auto-flow: row", "grid-template-columns", "grid-gap"],
                                "correctAnswer": "grid-auto-flow: row",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-6-9",
                                "question": "Which property sets the space between grid rows and columns?",
                                "options": ["gap", "margin", "padding"],
                                "correctAnswer": "gap",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-6-4",
                        "title": "Grid Item Placement",
                        "content": "## Control Item Positions Using `grid-row`, `grid-column`, and `grid-area` 🎨\n\nCSS Grid allows precise control of item placement within a grid using properties like `grid-row`, `grid-column`, and `grid-area`. Let’s understand how to use them!\n\n---\n\n## 1. `grid-column` 📏\n\nSpecifies where an item should start and end horizontally.\n\n```css\n.item1 {\n  grid-column: 1 / 3; /* Starts at line 1, ends before line 3 */\n}\n```\n\n### Shortcut:\n```css\n.item1 {\n  grid-column: span 2; /* Spans 2 columns */\n}\n```\n\n---\n\n## 2. `grid-row` 📏\n\nSpecifies where an item should start and end vertically.\n\n```css\n.item2 {\n  grid-row: 2 / 4; /* Starts at row line 2, ends before line 4 */\n}\n```\n\n### Shortcut:\n```css\n.item2 {\n  grid-row: span 2; /* Spans 2 rows */\n}\n```\n\n---\n\n## 3. `grid-area` 🗺️\n\nDefines both `grid-row` and `grid-column` in one line.\n\n```css\n.item3 {\n  grid-area: 2 / 1 / 4 / 3;\n  /* grid-area: row-start / column-start / row-end / column-end */\n}\n```\n\n### Example Breakdown:\n- Row start: 2\n- Column start: 1\n- Row end: 4\n- Column end: 3\n\n---\n\n## 4. Practical Example 🧩\n\n```html\n<div class=\"container\">\n  <div class=\"item1\">Item 1</div>\n  <div class=\"item2\">Item 2</div>\n  <div class=\"item3\">Item 3</div>\n</div>\n```\n\n```css\n.container {\n  display: grid;\n  grid-template-columns: repeat(4, 100px);\n  grid-template-rows: repeat(4, 100px);\n  gap: 10px;\n}\n\n.item1 {\n  background: lightblue;\n  grid-column: 1 / 3;\n}\n\n.item2 {\n  background: lightgreen;\n  grid-row: 2 / 4;\n}\n\n.item3 {\n  background: lightcoral;\n  grid-area: 3 / 3 / 5 / 5;\n}\n```\n\n---\n\n## 5. Visual Representation 🖼️\n\n```\n| Item 1 | Item 1 |       |       |\n| Item 2 |        |       |       |\n| Item 2 |        | Item 3 | Item 3 |\n|        |        | Item 3 | Item 3 |\n```\n\n---\n\n## Conclusion \n\nBy mastering `grid-column`, `grid-row`, and `grid-area`, you gain precise control over your grid layout, allowing for creative and efficient designs!\n\n> 💡 **Pro Tip:** Use your browser's developer tools to visualize grid lines and positions for easier adjustments.\n",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-6-10",
                                "question": "Which property allows spanning multiple grid columns?",
                                "options": ["grid-column", "grid-row", "grid-gap"],
                                "correctAnswer": "grid-column",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-6-11",
                                "question": "What is used to define named grid areas?",
                                "options": ["grid-template-areas", "grid-names", "area-id"],
                                "correctAnswer": "grid-template-areas",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-6-12",
                                "question": "How do you assign a grid item to a named area?",
                                "options": ["grid-area", "place-area", "grid-id"],
                                "correctAnswer": "grid-area",
                                "userAnswer": ""
                            }
                        ]
                    }
                ],
                "assessment": {
                    "questions": [
                        {
                            "questionId": "assess-6-1",
                            "question": "Which Flexbox property sets the direction of items?",
                            "options": ["flex-direction", "flex-wrap", "justify-content"],
                            "correctAnswer": "flex-direction",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-6-2",
                            "question": "What property helps distribute space between flex items?",
                            "options": ["justify-content", "align-items", "flex-grow"],
                            "correctAnswer": "justify-content",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-6-3",
                            "question": "Which layout allows two-dimensional control?",
                            "options": ["CSS Grid", "Flexbox", "Inline-block"],
                            "correctAnswer": "CSS Grid",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-6-4",
                            "question": "How do you create a grid with three equal columns?",
                            "options": ["grid-template-columns: 1fr 1fr 1fr;", "columns: 3;", "column-count: 3;"],
                            "correctAnswer": "grid-template-columns: 1fr 1fr 1fr;",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-6-5",
                            "question": "What does grid-area property do?",
                            "options": ["Assigns item to a named area", "Creates grid gaps", "Adds spacing"],
                            "correctAnswer": "Assigns item to a named area",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-6-6",
                            "question": "Which value will wrap flex items to the next line?",
                            "options": ["wrap", "inline", "grow"],
                            "correctAnswer": "wrap",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-6-7",
                            "question": "How do you control vertical alignment in Flexbox?",
                            "options": ["align-items", "justify-content", "flex-direction"],
                            "correctAnswer": "align-items",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-6-8",
                            "question": "Which property defines space between rows and columns in a grid?",
                            "options": ["gap", "margin", "border-spacing"],
                            "correctAnswer": "gap",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-6-9",
                            "question": "What does grid-template-areas do?",
                            "options": ["Defines named layout regions", "Sets rows", "Adds spacing"],
                            "correctAnswer": "Defines named layout regions",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-6-10",
                            "question": "Which Flexbox property controls wrapping behavior?",
                            "options": ["flex-wrap", "align-content", "align-items"],
                            "correctAnswer": "flex-wrap",
                            "userAnswer": ""
                        }
                    ]
                }
            }
        ]
    },
    {
        "id": "course-6",
        "title": "C Language Course",
        "description": "Master the fundamentals of C programming including syntax, data types, control structures, functions, arrays, pointers, and memory management.",
        "chapters": [
            {
                "chapterId": "ch-1",
                "title": "Introduction to C Programming",
                "unlocked": true,
                "modules": [
                    {
                        "moduleId": "mod-1-1",
                        "title": "History and Features of C",
                        "content": "## Origin and Key Features of the C Programming Language ️\n\n## Origin of C Programming Language \n\nThe C programming language was developed in the early 1970s by **Dennis Ritchie** at **Bell Labs**. It was created as an improvement over the B language, which itself was derived from BCPL (Basic Combined Programming Language).\n\nC was designed primarily to help with the development of the UNIX operating system. In fact, UNIX was one of the first major projects written in C, showcasing its power and flexibility.\n\nC combined the efficiency of assembly language with the flexibility of higher-level languages, making it a favorite among system programmers and application developers alike.\n\n## Key Features of C Programming Language \n\n### 1. **Simple and Efficient**\nC is a relatively simple language with a clear and concise syntax. It provides low-level access to memory, making it suitable for system-level programming.\n\n### 2. **High Performance**\nC code runs very efficiently because it is compiled directly into machine code. This makes it ideal for applications where performance is critical.\n\n### 3. **Portability**\nC programs can be written on one machine and compiled and executed on another with minimal modifications. This portability made it popular for developing cross-platform applications.\n\n### 4. **Rich Library Support**\nC provides a standard library with a wide range of built-in functions for input/output, string handling, memory allocation, and more.\n\n### 5. **Extensibility**\nC allows programmers to create their own functions and libraries, extending its capabilities as needed.\n\n### 6. **Structured Programming Language**\nC supports structured programming, which means writing code in the form of functions and procedures. This approach enhances clarity and maintainability.\n\n### 7. **Low-level Manipulation**\nC provides low-level access to memory through the use of pointers, allowing direct interaction with hardware and memory addresses.\n\n### 8. **Wide Range of Applications**\nFrom system software like operating systems and compilers to embedded systems and high-performance applications, C is used in a variety of domains.\n\n### 9. **Foundation for Other Languages**\nMany modern programming languages, such as C++, Java, and even Python, have been influenced by the syntax and structure of C.\n\n## Conclusion \n\nC continues to be a foundational language in computer science and software development. Its blend of power, performance, and simplicity ensures its relevance even decades after its creation. Whether you're building an operating system, an embedded device, or learning programming fundamentals, C is an excellent language to master.\n\n> \"C is quirky, flawed, and an enormous success.\" — Dennis Ritchie",
                        "unlocked": true,
                        "questions": [
                            {
                                "questionId": "q-1-1",
                                "question": "Who developed the C programming language?",
                                "options": ["Dennis Ritchie", "Bjarne Stroustrup", "James Gosling"],
                                "correctAnswer": "Dennis Ritchie",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-1-2",
                                "question": "In which year was the C language developed?",
                                "options": ["1972", "1983", "1995"],
                                "correctAnswer": "1972",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-1-3",
                                "question": "Which of the following is a feature of C?",
                                "options": ["Object-Oriented", "Platform Dependent", "High-Level only"],
                                "correctAnswer": "Platform Dependent",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-1-2",
                        "title": "Structure of a C Program",
                        "content": "## Structure and Basic Components of a C Program \n\nLet’s understand the building blocks of a simple C program!\n\n---\n\n## 1. Basic Structure of a C Program 🧩\n\n```c\n#include <stdio.h> // Preprocessor Directive\n\n// Function Declaration\nint main() {\n    // Variable Declaration\n    int number = 10;\n\n    // Output Statement\n    printf(\"Number is: %d\", number);\n\n    return 0; // Return Statement\n}\n```\n\n---\n\n## 2. Components Explained 📝\n\n### 1. **Preprocessor Directive**\n- Lines starting with `#` are instructions to the compiler.\n- Example: `#include <stdio.h>` includes the standard input/output library.\n\n### 2. **Main Function**\n- Every C program must have a `main()` function.\n- It's the entry point where the program execution starts.\n\n```c\nint main() {\n    // code\n}\n```\n\n### 3. **Variable Declaration**\n- Variables are used to store data.\n\n```c\nint number = 10;\n```\n\n### 4. **Statements and Expressions**\n- Instructions that perform actions.\n\n```c\nprintf(\"Hello World\");\n```\n\n### 5. **Comments**\n- Used for explanations within the code.\n\n```c\n// This is a single-line comment\n/* This is a multi-line comment */\n```\n\n### 6. **Return Statement**\n- Ends the `main()` function and returns a value to the operating system.\n\n```c\nreturn 0;\n```\n\n---\n\n## 3. Sample Program ✅\n\n```c\n#include <stdio.h>\n\nint main() {\n    int a = 5;\n    int b = 10;\n    int sum = a + b;\n\n    printf(\"Sum is: %d\", sum);\n\n    return 0;\n}\n```\n\n**Output:**\n```\nSum is: 15\n```\n\n---\n\n## 4. Summary ✍️\n\n- **#include** — includes libraries\n- **main()** — starting point of the program\n- **Variables** — store data\n- **printf()** — prints output\n- **return 0;** — ends the program\n\n---\n\n## Conclusion 🚀\n\nUnderstanding the structure helps you write and debug C programs easily. Once you know these components, you can build more complex programs step by step!\n\n> 💡 **Tip:** Practice writing simple C programs to strengthen your understanding!\n",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-1-4",
                                "question": "Which function is mandatory in a C program?",
                                "options": ["main()", "start()", "init()"],
                                "correctAnswer": "main()",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-1-5",
                                "question": "Which symbol is used to end a statement in C?",
                                "options": [";", ":", "."],
                                "correctAnswer": ";",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-1-6",
                                "question": "What is the extension of a C source file?",
                                "options": [".c", ".cpp", ".java"],
                                "correctAnswer": ".c",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-1-3",
                        "title": "Compiling and Executing C Programs",
                        "content": "## Compilation and Execution Process in C\n\nLet’s explore how a C program is transformed from source code to running application!\n\n---\n\n## 1. The Journey of a C Program \n\nThe process involves multiple steps:\n\n1. **Writing the Code** — `.c` file\n2. **Preprocessing** — Handles `#include`, `#define`, etc.\n3. **Compilation** — Converts to assembly code\n4. **Assembly** — Converts to machine code\n5. **Linking** — Connects code with libraries\n6. **Execution** — Running the final program\n\n---\n\n## 2. Step-by-Step Breakdown \n\n### 1. **Writing the Code**\n- You write your program in a `.c` file.\n\n```c\n#include <stdio.h>\n\nint main() {\n    printf(\"Hello, World!\\n\");\n    return 0;\n}\n```\n\n---\n\n### 2. **Preprocessing** \n- Handles all preprocessor commands like `#include`, `#define`, etc.\n- Output: Modified source code.\n\nCommand:\n```bash\ngcc -E program.c -o program.i\n```\n\n---\n\n### 3. **Compilation** \n- Converts preprocessed code to assembly code.\n- Output: `.s` file.\n\nCommand:\n```bash\ngcc -S program.i -o program.s\n```\n\n---\n\n### 4. **Assembly** ️\n- Transforms assembly code to machine code (object file).\n- Output: `.o` file.\n\nCommand:\n```bash\ngcc -c program.s -o program.o\n```\n\n---\n\n### 5. **Linking** \n- Links your object code with standard libraries (like `stdio`).\n- Output: Executable file (e.g., `a.out` or `program.exe`).\n\nCommand:\n```bash\ngcc program.o -o program\n```\n\n---\n\n### 6. **Execution** \n- Run the program!\n\nCommand:\n```bash\n./program\n```\n\n**Output:**\n```\nHello, World!\n```\n\n---\n\n## 3. Complete Compilation in One Step \n\nGood news: GCC combines all steps with a simple command!\n\n```bash\ngcc program.c -o program\n./program\n```\n\n---\n\n4. Conclusion\n\nUnderstanding the compilation and execution process helps you debug and optimize your C programs efficiently!\n\n> **Tip:** Try running each individual step to see the intermediate files and understand the process better!\n",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-1-7",
                                "question": "Which command is used to compile a C program using GCC?",
                                "options": ["gcc filename.c", "compile filename.c", "run filename.c"],
                                "correctAnswer": "gcc filename.c",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-1-8",
                                "question": "What does the compiler generate after successful compilation?",
                                "options": ["Object Code", "Source Code", "Bytecode"],
                                "correctAnswer": "Object Code",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-1-9",
                                "question": "Which file is created after compilation by default?",
                                "options": ["a.out", "a.exe", "output.o"],
                                "correctAnswer": "a.out",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-1-4",
                        "title": "Variables and Data Types",
                        "content": "## Variables and Fundamental Data Types in C \n\nLet’s dive into how variables work in C and the basic data types you can use!\n\n---\n\n## 1. What is a Variable?\n- A **variable** is a name given to a memory location where data is stored.\n- It acts as a container to store and manipulate data.\n\n**Declaration:**\n```c\nint age;\nfloat temperature;\nchar grade;\n```\n\n**Initialization:**\n```c\nint age = 20;\nfloat temperature = 36.5;\nchar grade = 'A';\n```\n\n---\n\n## 2. Rules for Naming Variables\n- Must begin with a letter (A–Z, a–z) or underscore (_).\n- Can contain letters, digits (0–9), and underscores.\n- Case-sensitive: `age` and `Age` are different.\n- No spaces or special symbols (except `_`).\n\n---\n\n## 3. Fundamental Data Types\n\n### a) **int** — Integer Numbers\n- Used to store whole numbers (positive or negative).\n- Example:\n```c\nint count = 10;\n```\n\n### b) **float** — Floating-Point Numbers\n- Used to store decimal numbers.\n- Example:\n```c\nfloat price = 99.99;\n```\n\n### c) **double** — Double Precision Floating-Point Numbers\n- More precise than `float`.\n- Example:\n```c\ndouble distance = 12345.6789;\n```\n\n### d) **char** — Single Characters\n- Used to store a single character.\n- Example:\n```c\nchar letter = 'A';\n```\n\n---\n\n## 4. Example Program \n```c\n#include <stdio.h>\n\nint main() {\n    int age = 25;\n    float height = 5.9;\n    char initial = 'L';\n\n    printf(\"Age: %d\\n\", age);\n    printf(\"Height: %.1f\\n\", height);\n    printf(\"Initial: %c\\n\", initial);\n\n    return 0;\n}\n```\n\n**Output:**\n```\nAge: 25\nHeight: 5.9\nInitial: L\n```\n\n---\n\n## 6. Conclusion \n- Variables are essential for storing data.\n- Choose the correct data type based on the kind of data you need to store.\n- Practice declaring and using variables to build a strong foundation in C!\n\n>  **Tip:** Use meaningful variable names to make your code easier to understand!\n",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-1-10",
                                "question": "Which data type is used to store integer values?",
                                "options": ["int", "char", "float"],
                                "correctAnswer": "int",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-1-11",
                                "question": "Which keyword is used to declare a floating-point variable?",
                                "options": ["float", "double", "int"],
                                "correctAnswer": "float",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-1-12",
                                "question": "Which of the following is a valid variable name?",
                                "options": ["_var", "2var", "var-name"],
                                "correctAnswer": "_var",
                                "userAnswer": ""
                            }
                        ]
                    }
                ],
                "assessment": {
                    "questions": [
                        {
                            "questionId": "assess-1-1",
                            "question": "What is the correct syntax to declare an integer variable?",
                            "options": ["int x;", "integer x;", "num x;"],
                            "correctAnswer": "int x;",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-1-2",
                            "question": "Which of these is not a valid C keyword?",
                            "options": ["float", "real", "return"],
                            "correctAnswer": "real",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-1-3",
                            "question": "What is the output of: printf(\"%d\", 5+3*2);",
                            "options": ["11", "16", "13"],
                            "correctAnswer": "11",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-1-4",
                            "question": "Which function is used to get user input?",
                            "options": ["scanf()", "input()", "cin>>"],
                            "correctAnswer": "scanf()",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-1-5",
                            "question": "What will sizeof(char) return?",
                            "options": ["1", "2", "4"],
                            "correctAnswer": "1",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-1-6",
                            "question": "Which header file is required for printf()?",
                            "options": ["stdio.h", "conio.h", "math.h"],
                            "correctAnswer": "stdio.h",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-1-7",
                            "question": "Which symbol is used for comments in C?",
                            "options": ["//", "#", "/* */"],
                            "correctAnswer": "/* */",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-1-8",
                            "question": "Which operator is used for assignment?",
                            "options": ["=", "==", "==="],
                            "correctAnswer": "=",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-1-9",
                            "question": "What is the output of: printf(\"%c\", 'A'+1);",
                            "options": ["B", "A1", "1"],
                            "correctAnswer": "B",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-1-10",
                            "question": "Which is the correct format specifier for float?",
                            "options": ["%f", "%d", "%c"],
                            "correctAnswer": "%f",
                            "userAnswer": ""
                        }
                    ]
                }
            }
        ,
            {
                "chapterId": "ch-2",
                "title": "Operators and Expressions",
                "unlocked": false,
                "modules": [
                    {
                        "moduleId": "mod-2-1",
                        "title": "Arithmetic Operators",
                        "content": "## Learn How to Use Arithmetic Operators in C for Basic Calculations\n\n## 1. Introduction\n\nIn C programming, **arithmetic operators** are used to perform basic mathematical operations like addition, subtraction, multiplication, division, and modulus (remainder).\n\nThese operators are used with variables or values (operands) to calculate results.\n\n---\n\n## 2. List of Arithmetic Operators in C\n\n- `+` (Addition): Adds two numbers. Example: `a + b`\n- `-` (Subtraction): Subtracts the second number from the first. Example: `a - b`\n- `*` (Multiplication): Multiplies two numbers. Example: `a * b`\n- `/` (Division): Divides the first number by the second. Example: `a / b`\n- `%` (Modulus): Gives the remainder when the first number is divided by the second. Example: `a % b`\n\n> Note: In C, division of integers discards the decimal part and gives only the integer quotient.\n\n---\n\n## 3. Examples of Arithmetic Operations in C\n\n### Example 1: Addition\n```c\n#include <stdio.h>\nint main() {\n    int a = 10, b = 5;\n    int sum = a + b;\n    printf(\"Sum: %d\\n\", sum); // Output: Sum: 15\n    return 0;\n}\n```\n\n### Example 2: Subtraction\n```c\n#include <stdio.h>\nint main() {\n    int a = 10, b = 5;\n    int diff = a - b;\n    printf(\"Difference: %d\\n\", diff); // Output: Difference: 5\n    return 0;\n}\n```\n\n### Example 3: Multiplication\n```c\n#include <stdio.h>\nint main() {\n    int a = 10, b = 5;\n    int product = a * b;\n    printf(\"Product: %d\\n\", product); // Output: Product: 50\n    return 0;\n}\n```\n\n### Example 4: Division\n```c\n#include <stdio.h>\nint main() {\n    int a = 10, b = 5;\n    int quotient = a / b;\n    printf(\"Quotient: %d\\n\", quotient); // Output: Quotient: 2\n    return 0;\n}\n```\n\n### Example 5: Modulus (Remainder)\n```c\n#include <stdio.h>\nint main() {\n    int a = 10, b = 3;\n    int remainder = a % b;\n    printf(\"Remainder: %d\\n\", remainder); // Output: Remainder: 1\n    return 0;\n}\n```\n\n---\n\n## 4. Important Notes\n\n- If you divide two integers, the result will also be an integer.\n- The modulus operator `%` is only for integer operands in C.\n- For floating-point division, at least one operand must be a float or double.\n\n### Example: Floating-point division\n```c\n#include <stdio.h>\nint main() {\n    float a = 10.0, b = 4.0;\n    float result = a / b;\n    printf(\"Result: %.2f\\n\", result); // Output: Result: 2.50\n    return 0;\n}\n```\n\n---\n\n## 5. Summary\n\n- Addition (`+`) adds two numbers.\n- Subtraction (`-`) subtracts one number from another.\n- Multiplication (`*`) multiplies two numbers.\n- Division (`/`) divides one number by another.\n- Modulus (`%`) gives the remainder of integer division.\n\n> Arithmetic operators are essential for performing calculations in C programs. Practice using them with different types of numbers to become comfortable!",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-2-1",
                                "question": "Which of the following is the modulus operator in C?",
                                "options": ["%", "/", "//"],
                                "correctAnswer": "%",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-2-2",
                                "question": "What is the result of 10 % 3 in C?",
                                "options": ["1", "3", "0"],
                                "correctAnswer": "1",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-2-3",
                                "question": "Which operator is used for multiplication?",
                                "options": ["*", "x", "^"],
                                "correctAnswer": "*",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-2-2",
                        "title": "Relational and Logical Operators",
                        "content": "## Explore Relational and Logical Operators for Decision-Making in C\n\n## 1. Introduction\n\nIn C programming, **relational** and **logical operators** are essential for making decisions. They help compare values and combine multiple conditions in decision-making structures like `if`, `else if`, and `while` loops.\n\n---\n\n## 2. Relational Operators in C\n\nRelational operators compare two values and return either **true (1)** or **false (0)**.\n\n| Operator | Description               | Example (a=5, b=3) |\n|----------|---------------------------|-------------------|\n| `==`     | Equal to                   | `a == b` → 0      |\n| `!=`     | Not equal to               | `a != b` → 1      |\n| `>`      | Greater than               | `a > b` → 1       |\n| `<`      | Less than                  | `a < b` → 0       |\n| `>=`     | Greater than or equal to   | `a >= b` → 1      |\n| `<=`     | Less than or equal to      | `a <= b` → 0      |\n\n---\n\n## 3. Logical Operators in C\n\nLogical operators combine multiple conditions to form complex decision-making expressions.\n\n| Operator | Description                          | Example (a=5, b=3)          |\n|----------|--------------------------------------|----------------------------|\n| `&&`     | Logical AND (both must be true)       | `(a > 2 && b < 4)` → 1     |\n| `||`     | Logical OR (either can be true)       | `(a < 2 || b < 4)` → 1     |\n| `!`      | Logical NOT (negates the condition)   | `!(a == b)` → 1            |\n\n---\n\n## 4. Examples in C\n\n### Example 1: Using Relational Operators\n```c\n#include <stdio.h>\nint main() {\n    int a = 10, b = 5;\n\n    if (a > b) {\n        printf(\"a is greater than b\\n\");\n    }\n\n    if (a != b) {\n        printf(\"a is not equal to b\\n\");\n    }\n\n    return 0;\n}\n```\n\n**Output:**\n```\na is greater than b\na is not equal to b\n```\n\n### Example 2: Using Logical Operators\n```c\n#include <stdio.h>\nint main() {\n    int age = 25;\n    int hasLicense = 1;\n\n    if (age > 18 && hasLicense) {\n        printf(\"You can drive!\\n\");\n    }\n\n    if (age < 18 || !hasLicense) {\n        printf(\"You cannot drive.\\n\");\n    }\n\n    return 0;\n}\n```\n\n**Output:**\n```\nYou can drive!\n```\n\n---\n\n## 5. Important Notes\n\n- Relational operators are mostly used inside conditionals like `if`, `while`, etc.\n- Logical operators help when you have multiple conditions to check.\n- `&&` returns true only if **both** conditions are true.\n- `||` returns true if **at least one** condition is true.\n- `!` negates the condition (turns true to false and vice versa).\n\n---\n\n## 6. Summary\n\n- **Relational operators** compare values: `==`, `!=`, `>`, `<`, `>=`, `<=`\n- **Logical operators** combine conditions: `&&`, `||`, `!`\n- These operators are crucial for making decisions in your programs.\n\n> Practice writing programs with multiple conditions to understand how these operators work together!",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-2-4",
                                "question": "Which operator checks for equality?",
                                "options": ["==", "=", "!="],
                                "correctAnswer": "==",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-2-5",
                                "question": "What does the && operator represent?",
                                "options": ["Logical AND", "Bitwise AND", "Logical OR"],
                                "correctAnswer": "Logical AND",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-2-6",
                                "question": "Which of these is a logical OR operator?",
                                "options": ["||", "|", "or"],
                                "correctAnswer": "||",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-2-3",
                        "title": "Assignment and Increment/Decrement Operators",
                        "content": "## Learn Assignment and Increment/Decrement Operations in C\n\n## 1. Assignment Operators\n\nIn C, **assignment operators** are used to assign values to variables.\n\n### Basic Assignment\n```c\nint a = 10; // Assigns value 10 to variable 'a'\n```\n\n### Compound Assignment Operators\n| Operator | Description                  | Example          |\n|----------|------------------------------|-----------------|\n| `=`      | Simple assignment            | `a = 5;`        |\n| `+=`     | Add and assign               | `a += 3; // a = a + 3;` |\n| `-=`     | Subtract and assign          | `a -= 2; // a = a - 2;` |\n| `*=`     | Multiply and assign          | `a *= 4; // a = a * 4;` |\n| `/=`     | Divide and assign            | `a /= 2; // a = a / 2;` |\n| `%=`     | Modulo and assign            | `a %= 3; // a = a % 3;` |\n\n---\n\n## 2. Increment and Decrement Operators\n\nThese operators are shortcuts for increasing or decreasing a value by 1.\n\n### Increment Operator: `++`\n- Increases value by 1.\n- **Pre-increment:** `++a;` (Increments, then uses the value)\n- **Post-increment:** `a++;` (Uses the value, then increments)\n\n### Decrement Operator: `--`\n- Decreases value by 1.\n- **Pre-decrement:** `--a;`\n- **Post-decrement:** `a--;`\n\n### Example:\n```c\n#include <stdio.h>\nint main() {\n    int a = 5;\n\n    printf(\"Original a: %d\\n\", a);\n\n    a++; // Post-increment\n    printf(\"After a++: %d\\n\", a);\n\n    ++a; // Pre-increment\n    printf(\"After ++a: %d\\n\", a);\n\n    a--; // Post-decrement\n    printf(\"After a--: %d\\n\", a);\n\n    --a; // Pre-decrement\n    printf(\"After --a: %d\\n\", a);\n\n    return 0;\n}\n```\n\n**Output:**\n```\nOriginal a: 5\nAfter a++: 6\nAfter ++a: 7\nAfter a--: 6\nAfter --a: 5\n```\n\n---\n\n## 3. Important Notes\n\n- **Assignment (`=`)** sets the initial value of variables.\n- **Compound assignment** operators make your code shorter and cleaner.\n- **Increment (`++`)** and **decrement (`--`)** are very useful in loops and counters.\n- Pre and post increment/decrement behave slightly differently when used inside expressions.\n\n> **Tip:** Practice using these operators in loops and conditionals to get comfortable!\n\n---\n\n## 4. Summary\n\n- Use `=` for simple assignment.\n- Use `+=`, `-=`, `*=`, `/=`, `%=` for shorthand operations.\n- Use `++` to increase and `--` to decrease values by 1.\n- Understand the difference between **pre** and **post** increment/decrement.\n\n> Try creating small programs using these operators to build familiarity!",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-2-7",
                                "question": "Which operator is used for assignment?",
                                "options": ["=", "==", ":="],
                                "correctAnswer": "=",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-2-8",
                                "question": "What is the output of ++x when x = 5?",
                                "options": ["6", "5", "4"],
                                "correctAnswer": "6",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-2-9",
                                "question": "Which operator is used for decrement?",
                                "options": ["--", "-=", "-"],
                                "correctAnswer": "--",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-2-4",
                        "title": "Expressions and Precedence",
                        "content": "## Understand Operator Precedence and Expression Evaluation in C\n\n## 1. What is Operator Precedence?\n\nIn C, **operator precedence** determines the order in which operators are evaluated in expressions.\n\n- Operators with **higher precedence** are evaluated first.\n- Operators with **equal precedence** follow **associativity** rules (left-to-right or right-to-left).\n\n---\n\n## 2. Common Operator Precedence (High to Low)\n\n| Precedence Level | Operators                          | Associativity          |\n|-----------------|------------------------------------|------------------------|\n| Highest         | `()` (parentheses)                 | Left to right          |\n|                 | `++`, `--`, `+ (unary)`, `- (unary)` | Right to left          |\n|                 | `*`, `/`, `%`                      | Left to right          |\n|                 | `+`, `-`                           | Left to right          |\n|                 | `<`, `<=`, `>`, `>=`               | Left to right          |\n|                 | `==`, `!=`                         | Left to right          |\n|                 | `&&`                               | Left to right          |\n|                 | `||`                               | Left to right          |\n|                 | `=` (assignment)                   | Right to left          |\n| Lowest          | `,` (comma operator)               | Left to right          |\n\n> **Note:** Parentheses `()` can be used to **override precedence** and control the order of evaluation.\n\n---\n\n## 3. Expression Evaluation Example\n\n```c\n#include <stdio.h>\nint main() {\n    int a = 10, b = 5, c = 2;\n    int result;\n\n    result = a + b * c; // Multiplication has higher precedence\n    printf(\"Result 1: %d\\n\", result); // Output: 20\n\n    result = (a + b) * c; // Parentheses change the order\n    printf(\"Result 2: %d\\n\", result); // Output: 30\n\n    result = a > b && b > c; // Relational first, then logical AND\n    printf(\"Result 3: %d\\n\", result); // Output: 1 (true)\n\n    return 0;\n}\n```\n\n**Output:**\n```\nResult 1: 20\nResult 2: 30\nResult 3: 1\n```\n\n---\n\n## 4. Important Notes\n\n- Multiplication, division, and modulus have **higher precedence** than addition and subtraction.\n- Always use **parentheses** for clarity, especially in complex expressions.\n- Understand **associativity** to predict evaluation order.\n\n> **Tip:** When in doubt, use parentheses to make the evaluation order clear!\n\n---\n\n## 5. Summary\n\n- Operator precedence defines the evaluation order in expressions.\n- Operators with higher precedence are evaluated first.\n- Use parentheses `()` to control and clarify the order of evaluation.\n- Understand associativity to predict how expressions are evaluated.\n\n> Practice with complex expressions to master operator precedence!",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-2-10",
                                "question": "Which operator has the highest precedence?",
                                "options": ["()", "*", "++"],
                                "correctAnswer": "()",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-2-11",
                                "question": "What is the order of evaluation in an expression?",
                                "options": ["Left to Right", "Right to Left", "Depends on operators"],
                                "correctAnswer": "Depends on operators",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-2-12",
                                "question": "Which of these is evaluated first in C?",
                                "options": ["*", "+", "-"],
                                "correctAnswer": "*",
                                "userAnswer": ""
                            }
                        ]
                    }
                ],
                "assessment": {
                    "questions": [
                        {
                            "questionId": "assess-2-1",
                            "question": "Which operator is used to add two numbers?",
                            "options": ["+", "-", "*"],
                            "correctAnswer": "+",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-2-2",
                            "question": "What does x++ do?",
                            "options": ["Increments x after use", "Increments x before use", "Decrements x"],
                            "correctAnswer": "Increments x after use",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-2-3",
                            "question": "Which of the following is not a relational operator?",
                            "options": ["!=", "==", "&&"],
                            "correctAnswer": "&&",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-2-4",
                            "question": "What is the result of 5 + 2 * 3?",
                            "options": ["11", "21", "15"],
                            "correctAnswer": "11",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-2-5",
                            "question": "Which operator is used to compare two values?",
                            "options": ["==", "=", "!="],
                            "correctAnswer": "==",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-2-6",
                            "question": "Which of the following is a logical operator?",
                            "options": ["&&", "&", "!="],
                            "correctAnswer": "&&",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-2-7",
                            "question": "What is the result of 10 % 4?",
                            "options": ["2", "1", "0"],
                            "correctAnswer": "2",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-2-8",
                            "question": "Which operator has the lowest precedence?",
                            "options": ["=", "&&", "+"],
                            "correctAnswer": "=",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-2-9",
                            "question": "Which operator is used for multiplication in C?",
                            "options": ["*", "x", "%"],
                            "correctAnswer": "*",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-2-10",
                            "question": "Which is the result of: (3 + 5) * 2?",
                            "options": ["16", "13", "10"],
                            "correctAnswer": "16",
                            "userAnswer": ""
                        }
                    ]
                }
            }
        ,
            {
                "chapterId": "ch-3",
                "title": "Control Structures",
                "unlocked": false,
                "modules": [
                    {
                        "moduleId": "mod-3-1",
                        "title": "if and if-else Statements",
                        "content": "## Understand the Use of if and if-else for Decision Making in C\n\n## 1. What is Decision Making?\n\nIn C programming, **decision-making** structures control the flow of execution based on certain conditions.\n- Conditions are evaluated using **relational** and **logical** operators.\n- Based on the result (true or false), the program decides which block of code to execute.\n\n---\n\n## 2. Using `if` Statement\n\nThe `if` statement executes a block of code **only if** the condition is true.\n\n```c\n#include <stdio.h>\nint main() {\n    int number = 10;\n\n    if (number > 0) {\n        printf(\"The number is positive.\\n\");\n    }\n\n    return 0;\n}\n```\n\n**Output:**\n```\nThe number is positive.\n```\n\n---\n\n## 3. Using `if-else` Statement\n\nThe `if-else` statement chooses between two blocks of code.\n- If the condition is **true**, the `if` block runs.\n- If the condition is **false**, the `else` block runs.\n\n```c\n#include <stdio.h>\nint main() {\n    int number = -5;\n\n    if (number > 0) {\n        printf(\"The number is positive.\\n\");\n    } else {\n        printf(\"The number is not positive.\\n\");\n    }\n\n    return 0;\n}\n```\n\n**Output:**\n```\nThe number is not positive.\n```\n\n---\n\n## 4. Nested `if-else`\n\nYou can also nest `if-else` statements for multiple conditions.\n\n```c\n#include <stdio.h>\nint main() {\n    int number = 0;\n\n    if (number > 0) {\n        printf(\"Positive number.\\n\");\n    } else if (number < 0) {\n        printf(\"Negative number.\\n\");\n    } else {\n        printf(\"Zero.\\n\");\n    }\n\n    return 0;\n}\n```\n\n**Output:**\n```\nZero.\n```\n\n---\n\n## 5. Summary\n\n- Use **if** to execute code when a condition is true.\n- Use **if-else** to choose between two paths.\n- Conditions are evaluated using relational and logical operators.\n- You can **nest if-else** for multiple decision branches.\n\n> **Tip:** Always use braces `{}` to define the scope of `if` and `else` blocks for clarity!\n",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-3-1",
                                "question": "Which keyword is used for decision making in C?",
                                "options": ["if", "for", "while"],
                                "correctAnswer": "if",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-3-2",
                                "question": "What is the output of: if (5 > 3) printf(\"Yes\"); else printf(\"No\");?",
                                "options": ["Yes", "No", "Error"],
                                "correctAnswer": "Yes",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-3-3",
                                "question": "Which symbol is used for block scope in if statements?",
                                "options": ["{}", "[]", "()"],
                                "correctAnswer": "{}",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-3-2",
                        "title": "Switch Statements",
                        "content": "## Learn to Use switch-case for Handling Multiple Conditions in C\n\n## 1. What is switch-case?\n\nThe `switch-case` statement in C is used to handle multiple conditions more efficiently than multiple `if-else` statements.\n- It compares the value of a variable against multiple `case` labels.\n- When a match is found, the corresponding block of code executes.\n\n---\n\n## 2. Syntax of switch-case\n\n```c\nswitch (expression) {\n    case value1:\n        // Code block\n        break;\n    case value2:\n        // Code block\n        break;\n    // ... more cases ...\n    default:\n        // Default code block\n}\n```\n\n- **expression:** Can be an integer or character.\n- **case:** Checks specific value.\n- **break:** Exits the switch block after a case is executed.\n- **default:** Runs if no cases match (optional).\n\n---\n\n## 3. Example: Using switch-case\n\n```c\n#include <stdio.h>\n\nint main() {\n    int day = 3;\n\n    switch (day) {\n        case 1:\n            printf(\"Monday\\n\");\n            break;\n        case 2:\n            printf(\"Tuesday\\n\");\n            break;\n        case 3:\n            printf(\"Wednesday\\n\");\n            break;\n        case 4:\n            printf(\"Thursday\\n\");\n            break;\n        case 5:\n            printf(\"Friday\\n\");\n            break;\n        default:\n            printf(\"Weekend\\n\");\n    }\n\n    return 0;\n}\n```\n\n**Output:**\n```\nWednesday\n```\n\n---\n\n## 4. Important Points\n\n- Use `break;` to prevent fall-through to the next case.\n- If no cases match and `default` is present, it will execute.\n- `switch` is clearer than multiple `if-else` when checking a single variable against many values.\n\n---\n\n## 5. Summary\n\n- Use **switch-case** to simplify code with multiple conditions.\n- Each `case` checks a specific value.\n- Always use **break** to avoid unintended code execution.\n- **default** handles unexpected values.\n\n> **Tip:** Prefer `switch-case` over multiple `if-else` for cleaner and faster decision-making when dealing with constant values!\n",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-3-4",
                                "question": "What is the purpose of a switch statement?",
                                "options": ["Multiple choice handling", "Looping", "Assignment"],
                                "correctAnswer": "Multiple choice handling",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-3-5",
                                "question": "Which keyword is used to exit a case?",
                                "options": ["break", "exit", "return"],
                                "correctAnswer": "break",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-3-6",
                                "question": "Which data types are supported by switch?",
                                "options": ["int and char", "float", "double"],
                                "correctAnswer": "int and char",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-3-3",
                        "title": "Loops: for, while, do-while",
                        "content": "## Learn About Different Loop Structures in C\n\n## 1. What are Loops in C?\n\nLoops in C allow you to execute a block of code repeatedly under certain conditions.\nThere are mainly **three types** of loops in C:\n- **for loop**\n- **while loop**\n- **do-while loop**\n\n---\n\n## 2. for loop\n\n- Used when the number of iterations is known.\n- Syntax:\n\n```c\nfor (initialization; condition; increment/decrement) {\n    // Code to execute\n}\n```\n\n### Example:\n```c\n#include <stdio.h>\n\nint main() {\n    for (int i = 1; i <= 5; i++) {\n        printf(\"%d \", i);\n    }\n    return 0;\n}\n```\n\n**Output:**\n```\n1 2 3 4 5\n```\n\n---\n\n## 3. while loop\n\n- Used when the number of iterations is **not known** in advance.\n- Condition is checked **before** entering the loop.\n\n```c\nwhile (condition) {\n    // Code to execute\n}\n```\n\n### Example:\n```c\n#include <stdio.h>\n\nint main() {\n    int i = 1;\n    while (i <= 5) {\n        printf(\"%d \", i);\n        i++;\n    }\n    return 0;\n}\n```\n\n**Output:**\n```\n1 2 3 4 5\n```\n\n---\n\n## 4. do-while loop\n\n- Similar to `while`, but the condition is checked **after** the code block runs.\n- Ensures the code runs at least once.\n\n```c\ndo {\n    // Code to execute\n} while (condition);\n```\n\n### Example:\n```c\n#include <stdio.h>\n\nint main() {\n    int i = 1;\n    do {\n        printf(\"%d \", i);\n        i++;\n    } while (i <= 5);\n    return 0;\n}\n```\n\n**Output:**\n```\n1 2 3 4 5\n```\n\n---\n\n## 5. Summary\n\n- **for loop:** Best when you know how many times to run.\n- **while loop:** Checks condition first, runs while true.\n- **do-while loop:** Runs at least once, checks condition after.\n\n> **Tip:** Choose the loop based on the situation — predictable counts use `for`, uncertain counts use `while` or `do-while`!\n",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-3-7",
                                "question": "Which loop is best when number of iterations is known?",
                                "options": ["for", "while", "do-while"],
                                "correctAnswer": "for",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-3-8",
                                "question": "Which loop checks the condition at the end?",
                                "options": ["do-while", "for", "while"],
                                "correctAnswer": "do-while",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-3-9",
                                "question": "Which is the correct syntax for a for loop?",
                                "options": ["for(i=0; i<10; i++)", "for i<10", "for(i<10; i=0)"],
                                "correctAnswer": "for(i=0; i<10; i++)",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-3-4",
                        "title": "Break and Continue",
                        "content": "## Understand break and continue for Controlling Loops in C\n\n## 1. What are break and continue?\n\nIn C, `break` and `continue` are control statements used to change the flow of loops:\n\n- **break:** Exits the loop immediately.\n- **continue:** Skips the current iteration and moves to the next one.\n\n---\n\n## 2. break Statement\n\n- Used to **terminate** a loop prematurely.\n- Commonly used when a specific condition is met inside the loop.\n\n### Syntax:\n```c\nbreak;\n```\n\n### Example:\n```c\n#include <stdio.h>\n\nint main() {\n    for (int i = 1; i <= 5; i++) {\n        if (i == 3) break;\n        printf(\"%d \", i);\n    }\n    return 0;\n}\n```\n\n**Output:**\n```\n1 2\n```\n\n> The loop stops when `i == 3`.\n\n---\n\n## 3. continue Statement\n\n- Used to **skip** the current iteration and continue with the next.\n- Useful when you want to skip certain values inside the loop.\n\n### Syntax:\n```c\ncontinue;\n```\n\n### Example:\n```c\n#include <stdio.h>\n\nint main() {\n    for (int i = 1; i <= 5; i++) {\n        if (i == 3) continue;\n        printf(\"%d \", i);\n    }\n    return 0;\n}\n```\n\n**Output:**\n```\n1 2 4 5\n```\n\n> When `i == 3`, the iteration is skipped.\n\n---\n\n## 4. Summary\n\n| Control Statement | Purpose                        |\n|------------------|--------------------------------|\n| `break`          | Exits the loop immediately     |\n| `continue`       | Skips to the next iteration    |\n\n> **Tip:** Use `break` to stop loops early, and `continue` to skip specific iterations!\n",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-3-10",
                                "question": "What does break do in a loop?",
                                "options": ["Exits the loop", "Skips next iteration", "Restarts loop"],
                                "correctAnswer": "Exits the loop",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-3-11",
                                "question": "What does continue do in a loop?",
                                "options": ["Skips to next iteration", "Exits loop", "Goes to start"],
                                "correctAnswer": "Skips to next iteration",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-3-12",
                                "question": "In which loop can break and continue be used?",
                                "options": ["All loops", "Only for", "Only while"],
                                "correctAnswer": "All loops",
                                "userAnswer": ""
                            }
                        ]
                    }
                ],
                "assessment": {
                    "questions": [
                        {
                            "questionId": "assess-3-1",
                            "question": "Which keyword is used for conditional execution?",
                            "options": ["if", "for", "int"],
                            "correctAnswer": "if",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-3-2",
                            "question": "What is the purpose of a switch-case structure?",
                            "options": ["Handle multiple conditions", "Repeat code", "Declare variables"],
                            "correctAnswer": "Handle multiple conditions",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-3-3",
                            "question": "Which loop guarantees execution at least once?",
                            "options": ["do-while", "for", "while"],
                            "correctAnswer": "do-while",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-3-4",
                            "question": "What is the result of using break inside a loop?",
                            "options": ["Exit the loop", "Restart the loop", "Ignore the loop"],
                            "correctAnswer": "Exit the loop",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-3-5",
                            "question": "Which statement is used to skip current iteration?",
                            "options": ["continue", "break", "goto"],
                            "correctAnswer": "continue",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-3-6",
                            "question": "Which loop checks the condition before executing?",
                            "options": ["while", "do-while", "goto"],
                            "correctAnswer": "while",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-3-7",
                            "question": "What is the correct syntax of a switch statement?",
                            "options": ["switch(expression)", "switch{expression}", "switch=expression"],
                            "correctAnswer": "switch(expression)",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-3-8",
                            "question": "In a for loop, which part initializes the counter?",
                            "options": ["first", "second", "third"],
                            "correctAnswer": "first",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-3-9",
                            "question": "Which of these is not a loop structure?",
                            "options": ["if", "for", "while"],
                            "correctAnswer": "if",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-3-10",
                            "question": "Which of the following can be nested?",
                            "options": ["if, loops", "switch only", "goto only"],
                            "correctAnswer": "if, loops",
                            "userAnswer": ""
                        }
                    ]
                }
            }
        ,
            {
                "chapterId": "ch-4",
                "title": "Functions in C",
                "unlocked": false,
                "modules": [
                    {
                        "moduleId": "mod-4-1",
                        "title": "Function Basics",
                        "content": "## Learn how to Declare, Define, and Call Functions in C\n\n## 1. What is a Function in C?\n\nA function is a block of code that performs a specific task.\nFunctions help make programs modular and reusable.\n\nThere are three steps when working with functions:\n- **Declaration**\n- **Definition**\n- **Function Call**\n\n---\n\n## 2. Declaring a Function\n\n- Declares the function name, return type, and parameters.\n- Also called the function prototype.\n\n### Syntax:\n```c\nreturn_type function_name(parameter_list);\n```\n\n### Example:\n```c\nint add(int a, int b);\n```\n\n> Declares a function `add` that takes two integers and returns an integer.\n\n---\n\n## 3. Defining a Function\n\n- Contains the actual body of the function.\n\n### Syntax:\n```c\nreturn_type function_name(parameter_list) {\n    // Function body\n}\n```\n\n### Example:\n```c\nint add(int a, int b) {\n    return a + b;\n}\n```\n\n> Defines the function logic for adding two numbers.\n\n---\n\n## 4. Calling a Function\n\n- Use the function name and pass required arguments.\n\n### Syntax:\n```c\nfunction_name(arguments);\n```\n\n### Example:\n```c\n#include <stdio.h>\n\nint add(int a, int b); // Declaration\n\nint main() {\n    int result = add(5, 3); // Call\n    printf(\"Sum: %d\", result);\n    return 0;\n}\n\nint add(int a, int b) { // Definition\n    return a + b;\n}\n```\n\n**Output:**\n```\nSum: 8\n```\n\n---\n\n## 5. Summary\n\n- **Declaration:** Tells the compiler about the function.\n- **Definition:** Provides the body (logic) of the function.\n- **Call:** Executes the function.\n\n> **Tip:** Declaring functions before `main()` helps the compiler understand them!\n",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-4-1",
                                "question": "What is a function in C?",
                                "options": ["A block of code that performs a task", "A variable", "A loop"],
                                "correctAnswer": "A block of code that performs a task",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-4-2",
                                "question": "Which keyword is used to return a value from a function?",
                                "options": ["return", "break", "exit"],
                                "correctAnswer": "return",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-4-3",
                                "question": "What is the default return type of a function in C?",
                                "options": ["int", "void", "char"],
                                "correctAnswer": "int",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-4-2",
                        "title": "Function Arguments",
                        "content": "## Understand How to Pass Arguments to Functions by Value in C\n\n## 1. What is Pass by Value?\n\n- In **pass by value**, a copy of the actual argument is passed to the function.\n- Changes made inside the function **do not affect** the original variable.\n\n---\n\n## 2. How Does Pass by Value Work?\n\n- When calling a function, the values of variables are copied into the function parameters.\n- Modifying the parameter inside the function does **not** change the original argument.\n\n### Example:\n```c\n#include <stdio.h>\n\nvoid modifyValue(int x) {\n    x = x + 10;\n    printf(\"Inside function: x = %d\\n\", x);\n}\n\nint main() {\n    int a = 5;\n    modifyValue(a);\n    printf(\"Inside main: a = %d\\n\", a);\n    return 0;\n}\n```\n\n**Output:**\n```\nInside function: x = 15\nInside main: a = 5\n```\n\n> **Observation:**\n> - `x` is modified inside the function.\n> - `a` remains unchanged in `main()`.\n\n---\n\n## 3. Visual Explanation\n\n```\nmain() -> a = 5\n |\n |---> modifyValue(x = copy of a)\n            x = x + 10 (x becomes 15)\n            Original a is unaffected\n```\n\n---\n\n## 4. When to Use Pass by Value\n\n✅ When you want to **protect** the original data.\n✅ Suitable for **small-sized data types** like int, char, float.\n\n---\n\n## 5. Summary\n\n- **Pass by value** passes a copy of the variable.\n- Changes inside the function do **not** affect the original.\n- Use it when you don't want the function to modify the original data.\n\n> **Tip:** If you want the function to modify the original variable, use **pass by reference** (using pointers).\n",
                    "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-4-4",
                                "question": "What is call by value?",
                                "options": ["Copy of argument is passed", "Reference is passed", "Pointer is passed"],
                                "correctAnswer": "Copy of argument is passed",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-4-5",
                                "question": "Are changes made to arguments inside a function reflected outside?",
                                "options": ["No", "Yes", "Sometimes"],
                                "correctAnswer": "No",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-4-6",
                                "question": "Can we pass multiple arguments to a function?",
                                "options": ["Yes", "No", "Only two"],
                                "correctAnswer": "Yes",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-4-3",
                        "title": "Recursion",
                        "content": "## Learn About Recursive Functions That Call Themselves\n\n## 1. What is Recursion?\n\n- **Recursion** is a programming technique where a function **calls itself** to solve a problem.\n- A recursive function breaks the problem into smaller sub-problems until it reaches a base condition.\n\n---\n\n## 2. Structure of Recursive Function\n\nEvery recursive function must have:\n\n1. **Base Case:** Stops the recursion.\n2. **Recursive Case:** Function calls itself with a simpler input.\n\n### Syntax Example:\n```c\nvoid recursiveFunction() {\n    if (baseCondition) return;\n    // Perform action\n    recursiveFunction(); // Recursive call\n}\n```\n\n---\n\n## 3. Example: Factorial Calculation\n\n```c\n#include <stdio.h>\n\nint factorial(int n) {\n    if (n == 0) return 1; // Base case\n    else return n * factorial(n - 1); // Recursive call\n}\n\nint main() {\n    int number = 5;\n    printf(\"Factorial of %d is %d\\n\", number, factorial(number));\n    return 0;\n}\n```\n\n**Output:**\n```\nFactorial of 5 is 120\n```\n\n> **Explanation:**\n> - `factorial(5)` returns `5 * factorial(4)`\n> - `factorial(4)` returns `4 * factorial(3)`\n> - ... until `factorial(0)` returns `1`\n\n---\n\n## 4. Visual Flow\n\n```\nfactorial(5)\n  ↳ 5 * factorial(4)\n            ↳ 4 * factorial(3)\n                      ↳ 3 * factorial(2)\n                                ↳ 2 * factorial(1)\n                                          ↳ 1 * factorial(0)\n                                                    ↳ 1 (Base case)\n```\n\n---\n\n## 5. Advantages of Recursion\n\n✅ Simplifies complex problems.\n✅ Reduces code size for problems like tree traversal, factorial, Fibonacci, etc.\n\n## 6. Caution ⚠️\n\n- Recursive functions can lead to **stack overflow** if the base case is missing.\n- Not always efficient for large inputs — consider **iteration** or **dynamic programming** alternatives.\n\n---\n\n## 7. Summary\n\n- Recursion is when a function **calls itself**.\n- Always define a **base case** to prevent infinite calls.\n- Useful for problems that can be broken down into similar sub-problems.\n\n> **Tip:** Trace recursive functions step by step to understand the flow better!\n",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-4-7",
                                "question": "What is recursion?",
                                "options": ["Function calling itself", "Looping", "Pointer usage"],
                                "correctAnswer": "Function calling itself",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-4-8",
                                "question": "What is needed to stop recursion?",
                                "options": ["Base condition", "Loop", "Switch"],
                                "correctAnswer": "Base condition",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-4-9",
                                "question": "Which problem is suitable for recursion?",
                                "options": ["Factorial", "Assignment", "Declaration"],
                                "correctAnswer": "Factorial",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-4-4",
                        "title": "Function Prototypes and Scope",
                        "content": "## Learn About Function Declaration and Variable Scope in C\n\n## 1. Function Declaration\n\n- In C, functions must be **declared** before they are called.\n- A function declaration tells the compiler:\n  - The function's **name**\n  - **Return type**\n  - **Parameters** (if any)\n\n### Syntax:\n```c\nreturn_type function_name(parameter_list);\n```\n\n### Example:\n```c\n#include <stdio.h>\n\n// Function declaration\nvoid greet();\n\nint main() {\n    greet();\n    return 0;\n}\n\n// Function definition\nvoid greet() {\n    printf(\"Hello, World!\\n\");\n}\n```\n\n---\n\n## 2. Variable Scope\n\n- **Scope** refers to where a variable can be accessed in the program.\n\n### Types of Scope:\n\n### 🔸 Local Scope\n- Variables declared **inside a function**.\n- Accessible **only within** that function.\n\n```c\nvoid function() {\n    int localVar = 10; // Local scope\n    printf(\"%d\\n\", localVar);\n}\n```\n\n### 🔸 Global Scope\n- Variables declared **outside all functions**.\n- Accessible by **all functions** in the program.\n\n```c\nint globalVar = 100; // Global scope\n\nvoid display() {\n    printf(\"%d\\n\", globalVar);\n}\n\nint main() {\n    display();\n    return 0;\n}\n```\n\n### 🔸 Block Scope\n- Variables declared **inside a block** (like loops or if statements).\n- Accessible **only within** that block.\n\n```c\nvoid check() {\n    if (1) {\n        int blockVar = 5; // Block scope\n        printf(\"%d\\n\", blockVar);\n    }\n    // printf(\"%d\", blockVar); // ❌ Error: blockVar is not accessible here\n}\n```\n\n---\n\n## 3. Summary\n\n- **Function Declaration** helps the compiler recognize the function before its use.\n- **Variable Scope** determines where a variable can be accessed:\n  - Local: Inside a function\n  - Global: Throughout the program\n  - Block: Inside a specific block (like loops/if statements)\n\n> **Tip:** Always manage scope carefully to avoid unexpected behaviors and name conflicts!\n",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-4-10",
                                "question": "What is a function prototype?",
                                "options": ["Declaration before use", "Function call", "Return value"],
                                "correctAnswer": "Declaration before use",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-4-11",
                                "question": "What is the scope of a local variable?",
                                "options": ["Within the block", "Entire program", "Another file"],
                                "correctAnswer": "Within the block",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-4-12",
                                "question": "Where are global variables declared?",
                                "options": ["Outside functions", "Inside loops", "Inside main"],
                                "correctAnswer": "Outside functions",
                                "userAnswer": ""
                            }
                        ]
                    }
                ],
                "assessment": {
                    "questions": [
                        {
                            "questionId": "assess-4-1",
                            "question": "What is a function prototype?",
                            "options": ["Function declaration", "Function call", "Loop"],
                            "correctAnswer": "Function declaration",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-4-2",
                            "question": "Which keyword is used to return a value?",
                            "options": ["return", "exit", "continue"],
                            "correctAnswer": "return",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-4-3",
                            "question": "What is recursion?",
                            "options": ["Function calling itself", "Infinite loop", "Syntax error"],
                            "correctAnswer": "Function calling itself",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-4-4",
                            "question": "Which is not a valid return type in C?",
                            "options": ["float", "void", "boolean"],
                            "correctAnswer": "boolean",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-4-5",
                            "question": "What does call by value mean?",
                            "options": ["Pass copy of value", "Pass reference", "Pass pointer"],
                            "correctAnswer": "Pass copy of value",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-4-6",
                            "question": "Which variable is accessible throughout the file?",
                            "options": ["Global", "Local", "Static"],
                            "correctAnswer": "Global",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-4-7",
                            "question": "Function with no return type uses which keyword?",
                            "options": ["void", "null", "empty"],
                            "correctAnswer": "void",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-4-8",
                            "question": "What is the correct syntax to define a function?",
                            "options": ["return_type name()", "def name()", "func name()"],
                            "correctAnswer": "return_type name()",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-4-9",
                            "question": "Which keyword is used to end a function?",
                            "options": ["return", "end", "break"],
                            "correctAnswer": "return",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-4-10",
                            "question": "What is the scope of a function parameter?",
                            "options": ["Local to function", "Global", "File-wide"],
                            "correctAnswer": "Local to function",
                            "userAnswer": ""
                        }
                    ]
                }
            }
        ,
            {
                "chapterId": "ch-5",
                "title": "Pointers in C",
                "unlocked": false,
                "modules": [
                    {
                        "moduleId": "mod-5-1",
                        "title": "Pointer Basics",
                        "content": "## Understand What Pointers Are and How to Declare Them in C\n\n## 1. What are Pointers?\n\n- A **pointer** is a variable that stores the **memory address** of another variable.\n- Instead of holding data directly, pointers \"point\" to the location in memory where the data is stored.\n\n### Why use pointers?\n- Efficient memory access\n- Dynamic memory allocation\n- Passing large structures or arrays to functions\n- Building complex data structures like linked lists, trees, etc.\n\n---\n\n## 2. Declaring Pointers\n\n### Syntax:\n```c\ndata_type *pointer_name;\n```\n- `data_type`: The type of data the pointer will point to.\n- `*`: Indicates that the variable is a pointer.\n- `pointer_name`: Name of the pointer variable.\n\n### Example:\n```c\nint *ptr; // Pointer to an integer\nchar *cptr; // Pointer to a character\nfloat *fptr; // Pointer to a float\n```\n\n---\n\n## 3. Initializing Pointers\n\n- You can assign the address of a variable to a pointer using the **address-of** operator (`&`).\n\n```c\nint num = 10;\nint *ptr = &num;\n\nprintf(\"Value of num: %d\\n\", num);\nprintf(\"Address of num: %p\\n\", &num);\nprintf(\"Value stored in ptr: %p\\n\", ptr);\nprintf(\"Value pointed by ptr: %d\\n\", *ptr); // Dereferencing\n```\n\n### Output:\n```\nValue of num: 10\nAddress of num: 0x7ffee3a2babc\nValue stored in ptr: 0x7ffee3a2babc\nValue pointed by ptr: 10\n```\n\n---\n\n## 4. Dereferencing a Pointer\n\n- Using `*` before a pointer gives you access to the **value** stored at the memory address.\n\n```c\nint num = 20;\nint *ptr = &num;\n\nprintf(\"Value of num using pointer: %d\\n\", *ptr);\n```\n\n---\n\n## 5. Summary\n\n- **Pointer:** Variable that stores the address of another variable.\n- **Declaration:** `data_type *pointer_name;`\n- **Initialization:** Assign with address-of operator (`&`).\n- **Dereferencing:** Use `*pointer_name` to access the value at the address.\n\n> **Tip:** Pointers are powerful but require careful handling to avoid errors like segmentation faults!\n",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-5-1",
                                "question": "What is a pointer in C?",
                                "options": ["A variable that stores address", "A function", "A loop"],
                                "correctAnswer": "A variable that stores address",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-5-2",
                                "question": "Which operator is used to get the address of a variable?",
                                "options": ["&", "*", "%"],
                                "correctAnswer": "&",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-5-3",
                                "question": "Which operator is used to access the value at an address?",
                                "options": ["*", "&", "#"],
                                "correctAnswer": "*",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-5-2",
                        "title": "Pointer Arithmetic",
                        "content": "## Learn Pointer Increment, Decrement, and Arithmetic Operations in C\n\n## 1. Pointer Arithmetic Basics\n\n- Pointers can be incremented or decremented.\n- When you increment a pointer, it moves to the next memory location based on the type of data it points to.\n- Same applies for decrement and other arithmetic operations.\n\n> **Important:** Pointer arithmetic depends on the data type size!\n\n### Example:\nIf an `int` is 4 bytes, incrementing an `int*` pointer increases its value by 4.\n\n---\n\n## 2. Incrementing and Decrementing Pointers\n\n### Increment Pointer (`ptr++`):\nMoves the pointer to the next element.\n\n```c\nint arr[] = {10, 20, 30};\nint *ptr = arr;\n\nprintf(\"Current value: %d\\n\", *ptr); // 10\nptr++;\nprintf(\"Next value: %d\\n\", *ptr); // 20\n```\n\n### Decrement Pointer (`ptr--`):\nMoves the pointer to the previous element.\n\n```c\nptr--;\nprintf(\"Previous value: %d\\n\", *ptr); // 10\n```\n\n---\n\n## 3. Adding and Subtracting Numbers to/from Pointers\n\n### Add (`ptr + n`):\nMove pointer forward by `n` positions.\n\n```c\nint *ptr = arr;\nprintf(\"Value at ptr + 2: %d\\n\", *(ptr + 2)); // 30\n```\n\n### Subtract (`ptr - n`):\nMove pointer backward by `n` positions.\n\n```c\nptr = ptr + 2;\nprintf(\"Current value: %d\\n\", *ptr); // 30\nptr = ptr - 1;\nprintf(\"Previous value: %d\\n\", *ptr); // 20\n```\n\n---\n\n## 4. Pointer Difference\n\n- Subtracting two pointers gives the number of elements between them.\n\n```c\nint *start = &arr[0];\nint *end = &arr[2];\n\nint diff = end - start;\nprintf(\"Number of elements between pointers: %d\\n\", diff); // 2\n```\n\n---\n\n## 5. Summary\n\n- **Increment (`ptr++`)**: Move to the next element.\n- **Decrement (`ptr--`)**: Move to the previous element.\n- **Addition/Subtraction:** Move forward or backward by `n` positions.\n- Pointer arithmetic is useful for iterating through arrays efficiently.\n\n> **Tip:** Always ensure pointer arithmetic stays within valid memory boundaries to avoid undefined behavior!\n",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-5-4",
                                "question": "What does ptr++ do?",
                                "options": ["Moves to next memory location", "Adds 1 to value", "Multiplies pointer"],
                                "correctAnswer": "Moves to next memory location",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-5-5",
                                "question": "Can we subtract one pointer from another?",
                                "options": ["Yes", "No", "Only in arrays"],
                                "correctAnswer": "Yes",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-5-6",
                                "question": "What is the result of *(ptr + 1)?",
                                "options": ["Next element", "Previous element", "Null"],
                                "correctAnswer": "Next element",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-5-3",
                        "title": "Pointers and Arrays",
                        "content": "## Understand the Relationship Between Pointers and Arrays in C\n\n## 1. Basics of Arrays and Pointers\n\n- An **array** is a collection of elements stored in contiguous memory locations.\n- The **name of the array** acts as a pointer to its first element.\n\n### Example:\n```c\nint arr[] = {10, 20, 30};\nprintf(\"Address of first element: %p\\n\", arr);\nprintf(\"Address of first element: %p\\n\", &arr[0]);\n```\n\nBoth `arr` and `&arr[0]` give the same address.\n\n---\n\n## 2. Accessing Array Elements Using Pointers\n\nYou can use pointers to access and manipulate array elements.\n\n```c\nint arr[] = {10, 20, 30};\nint *ptr = arr;\n\nprintf(\"First element: %d\\n\", *ptr);         // 10\nprintf(\"Second element: %d\\n\", *(ptr + 1)); // 20\nprintf(\"Third element: %d\\n\", *(ptr + 2));  // 30\n```\n\n> **Note:** `*(ptr + i)` is equivalent to `arr[i]`.\n\n---\n\n## 3. Array Indexing and Pointer Arithmetic\n\n### Array notation:\n```c\narr[1]; // Access second element\n```\n\n### Pointer notation:\n```c\n*(arr + 1); // Also accesses second element\n```\n\nBoth will give the same result!\n\n---\n\n## 4. Modifying Array Elements Using Pointers\n\nYou can change array values by dereferencing pointers:\n\n```c\nint arr[] = {10, 20, 30};\nint *ptr = arr;\n\n*ptr = 100; // arr[0] becomes 100\n*(ptr + 1) = 200; // arr[1] becomes 200\n\nprintf(\"arr[0]: %d, arr[1]: %d\\n\", arr[0], arr[1]);\n```\n\n---\n\n## 5. Passing Arrays to Functions Using Pointers\n\nWhen passing an array to a function, you're actually passing a pointer to its first element.\n\n```c\nvoid printArray(int *ptr, int size) {\n    for(int i = 0; i < size; i++) {\n        printf(\"%d \", *(ptr + i));\n    }\n    printf(\"\\n\");\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    printArray(arr, 5);\n    return 0;\n}\n```\n\nOutput:\n```\n1 2 3 4 5\n```\n\n---\n\n## 6. Summary\n\n- **Array name** is a pointer to its first element.\n- Array elements can be accessed via **pointer arithmetic**.\n- Modifying values using pointers affects the original array.\n- Functions receive pointers when arrays are passed as arguments.\n\n> **Tip:** Remember, arrays and pointers are closely related but not the same! Arrays have a fixed size, while pointers can point to any memory location.\n",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-5-7",
                                "question": "Is array name a pointer?",
                                "options": ["Yes", "No", "Sometimes"],
                                "correctAnswer": "Yes",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-5-8",
                                "question": "What does *(arr + i) represent?",
                                "options": ["arr[i]", "arr(i)", "i[arr]"],
                                "correctAnswer": "arr[i]",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-5-9",
                                "question": "Can you use pointer arithmetic on arrays?",
                                "options": ["Yes", "No", "Only in loops"],
                                "correctAnswer": "Yes",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-5-4",
                        "title": "Pointers and Functions",
                        "content": "## Learn How to Pass Pointers to Functions in C\n\n## 1. Why Pass Pointers to Functions?\n\n- Passing a pointer allows functions to **modify the original variable**.\n- Efficient for passing large data structures (like arrays) since we pass the **address**, not the actual data.\n\n---\n\n## 2. Syntax of Passing Pointers\n\nWhen you pass a pointer, you're passing the **address** of the variable.\n\n### Example:\n```c\nvoid updateValue(int *ptr) {\n    *ptr = 100; // Change the value at the address\n}\n\nint main() {\n    int num = 10;\n    updateValue(&num);\n    printf(\"Updated value: %d\\n\", num); // Output: 100\n    return 0;\n}\n```\n\n---\n\n## 3. Modifying Multiple Values Using Pointers\n\nFunctions can modify multiple variables by passing multiple pointers.\n\n```c\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x: %d, y: %d\\n\", x, y); // Output: x: 10, y: 5\n    return 0;\n}\n```\n\n---\n\n## 4. Passing Arrays to Functions (Arrays as Pointers)\n\nWhen you pass an array, you're actually passing a pointer to its first element.\n\n```c\nvoid printArray(int *arr, int size) {\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", *(arr + i));\n    }\n    printf(\"\\n\");\n}\n\nint main() {\n    int numbers[] = {1, 2, 3, 4, 5};\n    printArray(numbers, 5);\n    return 0;\n}\n```\n\nOutput:\n```\n1 2 3 4 5\n```\n\n---\n\n## 5. Summary\n\n- Use `*ptr` inside the function to **access or modify** the value at the given address.\n- Useful for modifying original data or working with large structures efficiently.\n- Arrays are naturally passed as pointers to their first element.\n\n> **Tip:** Always be careful with pointers — ensure they point to valid memory locations to avoid **undefined behavior**!\n",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-5-10",
                                "question": "Can we pass a pointer to a function?",
                                "options": ["Yes", "No", "Only with arrays"],
                                "correctAnswer": "Yes",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-5-11",
                                "question": "What does a pointer allow in functions?",
                                "options": ["Pass by reference", "Looping", "Recursion"],
                                "correctAnswer": "Pass by reference",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-5-12",
                                "question": "How do you declare a function that takes a pointer?",
                                "options": ["void func(int *p)", "int p()", "int *func(int)"],
                                "correctAnswer": "void func(int *p)",
                                "userAnswer": ""
                            }
                        ]
                    }
                ],

                "assessment": {
                    "questions": [
                        {
                            "questionId": "assess-5-1",
                            "question": "What does a pointer store?",
                            "options": ["Memory address", "Value", "Array size"],
                            "correctAnswer": "Memory address",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-5-2",
                            "question": "Which operator accesses a value at an address?",
                            "options": ["*", "&", "%"],
                            "correctAnswer": "*",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-5-3",
                            "question": "Is array name a pointer?",
                            "options": ["Yes", "No", "Sometimes"],
                            "correctAnswer": "Yes",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-5-4",
                            "question": "What does ptr++ do?",
                            "options": ["Next memory location", "Adds 1 to value", "Exits program"],
                            "correctAnswer": "Next memory location",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-5-5",
                            "question": "Can you pass a pointer to a function?",
                            "options": ["Yes", "No", "Depends on compiler"],
                            "correctAnswer": "Yes",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-5-6",
                            "question": "What is *(arr + i) equal to?",
                            "options": ["arr[i]", "arr + i", "i[arr]"],
                            "correctAnswer": "arr[i]",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-5-7",
                            "question": "What is the output of accessing uninitialized pointer?",
                            "options": ["Garbage value", "0", "Error"],
                            "correctAnswer": "Garbage value",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-5-8",
                            "question": "What is the address-of operator?",
                            "options": ["&", "*", "#"],
                            "correctAnswer": "&",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-5-9",
                            "question": "Which function is used to allocate memory?",
                            "options": ["malloc()", "new()", "alloc()"],
                            "correctAnswer": "malloc()",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-5-10",
                            "question": "Can a function return a pointer?",
                            "options": ["Yes", "No", "Only void"],
                            "correctAnswer": "Yes",
                            "userAnswer": ""
                        }
                    ]
                }
            }
        ,
            {
                "chapterId": "ch-6",
                "title": "Dynamic Memory Allocation",
                "unlocked": false,
                "modules": [
                    {
                        "moduleId": "mod-6-1",
                        "title": "Introduction to Dynamic Memory",
                        "content": "## Understand the Concept of Dynamic Memory Allocation and Why It Is Useful\n\n## 1. What is Dynamic Memory Allocation?\n\n- **Dynamic Memory Allocation (DMA)** means allocating memory at **runtime** using pointers.\n- Unlike static memory (fixed size), dynamic memory allows flexible memory management based on program needs.\n\n---\n\n## 2. Why is Dynamic Memory Allocation Useful?\n\n- **Efficient Memory Usage:** Allocate memory as needed, avoiding waste.\n- **Flexible Array Sizes:** Create arrays whose size is known only at runtime.\n- **Data Structures:** Essential for implementing structures like linked lists, trees, and graphs.\n- **Better Program Scalability:** Handle large or growing datasets without predefined limits.\n\n---\n\n## 3. Functions for Dynamic Memory Allocation in C\n\n| Function | Purpose |\n|----------|----------|\n| `malloc()` | Allocates requested size of bytes and returns a pointer to the first byte. |\n| `calloc()` | Allocates memory for an array of elements, initializes them to zero. |\n| `realloc()` | Resizes the previously allocated memory block. |\n| `free()` | Deallocates previously allocated memory. |\n\n### Example: Using `malloc()`\n```c\n#include <stdio.h>\n#include <stdlib.h>\n\nint main() {\n    int *ptr;\n    int n = 5;\n\n    // Allocate memory\n    ptr = (int*) malloc(n * sizeof(int));\n\n    // Check if memory has been allocated\n    if (ptr == NULL) {\n        printf(\"Memory not allocated.\\n\");\n        return 1;\n    }\n\n    // Assign values\n    for (int i = 0; i < n; i++) {\n        ptr[i] = i + 1;\n    }\n\n    // Print values\n    for (int i = 0; i < n; i++) {\n        printf(\"%d \", ptr[i]);\n    }\n\n    // Free allocated memory\n    free(ptr);\n\n    return 0;\n}\n```\n\nOutput:\n```\n1 2 3 4 5\n```\n\n---\n\n## 4. Important Notes\n\n- Always check if memory allocation is **successful**.\n- Remember to use `free()` to **deallocate** memory and prevent memory leaks.\n\n> **Tip:** Allocating memory dynamically gives your program flexibility and efficient resource usage!\n",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-6-1",
                                "question": "What is dynamic memory allocation?",
                                "options": ["Allocating memory at runtime", "Fixed memory allocation", "Stack memory"],
                                "correctAnswer": "Allocating memory at runtime",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-6-2",
                                "question": "Which header file is required for dynamic memory functions?",
                                "options": ["stdlib.h", "stdio.h", "math.h"],
                                "correctAnswer": "stdlib.h",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-6-3",
                                "question": "What function is used to allocate memory dynamically?",
                                "options": ["malloc()", "printf()", "scanf()"],
                                "correctAnswer": "malloc()",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-6-2",
                        "title": "Using malloc and free",
                        "content": "## Learn How to Allocate and Free Memory Using `malloc()` and `free()`\n\n## 1. What is `malloc()`?\n\n- `malloc()` stands for **Memory Allocation**.\n- It is used to allocate a **block of memory** dynamically during program execution.\n- Returns a pointer to the first byte of the allocated memory.\n- If memory cannot be allocated, it returns **NULL**.\n\n### Syntax:\n```c\nvoid* malloc(size_t size);\n```\n\n- `size`: Number of bytes to allocate.\n- `void*`: Generic pointer, usually typecasted.\n\n---\n\n## 2. What is `free()`?\n\n- `free()` is used to **deallocate memory** that was previously allocated using `malloc()` (or other dynamic allocation functions).\n- Helps in preventing **memory leaks**.\n\n### Syntax:\n```c\nvoid free(void* ptr);\n```\n\n- `ptr`: Pointer to the memory block to be freed.\n\n---\n\n## 3. Example: Allocating and Freeing Memory\n\n```c\n#include <stdio.h>\n#include <stdlib.h>\n\nint main() {\n    int *ptr;\n    int n = 5;\n\n    // Allocating memory for 5 integers\n    ptr = (int*) malloc(n * sizeof(int));\n\n    // Check if memory allocation was successful\n    if (ptr == NULL) {\n        printf(\"Memory allocation failed!\\n\");\n        return 1;\n    }\n\n    // Assign values to allocated memory\n    for (int i = 0; i < n; i++) {\n        ptr[i] = i + 1;\n    }\n\n    // Print the values\n    printf(\"Allocated memory contents: \");\n    for (int i = 0; i < n; i++) {\n        printf(\"%d \", ptr[i]);\n    }\n    printf(\"\\n\");\n\n    // Free the allocated memory\n    free(ptr);\n\n    return 0;\n}\n```\n\n### Output:\n```\nAllocated memory contents: 1 2 3 4 5\n```\n\n---\n\n## 4. Key Points\n\n- Always **check** if `malloc()` returns NULL.\n- Use `sizeof(type)` to calculate the correct number of bytes.\n- Always **free allocated memory** once done to avoid memory leaks.\n\n> **Tip:** Make it a habit to immediately free any dynamically allocated memory when it's no longer needed!\n",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-6-4",
                                "question": "What does malloc() return?",
                                "options": ["Pointer to allocated memory", "Integer", "Character"],
                                "correctAnswer": "Pointer to allocated memory",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-6-5",
                                "question": "What function is used to deallocate memory?",
                                "options": ["free()", "delete()", "remove()"],
                                "correctAnswer": "free()",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-6-6",
                                "question": "What happens if you don’t free memory?",
                                "options": ["Memory leak", "Compilation error", "Faster program"],
                                "correctAnswer": "Memory leak",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-6-3",
                        "title": "calloc and realloc",
                        "content": "## Explore `calloc()` and `realloc()` for Advanced Memory Handling\n\n## 1. What is `calloc()`?\n\n- `calloc()` stands for **Contiguous Allocation**.\n- Allocates **multiple blocks of memory** and **initializes all bytes to zero**.\n- Safer when you need memory initialized.\n\n### Syntax:\n```c\nvoid* calloc(size_t num, size_t size);\n```\n\n- `num`: Number of elements.\n- `size`: Size of each element.\n\n### Example:\n```c\nint *ptr;\nint n = 5;\nptr = (int*) calloc(n, sizeof(int));\n\nif (ptr == NULL) {\n    printf(\"Memory allocation failed!\\n\");\n    return 1;\n}\n\nfor (int i = 0; i < n; i++) {\n    printf(\"%d \", ptr[i]); // Will print: 0 0 0 0 0\n}\n```\n\n---\n\n## 2. What is `realloc()`?\n\n- `realloc()` is used to **resize previously allocated memory**.\n- It can increase or decrease the size of the allocated memory block.\n\n### Syntax:\n```c\nvoid* realloc(void* ptr, size_t new_size);\n```\n\n- `ptr`: Pointer to previously allocated memory.\n- `new_size`: New size in bytes.\n\n### Example:\n```c\nint *ptr;\nint n = 5;\n\n// Initial allocation\nptr = (int*) malloc(n * sizeof(int));\n\nif (ptr == NULL) {\n    printf(\"Initial allocation failed!\\n\");\n    return 1;\n}\n\n// Assign values\nfor (int i = 0; i < n; i++) {\n    ptr[i] = i + 1;\n}\n\n// Resize memory to hold 10 integers\nptr = (int*) realloc(ptr, 10 * sizeof(int));\n\nif (ptr == NULL) {\n    printf(\"Reallocation failed!\\n\");\n    return 1;\n}\n\n// Assign values to new elements\nfor (int i = n; i < 10; i++) {\n    ptr[i] = i + 1;\n}\n\n// Print all elements\nfor (int i = 0; i < 10; i++) {\n    printf(\"%d \", ptr[i]);\n}\n\n// Free memory\nfree(ptr);\n```\n\n### Output:\n```\n1 2 3 4 5 6 7 8 9 10\n```\n\n---\n\n## 3. Key Points to Remember\n\n- Use `calloc()` when you want **zero-initialized memory**.\n- Use `realloc()` to **resize** existing memory blocks dynamically.\n- Always **check for NULL** after `calloc()` or `realloc()` to ensure successful allocation.\n- Don't forget to **free()** the memory after you're done.\n\n> **Tip:** `realloc()` can be very powerful for dynamic arrays that grow or shrink as needed!\n",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-6-7",
                                "question": "What is the difference between malloc and calloc?",
                                "options": ["calloc initializes memory to zero", "malloc is slower", "calloc uses more memory"],
                                "correctAnswer": "calloc initializes memory to zero",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-6-8",
                                "question": "Which function changes the size of allocated memory?",
                                "options": ["realloc()", "resize()", "calloc()"],
                                "correctAnswer": "realloc()",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-6-9",
                                "question": "What happens if realloc() fails?",
                                "options": ["Returns NULL", "Returns -1", "Crashes program"],
                                "correctAnswer": "Returns NULL",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-6-4",
                        "title": "Best Practices and Errors",
                        "content": "## Learn Best Practices and How to Avoid Common Memory Allocation Errors\n\n## 1. Always Check If Memory Allocation Succeeds\n\n- Functions like `malloc()`, `calloc()`, and `realloc()` can fail if memory is insufficient.\n- Always verify that the returned pointer is not `NULL`.\n\n### Example:\n```c\nint *ptr = (int*) malloc(5 * sizeof(int));\nif (ptr == NULL) {\n    printf(\"Memory allocation failed!\\n\");\n    exit(1);\n}\n```\n\n---\n\n## 2. Free Allocated Memory After Use\n\n- Dynamically allocated memory must be released using `free()` when it's no longer needed.\n- Avoids **memory leaks**.\n\n### Example:\n```c\nfree(ptr);\nptr = NULL; // Good practice to avoid dangling pointer\n```\n\n---\n\n## 3. Avoid Using Memory After Freeing It (Dangling Pointer)\n\n- Accessing memory after `free()` leads to undefined behavior.\n- Set pointers to `NULL` after freeing.\n\n### Example:\n```c\nfree(ptr);\nptr = NULL;\n```\n\n---\n\n## 4. Initialize Pointers Before Use\n\n- Uninitialized pointers point to random locations, leading to segmentation faults.\n\n### Example:\n```c\nint *ptr = NULL; // Safe initialization\n```\n\n---\n\n## 5. Be Careful with `realloc()`\n\n- If `realloc()` fails, it returns `NULL` and leaves the original memory block unchanged.\n- Use a temporary pointer to avoid losing reference to the original block.\n\n### Example:\n```c\nint *temp = realloc(ptr, new_size * sizeof(int));\nif (temp != NULL) {\n    ptr = temp;\n} else {\n    printf(\"Reallocation failed!\\n\");\n    free(ptr); // Optional cleanup\n}\n```\n\n---\n\n## 6. Avoid Memory Leaks in Loops\n\n- Be careful when allocating memory inside loops.\n- Make sure to free memory properly.\n\n### Bad Example:\n```c\nfor (int i = 0; i < 10; i++) {\n    int *ptr = malloc(sizeof(int));\n    // Forgot to free(ptr);\n}\n```\n\n---\n\n## 7. Match `malloc()`/`calloc()` with `free()`\n\n- Always ensure that every allocation has a corresponding free.\n\n### Checklist:\n- ✅ Allocate memory\n- ✅ Use the memory\n- ✅ Free the memory\n\n---\n\n## 8. Use Tools for Memory Management\n\n- Tools like **Valgrind** help detect memory leaks and invalid memory use.\n\n### Example:\n```bash\nvalgrind --leak-check=full ./your_program\n```\n\n---\n\n## Summary\n\n- ✅ Check for `NULL` after allocation\n- ✅ Free memory when done\n- ✅ Avoid using freed memory\n- ✅ Initialize pointers\n- ✅ Use `realloc()` carefully\n- ✅ Clean up memory in loops\n- ✅ Consider using tools like Valgrind\n\n> **Tip:** Good memory management practices are critical for writing efficient and bug-free programs!\n",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-6-10",
                                "question": "What should be checked after malloc?",
                                "options": ["If pointer is NULL", "If pointer is 0", "If pointer is > 0"],
                                "correctAnswer": "If pointer is NULL",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-6-11",
                                "question": "How to prevent memory leaks?",
                                "options": ["Always use free()", "Avoid malloc", "Use static memory"],
                                "correctAnswer": "Always use free()",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-6-12",
                                "question": "What is dangling pointer?",
                                "options": ["Pointer pointing to freed memory", "Pointer to NULL", "Invalid syntax"],
                                "correctAnswer": "Pointer pointing to freed memory",
                                "userAnswer": ""
                            }
                        ]
                    }
                ],
                "assessment": {
                    "questions": [
                        {
                            "questionId": "assess-6-1",
                            "question": "What is the return type of malloc?",
                            "options": ["void *", "int *", "char *"],
                            "correctAnswer": "void *",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-6-2",
                            "question": "Which function deallocates memory?",
                            "options": ["free()", "delete()", "remove()"],
                            "correctAnswer": "free()",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-6-3",
                            "question": "Which header file contains malloc?",
                            "options": ["stdlib.h", "stdio.h", "malloc.h"],
                            "correctAnswer": "stdlib.h",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-6-4",
                            "question": "What does calloc do that malloc doesn’t?",
                            "options": ["Initializes memory to 0", "Allocates more memory", "Frees memory"],
                            "correctAnswer": "Initializes memory to 0",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-6-5",
                            "question": "Which function changes memory size?",
                            "options": ["realloc()", "resize()", "rescale()"],
                            "correctAnswer": "realloc()",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-6-6",
                            "question": "What should you check after realloc?",
                            "options": ["NULL", "0", "size"],
                            "correctAnswer": "NULL",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-6-7",
                            "question": "What is a memory leak?",
                            "options": ["Memory not freed", "Memory overused", "Hard disk full"],
                            "correctAnswer": "Memory not freed",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-6-8",
                            "question": "What causes a dangling pointer?",
                            "options": ["Using freed memory", "Assigning NULL", "Not allocating memory"],
                            "correctAnswer": "Using freed memory",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-6-9",
                            "question": "What is the output of calloc?",
                            "options": ["Zero initialized memory", "Random values", "NULL"],
                            "correctAnswer": "Zero initialized memory",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-6-10",
                            "question": "Which function allocates multiple blocks of memory?",
                            "options": ["calloc()", "malloc()", "free()"],
                            "correctAnswer": "calloc()",
                            "userAnswer": ""
                        }
                    ]
                }
            }

        ]
    },
    {
        "id": "course-7",
        "title": "JavaScript",
        "description": "Learn JavaScript from basics to advanced concepts with interactive modules and assessments.",
        "chapters": [
            {
                "chapterId": "ch-1",
                "title": "Introduction to JavaScript",
                "unlocked": true,
                "modules": [
                    {
                        "moduleId": "mod-1-1",
                        "title": "What is JavaScript?",
                        "content": "## Understand the Basics of JavaScript, Its Role in Web Development, and Its History\n\n## 1. What is JavaScript?\n\n- **JavaScript (JS)** is a **high-level**, **interpreted** programming language.\n- It is mainly used to make web pages **interactive** and **dynamic**.\n- JavaScript can be used on both the **client-side** (browser) and **server-side** (Node.js).\n\n### Features:\n- Lightweight\n- Event-driven\n- Object-oriented\n- Prototype-based\n\n---\n\n## 2. Role of JavaScript in Web Development\n\nJavaScript is one of the **core technologies** of the web, alongside **HTML** and **CSS**.\n\n### Responsibilities:\n- **HTML**: Structure of the webpage.\n- **CSS**: Styling and layout.\n- **JavaScript**: Behavior and interactivity.\n\n### Uses of JavaScript:\n- Validate form inputs\n- Create dynamic content updates without reloading the page\n- Build interactive elements like sliders, modals, and animations\n- Work with APIs to fetch and display data dynamically\n- Build full web applications (using frameworks like React, Angular, Vue.js)\n- Backend development (using Node.js)\n\n---\n\n## 3. History of JavaScript\n\n| Year | Event |\n|------|--------|\n| 1995 | **Brendan Eich** created JavaScript in just 10 days at Netscape. Originally called *Mocha*, then *LiveScript*, finally renamed to *JavaScript*. |\n| 1996 | Microsoft introduced **JScript** to compete with Netscape's JavaScript. |\n| 1997 | JavaScript was standardized as **ECMAScript** (ES). |\n| 2009 | **Node.js** was introduced, allowing JavaScript to run on servers. |\n| 2015 | Major update **ES6 (ECMAScript 2015)** brought modern features like `let`, `const`, arrow functions, classes, promises, etc. |\n\n> **Fun Fact:** JavaScript and Java are completely different languages. The name similarity was a marketing decision!\n\n---\n\n## 4. Summary\n\n- **JavaScript** makes web pages interactive and dynamic.\n- Works alongside **HTML** (structure) and **CSS** (style).\n- Has evolved from simple scripts to building full web applications.\n- Runs in browsers and on servers (Node.js).\n\n> **Tip:** Learning JavaScript opens the door to becoming a **full-stack developer**!\n",
                        "unlocked": true,
                        "questions": [
                            {
                                "questionId": "q-1-1",
                                "question": "Who developed JavaScript?",
                                "options": ["Brendan Eich", "Tim Berners-Lee", "Dennis Ritchie"],
                                "correctAnswer": "Brendan Eich",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-1-2",
                                "question": "In which year was JavaScript created?",
                                "options": ["1995", "2000", "1989"],
                                "correctAnswer": "1995",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-1-3",
                                "question": "JavaScript is a ____ language.",
                                "options": ["Compiled", "Interpreted", "Markup"],
                                "correctAnswer": "Interpreted",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-1-2",
                        "title": "JavaScript in Web Development",
                        "content": "## Explore How JavaScript Enhances HTML and CSS to Make Web Pages Interactive\n\n## 1. The Power of Combining HTML, CSS, and JavaScript\n\n- **HTML** provides the structure of the web page.\n- **CSS** adds style and design.\n- **JavaScript** adds **interactivity** and **dynamic behavior**.\n\nWhen these three work together, they create rich, interactive web experiences!\n\n---\n\n## 2. How JavaScript Enhances Web Pages\n\n### 2.1 Manipulating the DOM (Document Object Model)\n- JavaScript can **select**, **change**, **add**, or **remove** HTML elements.\n- Example:\n\n```html\n<p id=\"demo\">Hello!</p>\n<button onclick=\"changeText()\">Click Me</button>\n\n<script>\nfunction changeText() {\n  document.getElementById(\"demo\").innerHTML = \"You clicked the button!\";\n}\n</script>\n```\n\n### 2.2 Changing CSS Dynamically\n- JavaScript can **modify styles** dynamically based on events.\n- Example:\n\n```html\n<p id=\"text\">Watch my color change!</p>\n<button onclick=\"changeColor()\">Change Color</button>\n\n<script>\nfunction changeColor() {\n  document.getElementById(\"text\").style.color = \"blue\";\n}\n</script>\n```\n\n### 2.3 Responding to User Events\n- JavaScript responds to user actions like **clicks**, **mouse movements**, **keyboard inputs**, etc.\n\n> **Common events:**\n> - `onclick`\n> - `onmouseover`\n> - `onkeydown`\n\n### 2.4 Validating User Input\n- Before submitting forms, JavaScript can **check for errors**.\n- Example:\n\n```html\n<form onsubmit=\"return validateForm()\">\n  Name: <input type=\"text\" id=\"name\">\n  <input type=\"submit\" value=\"Submit\">\n</form>\n\n<script>\nfunction validateForm() {\n  let name = document.getElementById(\"name\").value;\n  if (name == \"\") {\n    alert(\"Name must be filled out!\");\n    return false;\n  }\n}\n</script>\n```\n\n---\n\n## 3. Real-World Examples\n\n- **Interactive forms**: Dynamic error messages, autofill suggestions.\n- **Animations**: Moving elements, fading effects, interactive slideshows.\n- **Dynamic content**: Load new data without refreshing the page (AJAX).\n\n> **Fun Fact:** Many popular web apps like Gmail, Facebook, and Twitter rely heavily on JavaScript!\n\n---\n\n## 4. Summary\n\n- JavaScript brings web pages to life by interacting with **HTML** and **CSS**.\n- It enables **dynamic changes**, **event handling**, and **real-time feedback**.\n- Mastering JavaScript helps you create **engaging** and **responsive** web applications.\n\n> **Tip:** Practice by building small projects like a to-do list, interactive quiz, or image slider!\n",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-1-4",
                                "question": "JavaScript is primarily used for:",
                                "options": ["Backend development", "Data storage", "Client-side scripting"],
                                "correctAnswer": "Client-side scripting",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-1-5",
                                "question": "Which HTML element is used to include JavaScript?",
                                "options": ["<js>", "<script>", "<javascript>"],
                                "correctAnswer": "<script>",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-1-6",
                                "question": "JavaScript can change HTML content:",
                                "options": ["False", "Only on load", "At any time"],
                                "correctAnswer": "At any time",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-1-3",
                        "title": "Embedding JavaScript",
                        "content": "## Learn How to Embed JavaScript in HTML Using Internal, External, and Inline Methods\n\n## 1. Introduction\n\nJavaScript can be added to HTML in **three main ways**:\n- **Inline**: Directly inside an HTML element.\n- **Internal**: Within a `<script>` tag inside the HTML file.\n- **External**: Linking to a separate `.js` file.\n\nLet's explore each method!\n\n---\n\n## 2. Inline JavaScript\n\n- JavaScript code is placed **directly in the HTML tag** using event attributes.\n\n```html\n<button onclick=\"alert('Hello, World!')\">Click Me</button>\n```\n\n> **Usage:** Simple actions like button clicks.\n> **Note:** Not recommended for complex logic as it mixes HTML and JS.\n\n---\n\n## 3. Internal JavaScript\n\n- Code is written inside a `<script>` tag **within the HTML file**.\n- Usually placed in the `<head>` or before the closing `<body>` tag.\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Internal JS Example</title>\n  <script>\n    function greet() {\n      alert(\"Welcome to the page!\");\n    }\n  </script>\n</head>\n<body>\n  <button onclick=\"greet()\">Say Hello</button>\n</body>\n</html>\n```\n\n> **Usage:** Good for small projects or quick scripts.\n\n---\n\n## 4. External JavaScript\n\n- JavaScript is written in a **separate file** with a `.js` extension.\n- The HTML file links to it using the `<script src=\"...\"></script>` tag.\n\n### Example\n\n#### HTML File:\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <title>External JS Example</title>\n  <script src=\"script.js\"></script>\n</head>\n<body>\n  <button onclick=\"showMessage()\">Click Me</button>\n</body>\n</html>\n```\n\n#### script.js File:\n```javascript\nfunction showMessage() {\n  alert(\"Hello from external JS!\");\n}\n```\n\n> **Usage:** Best practice for clean, maintainable code.\n> **Benefit:** Reuse the same JS file across multiple HTML pages.\n\n---\n\n## 5. Summary\n\n| Method    | Description                             | Recommended For                   |\n|-----------|-----------------------------------------|----------------------------------|\n| Inline    | Code inside HTML tags                  | Simple, quick actions            |\n| Internal  | Code in `<script>` within HTML         | Small projects, testing          |\n| External  | Code in separate `.js` file            | Large projects, reusable code    |\n\n> **Tip:** External JavaScript is preferred for better organization and maintainability.\n\n---\n\n## 6. Next Steps\n\n- Practice using all three methods.\n- Try moving internal scripts to external files for cleaner code.\n- Explore more advanced topics like **async** and **defer** attributes in `<script>` tags!\n",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-1-7",
                                "question": "Which method embeds JavaScript in an external file?",
                                "options": ["<js src=''>", "<link>", "<script src=''>"],
                                "correctAnswer": "<script src=''>",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-1-8",
                                "question": "Where is the best place to include JavaScript in HTML for performance?",
                                "options": ["Head section", "Body top", "Before closing body tag"],
                                "correctAnswer": "Before closing body tag",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-1-9",
                                "question": "What is the file extension for JavaScript files?",
                                "options": [".js", ".java", ".script"],
                                "correctAnswer": ".js",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-1-4",
                        "title": "Basic Syntax",
                        "content": "## Understand JavaScript Syntax: Variables, Semicolons, and Comments\n\n## 1. Introduction\n\nJavaScript syntax defines the set of rules to write JavaScript code. \nUnderstanding variables, semicolons, and comments is fundamental to writing clear and error-free programs.\n\n---\n\n## 2. Variables in JavaScript\n\nVariables are containers for storing data values.\n\n### Declaring Variables\n- **var**: Old way (function-scoped)\n- **let**: Modern way (block-scoped)\n- **const**: For constants (block-scoped)\n\n```javascript\nvar name = \"Alice\";\nlet age = 25;\nconst pi = 3.14;\n```\n\n> **Tip:** Use `let` and `const` in modern JavaScript for better scope control.\n\n### Naming Rules\n- Can contain letters, digits, `$`, and `_`\n- Must begin with a letter, `$`, or `_`\n- Case-sensitive (`name` and `Name` are different)\n\n---\n\n## 3. Semicolons\n\n- Semicolons (`;`) are used to separate statements.\n- JavaScript can automatically insert semicolons (ASI - Automatic Semicolon Insertion), but **it's a good practice to write them explicitly** to avoid surprises.\n\n```javascript\nlet name = \"Alice\";\nlet age = 25;\nconsole.log(name);\n```\n\n> **Note:** Omitting semicolons may work, but it can lead to unexpected behavior in complex code.\n\n---\n\n## 4. Comments in JavaScript\n\nComments are ignored by the browser and help explain the code.\n\n### Single-Line Comments\nUse `//` for single-line comments.\n\n```javascript\n// This is a single-line comment\nlet age = 25; // Declare age variable\n```\n\n### Multi-Line Comments\nUse `/* ... */` for multi-line comments.\n\n```javascript\n/*\n This is a multi-line comment.\n It can span multiple lines.\n*/\nlet name = \"Alice\";\n```\n\n> **Tip:** Use comments to explain complex logic and improve code readability.\n\n---\n\n## 5. Summary\n\n- ✅ **Variables** store data values using `var`, `let`, or `const`.\n- ✅ **Semicolons** mark the end of statements and improve code clarity.\n- ✅ **Comments** document the code and make it easier to understand.\n\n---\n\n## 6. Next Steps\n\n- Practice declaring variables using `let` and `const`.\n- Write code with and without semicolons to observe behavior.\n- Add meaningful comments to describe your code!\n\n> **Upcoming:** Learn about **data types** in JavaScript like strings, numbers, and booleans!\n",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-1-10",
                                "question": "Which of these is a valid JavaScript variable declaration?",
                                "options": ["var 123name", "let name", "const-name"],
                                "correctAnswer": "let name",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-1-11",
                                "question": "Which symbol is used for single-line comments?",
                                "options": ["/* */", "#", "//"],
                                "correctAnswer": "//",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-1-12",
                                "question": "Are semicolons mandatory in JavaScript?",
                                "options": ["Yes", "No", "Optional but recommended"],
                                "correctAnswer": "Optional but recommended",
                                "userAnswer": ""
                            }
                        ]
                    }
                ],
                "assessment": {
                    "questions": [
                        {
                            "questionId": "assess-1-1",
                            "question": "Which company created JavaScript?",
                            "options": ["Microsoft", "Netscape", "Google"],
                            "correctAnswer": "Netscape",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-1-2",
                            "question": "JavaScript is mainly used for?",
                            "options": ["Designing", "Server-side logic", "Client-side interactivity"],
                            "correctAnswer": "Client-side interactivity",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-1-3",
                            "question": "How do you write 'Hello' in an alert box?",
                            "options": ["alert('Hello');", "msg('Hello');", "prompt('Hello');"],
                            "correctAnswer": "alert('Hello');",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-1-4",
                            "question": "Which operator is used to assign a value to a variable?",
                            "options": ["=", "==", "==="],
                            "correctAnswer": "=",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-1-5",
                            "question": "How do you create a function in JavaScript?",
                            "options": ["function = myFunc()", "def myFunc()", "function myFunc()"],
                            "correctAnswer": "function myFunc()",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-1-6",
                            "question": "Which symbol is used for block comments?",
                            "options": ["//", "/* */", "#"],
                            "correctAnswer": "/* */",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-1-7",
                            "question": "Which keyword is used to declare a constant?",
                            "options": ["let", "const", "var"],
                            "correctAnswer": "const",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-1-8",
                            "question": "JavaScript code runs in which environment?",
                            "options": ["Compiler", "Browser", "Terminal"],
                            "correctAnswer": "Browser",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-1-9",
                            "question": "Which is a correct way to create a variable?",
                            "options": ["var x = 5", "int x = 5", "x := 5"],
                            "correctAnswer": "var x = 5",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-1-10",
                            "question": "What is the output of: console.log(typeof [])?",
                            "options": ["array", "object", "list"],
                            "correctAnswer": "object",
                            "userAnswer": ""
                        }
                    ]
                }
            }
        ,
            {
                "chapterId": "ch-2",
                "title": "Variables and Data Types",
                "unlocked": false,
                "modules": [
                    {
                        "moduleId": "mod-2-1",
                        "title": "Declaring Variables",
                        "content": "## Learn How to Declare Variables Using var, let, and const\n\n## 1. Introduction to Variables\n\nVariables are used to store data that can be used and manipulated in your program.\nIn JavaScript, you can declare variables using:\n- `var`\n- `let`\n- `const`\n\n---\n\n## 2. Declaring with `var`\n\n- `var` is function-scoped.\n- Can be redeclared and updated.\n- Not recommended in modern JavaScript because it can lead to bugs.\n\n```javascript\nvar name = \"Alice\";\nconsole.log(name); // Output: Alice\n\nvar name = \"Bob\"; // Redeclaration allowed\nconsole.log(name); // Output: Bob\n```\n\n> **Note:** Variables declared with `var` are hoisted to the top of their scope.\n\n---\n\n## 3. Declaring with `let`\n\n- `let` is block-scoped.\n- Can be updated but not redeclared in the same scope.\n- Recommended for variables that may change value.\n\n```javascript\nlet age = 25;\nconsole.log(age); // Output: 25\n\nage = 26; // Value can be updated\nconsole.log(age); // Output: 26\n```\n\n> **Tip:** `let` is the preferred way to declare variables that need to change.\n\n---\n\n## 4. Declaring with `const`\n\n- `const` is block-scoped.\n- Cannot be updated or redeclared.\n- Must be initialized at the time of declaration.\n- Recommended for values that should not change.\n\n```javascript\nconst pi = 3.14;\nconsole.log(pi); // Output: 3.14\n\n// pi = 3.1415; // ❌ Error: Assignment to constant variable\n```\n\n> **Note:** For objects and arrays declared with `const`, their properties can still be modified!\n\n```javascript\nconst person = { name: \"Alice\" };\nperson.name = \"Bob\";\nconsole.log(person.name); // Output: Bob\n```\n\n---\n\n## 5. Summary\n\n- ✅ **var**: Function-scoped, allows redeclaration (avoid in modern code).\n- ✅ **let**: Block-scoped, allows updating, best for variables that change.\n- ✅ **const**: Block-scoped, for variables that don't change.\n\n---\n\n## 6. Next Steps\n\n- Practice declaring variables using `let` and `const`.\n- Try creating constants and observe errors when attempting to reassign.\n- Experiment with `var` to understand its hoisting behavior!\n\n> **Upcoming:** Learn about **data types** in JavaScript like strings, numbers, and booleans!\n",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-2-1",
                                "question": "Which keyword declares a block-scoped variable?",
                                "options": ["var", "let", "define"],
                                "correctAnswer": "let",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-2-2",
                                "question": "Which declaration is used for a constant?",
                                "options": ["let", "const", "var"],
                                "correctAnswer": "const",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-2-3",
                                "question": "Which of the following redeclares a variable in the same scope?",
                                "options": ["let", "const", "var"],
                                "correctAnswer": "var",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-2-2",
                        "title": "Data Types Overview",
                        "content": "## Explore JavaScript’s Dynamic Data Types: Strings, Numbers, Booleans, and Objects\n\n## 1. Introduction to Dynamic Typing\n\n- JavaScript is a **dynamically typed language**.\n- This means variables are not bound to a specific type.\n- The same variable can hold different types of data at different times.\n\n```javascript\nlet data = \"Hello\"; // String\ndata = 42; // Now a Number\ndata = true; // Now a Boolean\n```\n\n---\n\n## 2. Strings\n\n- Represent sequences of characters.\n- Enclosed in single (`'`), double (`\"`), or backticks (`` ` ``).\n- Can use template literals for embedding expressions.\n\n```javascript\nlet message = 'Hello';\nlet name = \"Alice\";\nlet greeting = `Hello, ${name}!`;\nconsole.log(greeting); // Output: Hello, Alice!\n```\n\n**Common String Methods:**\n- `length`, `toUpperCase()`, `toLowerCase()`, `includes()`, `slice()`, `replace()`\n\n```javascript\nconsole.log(message.length); // Output: 5\nconsole.log(message.toUpperCase()); // Output: HELLO\n```\n\n---\n\n## 3. Numbers\n\n- Represents both integers and floating-point values.\n\n```javascript\nlet count = 10;\nlet price = 19.99;\n```\n\n**Special Numeric Values:**\n- `Infinity`, `-Infinity`, `NaN` (Not-a-Number)\n\n```javascript\nconsole.log(1 / 0); // Output: Infinity\nconsole.log(\"abc\" / 2); // Output: NaN\n```\n\n---\n\n## 4. Booleans\n\n- Represents `true` or `false`.\n- Useful for conditions and comparisons.\n\n```javascript\nlet isAvailable = true;\nlet isLoggedIn = false;\n```\n\n**Use in Conditions:**\n\n```javascript\nif (isAvailable) {\n  console.log(\"Item is available!\");\n}\n```\n\n---\n\n## 5. Objects\n\n- Collection of key-value pairs.\n- Used to store complex data structures.\n\n```javascript\nlet person = {\n  name: \"Alice\",\n  age: 25,\n  isStudent: true\n};\n\nconsole.log(person.name); // Output: Alice\nconsole.log(person[\"age\"]); // Output: 25\n```\n\n**Accessing and Modifying Properties:**\n\n```javascript\nperson.age = 26;\nconsole.log(person.age); // Output: 26\n```\n\n---\n\n## 6. Summary\n\n| Data Type  | Example                  |\n|------------|--------------------------|\n| String     | `'Hello'`, `\"World\"`     |\n| Number     | `42`, `3.14`             |\n| Boolean    | `true`, `false`          |\n| Object     | `{ name: 'Alice' }`      |\n\n> JavaScript variables can change their type anytime, making it flexible but requiring careful handling!\n\n---\n\n## 7. Next Steps\n\n- Experiment with variables and assign different data types.\n- Try combining data types (e.g., strings and numbers).\n- Explore arrays and functions as data types in JavaScript!\n\n> **Upcoming:** Learn about **arrays and functions** in JavaScript for handling collections and reusable code!\n",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-2-4",
                                "question": "What type is the value `true`?",
                                "options": ["string", "boolean", "number"],
                                "correctAnswer": "boolean",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-2-5",
                                "question": "`typeof '123'` returns:",
                                "options": ["number", "integer", "string"],
                                "correctAnswer": "string",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-2-6",
                                "question": "What is the data type of `null` in JavaScript?",
                                "options": ["null", "undefined", "object"],
                                "correctAnswer": "object",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-2-3",
                        "title": "Type Conversion",
                        "content": "## Learn How to Convert Between Different Types Using Functions and Operators\n\n## 1. Introduction to Type Conversion\n\n- In JavaScript, values can be **converted (casted)** from one type to another.\n- There are two kinds of conversions:\n  - **Implicit Conversion (Type Coercion):** JavaScript automatically converts types.\n  - **Explicit Conversion:** You manually convert types using functions/operators.\n\n---\n\n## 2. Implicit Type Conversion (Type Coercion)\n\n- Happens automatically during operations.\n\n```javascript\nconsole.log('5' + 3); // Output: '53' (Number converted to String)\nconsole.log('5' - 3); // Output: 2 (String converted to Number)\nconsole.log('5' * '2'); // Output: 10 (Strings converted to Numbers)\n```\n\n- **Important:**\n  - `+` operator with a string triggers string concatenation.\n  - Other arithmetic operators (`-`, `*`, `/`) convert strings to numbers.\n\n---\n\n## 3. Explicit Type Conversion\n\n### To String\n\n- Use `String()` function or `.toString()` method.\n\n```javascript\nlet num = 123;\nconsole.log(String(num)); // Output: '123'\nconsole.log(num.toString()); // Output: '123'\n```\n\n### To Number\n\n- Use `Number()` function, or shorthand with unary `+` operator.\n\n```javascript\nlet str = \"456\";\nconsole.log(Number(str)); // Output: 456\nconsole.log(+str); // Output: 456\n```\n\n### To Boolean\n\n- Use `Boolean()` function.\n\n```javascript\nconsole.log(Boolean(1)); // Output: true\nconsole.log(Boolean(0)); // Output: false\nconsole.log(Boolean(\"Hello\")); // Output: true\nconsole.log(Boolean(\"\")); // Output: false\n```\n\n---\n\n## 4. Special Cases in Type Conversion\n\n- **Falsy Values:** `false`, `0`, `\"\"`, `null`, `undefined`, `NaN`\n- **Truthy Values:** Anything else!\n\n```javascript\nconsole.log(Boolean(\"0\")); // true (non-empty string)\nconsole.log(Boolean([])); // true (empty array is truthy)\n```\n\n---\n\n## 5. Summary of Conversion Functions\n\n| Conversion         | Method                  | Example                   |\n|-------------------|-------------------------|---------------------------|\n| Number → String   | `String()` / `.toString()` | `String(100)` → `'100'`   |\n| String → Number   | `Number()` / `+`          | `Number(\"50\")` → `50`     |\n| Any → Boolean     | `Boolean()`               | `Boolean(\"Hi\")` → `true` |\n\n> **Tip:** Always use explicit conversion when clarity matters!\n\n---\n\n## 6. Practice Exercise\n\nTry these conversions in your console:\n\n```javascript\nconsole.log(String(false)); // ?\nconsole.log(Number(\"123abc\")); // ?\nconsole.log(Boolean(0)); // ?\n```\n\n> **Answers:**\n> - `'false'`\n> - `NaN`\n> - `false`\n\n---\n\n## 7. Next Steps\n\n- Learn about **type checking** using `typeof` operator.\n- Explore **strict equality (===)** vs **loose equality (==)** to understand type sensitivity.\n\n> **Coming Up:** Understand **strict vs loose comparisons** in JavaScript!\n",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-2-7",
                                "question": "Which method converts a string to a number?",
                                "options": ["parseInt()", "toString()", "String()"],
                                "correctAnswer": "parseInt()",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-2-8",
                                "question": "What is the output of Number('abc')?",
                                "options": ["NaN", "0", "undefined"],
                                "correctAnswer": "NaN",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-2-9",
                                "question": "String(123) will return:",
                                "options": ["123", "'123'", "undefined"],
                                "correctAnswer": "'123'",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-2-4",
                        "title": "Variable Scope",
                        "content": "## Understand Global, Local, and Block Scopes in JavaScript\n\n## 1. What is Scope?\n\n- **Scope** determines where variables and functions are accessible in your code.\n- In JavaScript, there are mainly three types of scopes:\n  - **Global Scope**\n  - **Local (Function) Scope**\n  - **Block Scope**\n\n---\n\n## 2. Global Scope\n\n- Variables declared **outside of any function or block** are in the global scope.\n- Accessible from **anywhere** in your code.\n\n```javascript\nlet globalVar = 'I am global';\n\nfunction showGlobal() {\n  console.log(globalVar); // Accessible here\n}\n\nshowGlobal();\nconsole.log(globalVar); // Also accessible here\n```\n\n> **Tip:** Avoid polluting the global scope to prevent conflicts!\n\n---\n\n## 3. Local (Function) Scope\n\n- Variables declared **inside a function** are in the local scope.\n- Accessible **only within that function**.\n\n```javascript\nfunction localScopeExample() {\n  let localVar = 'I am local';\n  console.log(localVar); // Accessible here\n}\n\nlocalScopeExample();\nconsole.log(localVar); // Error: localVar is not defined\n```\n\n> **Note:** Function scope is created every time a function is invoked.\n\n---\n\n## 4. Block Scope\n\n- Variables declared with **let** or **const** inside a block `{}` have block scope.\n- Accessible **only within the block** they are defined in.\n\n```javascript\n{\n  let blockVar = 'I am block scoped';\n  console.log(blockVar); // Accessible here\n}\n\nconsole.log(blockVar); // Error: blockVar is not defined\n```\n\n> **Important:** `var` does **not** have block scope (use `let` or `const`).\n\n---\n\n## 5. Scope Hierarchy\n\n- Inner scopes can access variables from **outer scopes**.\n\n```javascript\nlet outer = 'Outer';\n\nfunction outerFunction() {\n  let inner = 'Inner';\n  console.log(outer); // Can access outer variable\n  console.log(inner); // Can access inner variable\n}\n\nouterFunction();\n```\n\n---\n\n## 6. Shadowing Variables\n\n- A variable in an inner scope can **shadow** (override) a variable with the same name in an outer scope.\n\n```javascript\nlet name = 'Global';\n\nfunction shadowExample() {\n  let name = 'Local';\n  console.log(name); // Output: Local\n}\n\nshadowExample();\nconsole.log(name); // Output: Global\n```\n\n---\n\n## 7. Practice Exercise\n\nTry predicting the outputs:\n\n```javascript\nlet count = 10;\n\nfunction testScope() {\n  let count = 5;\n  console.log(count);\n}\n\n{\n  let count = 3;\n  console.log(count);\n}\n\nconsole.log(count);\ntestScope();\n```\n\n> **Expected Output:**\n> - 3\n> - 10\n> - 5\n\n---\n\n## 8. Summary\n\n| Scope Type       | Declared With        | Accessibility                         |\n|-----------------|---------------------|---------------------------------------|\n| Global Scope    | var, let, const     | Anywhere in the code                 |\n| Function Scope  | var, let, const     | Inside the function only             |\n| Block Scope     | let, const          | Inside the block `{}` only           |\n\n> **Next Up:** Explore **closures** and how they use scopes in JavaScript!\n",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-2-10",
                                "question": "Variables declared with `let` are scoped to:",
                                "options": ["Global scope", "Function scope", "Block scope"],
                                "correctAnswer": "Block scope",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-2-11",
                                "question": "Variables declared with `var` are scoped to:",
                                "options": ["Block", "Function", "Global only"],
                                "correctAnswer": "Function",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-2-12",
                                "question": "Global variables are attached to which object in browsers?",
                                "options": ["document", "window", "globalThis"],
                                "correctAnswer": "window",
                                "userAnswer": ""
                            }
                        ]
                    }
                ],
                "assessment": {
                    "questions": [
                        {
                            "questionId": "assess-2-1",
                            "question": "What is the default value of an uninitialized variable in JavaScript?",
                            "options": ["null", "0", "undefined"],
                            "correctAnswer": "undefined",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-2-2",
                            "question": "Which data type is returned by `typeof NaN`?",
                            "options": ["undefined", "number", "NaN"],
                            "correctAnswer": "number",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-2-3",
                            "question": "Which of the following is NOT a primitive data type?",
                            "options": ["boolean", "object", "number"],
                            "correctAnswer": "object",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-2-4",
                            "question": "What will be the value of `let x;`?",
                            "options": ["null", "0", "undefined"],
                            "correctAnswer": "undefined",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-2-5",
                            "question": "What is the result of `typeof null`?",
                            "options": ["null", "object", "undefined"],
                            "correctAnswer": "object",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-2-6",
                            "question": "Which keyword should be used to declare a block-scoped variable?",
                            "options": ["var", "let", "const"],
                            "correctAnswer": "let",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-2-7",
                            "question": "What is the result of `Number(false)`?",
                            "options": ["NaN", "0", "1"],
                            "correctAnswer": "0",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-2-8",
                            "question": "Which one is a dynamically typed language?",
                            "options": ["JavaScript", "C", "Java"],
                            "correctAnswer": "JavaScript",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-2-9",
                            "question": "How can you check the type of a variable?",
                            "options": ["checkType()", "typeof", "typeOf()"],
                            "correctAnswer": "typeof",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-2-10",
                            "question": "Which of the following is used to convert a number to a string?",
                            "options": ["toString()", "parseInt()", "Number()"],
                            "correctAnswer": "toString()",
                            "userAnswer": ""
                        }
                    ]
                }
            }
        ,
            {
                "chapterId": "ch-3",
                "title": "Operators and Expressions",
                "unlocked": false,
                "modules": [
                    {
                        "moduleId": "mod-3-1",
                        "title": "Arithmetic Operators",
                        "content": "## Understand How to Use +, -, *, /, and % Operators in JavaScript\n\n## 1. Introduction\n\n- JavaScript provides arithmetic operators to perform basic mathematical operations.\n- These include:\n  - `+` (Addition)\n  - `-` (Subtraction)\n  - `*` (Multiplication)\n  - `/` (Division)\n  - `%` (Modulus)\n\n---\n\n## 2. Addition (`+`)\n\n- Adds two numbers or concatenates strings.\n\n```javascript\nlet sum = 10 + 5;\nconsole.log(sum); // Output: 15\n\nlet message = 'Hello' + ' World';\nconsole.log(message); // Output: Hello World\n```\n\n> **Note:** If one operand is a string, `+` performs concatenation.\n\n---\n\n## 3. Subtraction (`-`)\n\n- Subtracts the right operand from the left operand.\n\n```javascript\nlet difference = 10 - 4;\nconsole.log(difference); // Output: 6\n```\n\n---\n\n## 4. Multiplication (`*`)\n\n- Multiplies two numbers.\n\n```javascript\nlet product = 6 * 7;\nconsole.log(product); // Output: 42\n```\n\n---\n\n## 5. Division (`/`)\n\n- Divides the left operand by the right operand.\n\n```javascript\nlet quotient = 20 / 4;\nconsole.log(quotient); // Output: 5\n```\n\n> **Tip:** Division by zero results in `Infinity`.\n\n```javascript\nconsole.log(10 / 0); // Output: Infinity\n```\n\n---\n\n## 6. Modulus (`%`)\n\n- Returns the remainder of division.\n\n```javascript\nlet remainder = 10 % 3;\nconsole.log(remainder); // Output: 1\n```\n\n> **Use Case:** Often used to check if a number is even or odd.\n\n```javascript\nlet number = 7;\nconsole.log(number % 2 === 0 ? 'Even' : 'Odd'); // Output: Odd\n```\n\n---\n\n## 7. Practice Exercise\n\nPredict the outputs:\n\n```javascript\nconsole.log(8 + 2);\nconsole.log(15 - 5);\nconsole.log(4 * 3);\nconsole.log(20 / 4);\nconsole.log(11 % 4);\n```\n\n> **Expected Output:**\n> - 10\n> - 10\n> - 12\n> - 5\n> - 3\n\n---\n\n## 8. Summary\n\n| Operator | Description                      | Example      | Output |\n|----------|----------------------------------|--------------|--------|\n| `+`      | Addition or Concatenation         | `5 + 3`      | `8`    |\n| `-`      | Subtraction                      | `9 - 4`      | `5`    |\n| `*`      | Multiplication                   | `2 * 6`      | `12`   |\n| `/`      | Division                         | `8 / 2`      | `4`    |\n| `%`      | Modulus (Remainder)              | `7 % 3`      | `1`    |\n\n> **Next Up:** Dive into **comparison operators** to compare values in JavaScript!\n",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-3-1",
                                "question": "What is the result of 10 % 3?",
                                "options": ["1", "3", "0"],
                                "correctAnswer": "1",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-3-2",
                                "question": "Which operator is used for multiplication?",
                                "options": ["x", "*", "%"],
                                "correctAnswer": "*",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-3-3",
                                "question": "What is the result of 8 / 2?",
                                "options": ["2", "4", "6"],
                                "correctAnswer": "4",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-3-2",
                        "title": "Assignment and Comparison Operators",
                        "content": "## Learn How to Assign Values and Compare Expressions Using =, ==, ===, !=, !==\n\n## 1. Introduction\n\n- In JavaScript, you use `=` for assignment and `==`, `===`, `!=`, `!==` for comparison.\n- Understanding these is crucial to control program flow and handle data correctly.\n\n---\n\n## 2. Assignment Operator (`=`)\n\n- Used to assign values to variables.\n\n```javascript\nlet number = 10;\nlet message = 'Hello';\nconsole.log(number); // Output: 10\nconsole.log(message); // Output: Hello\n```\n\n> **Tip:** Remember, `=` does not compare values. It assigns values.\n\n---\n\n## 3. Equality Operator (`==`)\n\n- Compares two values for equality **after type conversion**.\n\n```javascript\nconsole.log(5 == '5'); // Output: true\nconsole.log(0 == false); // Output: true\n```\n\n> **Note:** Avoid `==` to prevent unexpected results due to type coercion.\n\n---\n\n## 4. Strict Equality Operator (`===`)\n\n- Compares both value and **type**.\n\n```javascript\nconsole.log(5 === '5'); // Output: false\nconsole.log(5 === 5);   // Output: true\n```\n\n> **Best Practice:** Prefer `===` for more predictable comparisons.\n\n---\n\n## 5. Inequality Operator (`!=`)\n\n- Checks if two values are **not equal** (after type conversion).\n\n```javascript\nconsole.log(5 != '5'); // Output: false\nconsole.log(5 != 8);  // Output: true\n```\n\n---\n\n## 6. Strict Inequality Operator (`!==`)\n\n- Checks if values and/or types are **not equal**.\n\n```javascript\nconsole.log(5 !== '5'); // Output: true\nconsole.log(5 !== 5);   // Output: false\n```\n\n> **Use Case:** Safer way to check inequality without type coercion.\n\n---\n\n## 7. Practice Exercise\n\nPredict the outputs:\n\n```javascript\nlet a = 7;\nlet b = '7';\nconsole.log(a == b);\nconsole.log(a === b);\nconsole.log(a != b);\nconsole.log(a !== b);\n```\n\n> **Expected Output:**\n> - true\n> - false\n> - false\n> - true\n\n---\n\n## 8. Summary\n\n| Operator | Meaning                          | Example       | Output |\n|----------|----------------------------------|---------------|---------|\n| `=`      | Assignment                       | `let x = 5;`  | `x = 5` |\n| `==`     | Equality (loose)                 | `5 == '5'`    | `true`  |\n| `===`    | Equality (strict)                | `5 === '5'`   | `false` |\n| `!=`     | Inequality (loose)               | `5 != '5'`    | `false` |\n| `!==`    | Inequality (strict)              | `5 !== '5'`   | `true`  |\n\n> **Next Up:** Learn about **comparison operators like `<`, `>`, `<=`, `>=` to compare numbers and strings! \n",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-3-4",
                                "question": "What is the difference between == and ===?",
                                "options": [
                                    "== checks value only, === checks value and type",
                                    "Both are the same",
                                    "=== checks only value"
                                ],
                                "correctAnswer": "== checks value only, === checks value and type",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-3-5",
                                "question": "Which operator assigns a value to a variable?",
                                "options": ["==", "=", "==="],
                                "correctAnswer": "=",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-3-6",
                                "question": "Which operator is used to compare both value and type?",
                                "options": ["==", "!=", "==="],
                                "correctAnswer": "===",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-3-3",
                        "title": "Logical Operators",
                        "content": "## Use `&&`, `||`, and `!` to Evaluate Logical Conditions\n\n## 1. Introduction\n\n- Logical operators are used to combine or invert boolean values.\n- They help in making complex decisions in your programs.\n\n---\n\n## 2. Logical AND (`&&`)\n\n- Returns `true` **only if both** operands are `true`.\n\n```javascript\nconsole.log(true && true);  // Output: true\nconsole.log(true && false); // Output: false\n```\n\n> **Example:**\n\n```javascript\nlet age = 20;\nlet hasID = true;\n\nif (age >= 18 && hasID) {\n  console.log('Access granted');\n} else {\n  console.log('Access denied');\n}\n// Output: Access granted\n```\n\n---\n\n## 3. Logical OR (`||`)\n\n- Returns `true` if **at least one** operand is `true`.\n\n```javascript\nconsole.log(true || false); // Output: true\nconsole.log(false || false); // Output: false\n```\n\n> **Example:**\n\n```javascript\nlet isWeekend = false;\nlet isHoliday = true;\n\nif (isWeekend || isHoliday) {\n  console.log('Relax!');\n} else {\n  console.log('Work day');\n}\n// Output: Relax!\n```\n\n---\n\n## 4. Logical NOT (`!`)\n\n- **Inverts** the boolean value.\n\n```javascript\nconsole.log(!true);  // Output: false\nconsole.log(!false); // Output: true\n```\n\n> **Example:**\n\n```javascript\nlet isLoggedIn = false;\n\nif (!isLoggedIn) {\n  console.log('Please log in');\n} else {\n  console.log('Welcome back!');\n}\n// Output: Please log in\n```\n\n---\n\n## 5. Practice Exercise\n\nPredict the outputs:\n\n```javascript\nlet a = true;\nlet b = false;\n\nconsole.log(a && b);\nconsole.log(a || b);\nconsole.log(!a);\n```\n\n> **Expected Output:**\n> - false\n> - true\n> - false\n\n---\n\n## 6. Summary\n\n| Operator | Description                          | Example             | Result |\n|----------|--------------------------------------|--------------------|---------|\n| `&&`    | Logical AND (both must be true)       | `true && false`    | false   |\n| `||`    | Logical OR (at least one is true)     | `true || false`    | true    |\n| `!`     | Logical NOT (inverts value)           | `!true`            | false   |\n\n> **Next Up:** Explore **conditional (ternary) operator `?:` for concise decisions!**\n",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-3-7",
                                "question": "What does the && operator do?",
                                "options": [
                                    "Returns true if both operands are true",
                                    "Returns true if one operand is true",
                                    "Negates the condition"
                                ],
                                "correctAnswer": "Returns true if both operands are true",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-3-8",
                                "question": "What is the result of true || false?",
                                "options": ["true", "false", "undefined"],
                                "correctAnswer": "true",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-3-9",
                                "question": "What is the result of !true?",
                                "options": ["true", "false", "null"],
                                "correctAnswer": "false",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-3-4",
                        "title": "Ternary Operator",
                        "content": "## Use the Conditional (Ternary) Operator to Write Concise Conditional Expressions\n\n## 1. Introduction\n\n- The conditional (ternary) operator `? :` is a shorthand for simple `if-else` statements.\n- It helps to write cleaner and more concise code.\n\n---\n\n## 2. Syntax\n\n```javascript\ncondition ? expressionIfTrue : expressionIfFalse;\n```\n\n- **condition**: An expression that evaluates to `true` or `false`.\n- **expressionIfTrue**: Executed if the condition is `true`.\n- **expressionIfFalse**: Executed if the condition is `false`.\n\n---\n\n## 3. Example: Basic Usage\n\n```javascript\nlet age = 18;\nlet message = (age >= 18) ? 'Adult' : 'Minor';\nconsole.log(message);\n// Output: Adult\n```\n\n---\n\n## 4. Nested Ternary Operator\n\n- Ternary operators can be nested for multiple conditions.\n\n```javascript\nlet score = 85;\nlet grade = (score >= 90) ? 'A' : (score >= 80) ? 'B' : 'C';\nconsole.log(grade);\n// Output: B\n```\n\n> **Tip:** Nesting ternary operators can make code harder to read. Use with caution!\n\n---\n\n## 5. Replacing if-else with Ternary\n\n**Using if-else:**\n\n```javascript\nlet isMember = true;\nlet discount;\n\nif (isMember) {\n  discount = '20%';\n} else {\n  discount = '5%';\n}\nconsole.log(discount);\n// Output: 20%\n```\n\n**Using ternary operator:**\n\n```javascript\nlet isMember = true;\nlet discount = isMember ? '20%' : '5%';\nconsole.log(discount);\n// Output: 20%\n```\n\n---\n\n## 6. Practice Exercise\n\nWhat will be the output?\n\n```javascript\nlet temperature = 30;\nlet weather = (temperature > 25) ? 'Hot' : 'Cool';\nconsole.log(weather);\n```\n\n> **Expected Output:**\n> Hot\n\n---\n\n## 7. Summary\n\n| Component               | Description                         |\n|------------------------|-------------------------------------|\n| `condition`             | The test expression                 |\n| `expressionIfTrue`      | Result if condition is true         |\n| `expressionIfFalse`     | Result if condition is false        |\n\n> **Next Up:** Learn about **functions in JavaScript to organize your code better!**\n",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-3-10",
                                "question": "Which of the following is the syntax of the ternary operator?",
                                "options": [
                                    "condition ? expr1 : expr2",
                                    "condition : expr1 ? expr2",
                                    "expr1 ? expr2 : condition"
                                ],
                                "correctAnswer": "condition ? expr1 : expr2",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-3-11",
                                "question": "What does the ternary operator return?",
                                "options": [
                                    "Either the first or second expression",
                                    "Only the second expression",
                                    "Boolean values only"
                                ],
                                "correctAnswer": "Either the first or second expression",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-3-12",
                                "question": "Which operator is also known as a shorthand for if-else?",
                                "options": ["===", "&&", "?: (ternary)"],
                                "correctAnswer": "?: (ternary)",
                                "userAnswer": ""
                            }
                        ]
                    }
                ],
                "assessment": {
                    "questions": [
                        {
                            "questionId": "assess-3-1",
                            "question": "What is the result of 5 + '5'?",
                            "options": ["10", "55", "NaN"],
                            "correctAnswer": "55",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-3-2",
                            "question": "What is the result of 10 === '10'?",
                            "options": ["true", "false", "undefined"],
                            "correctAnswer": "false",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-3-3",
                            "question": "Which of these is NOT a logical operator?",
                            "options": ["&&", "||", "%"],
                            "correctAnswer": "%",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-3-4",
                            "question": "What does the != operator check for?",
                            "options": ["Inequality", "Equality", "Assignment"],
                            "correctAnswer": "Inequality",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-3-5",
                            "question": "Which operator returns true only if both operands are true?",
                            "options": ["||", "&&", "!"],
                            "correctAnswer": "&&",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-3-6",
                            "question": "Which operator negates a condition?",
                            "options": ["&&", "||", "!"],
                            "correctAnswer": "!",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-3-7",
                            "question": "What is the value of '5' === 5?",
                            "options": ["true", "false", "error"],
                            "correctAnswer": "false",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-3-8",
                            "question": "Which operator is used for exponentiation?",
                            "options": ["^", "**", "exp"],
                            "correctAnswer": "**",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-3-9",
                            "question": "What is the output of 3 + 4 * 2?",
                            "options": ["14", "11", "10"],
                            "correctAnswer": "11",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-3-10",
                            "question": "Which of the following is evaluated first in an expression?",
                            "options": ["Addition", "Multiplication", "Assignment"],
                            "correctAnswer": "Multiplication",
                            "userAnswer": ""
                        }
                    ]
                }
            }
        ,
            {
                "chapterId": "ch-4",
                "title": "Conditional Statements",
                "unlocked": false,
                "modules": [
                    {
                        "moduleId": "mod-4-1",
                        "title": "if and if-else Statements",
                        "content": "## Understand How to Use 'if' and 'if-else' Statements to Control Program Flow\n\n## 1. Introduction\n\n- Conditional statements control the flow of your program based on conditions.\n- In JavaScript, `if` and `if-else` statements help you execute code based on whether a condition is `true` or `false`.\n\n---\n\n## 2. Syntax\n\n### If Statement\n\n```javascript\nif (condition) {\n  // code to execute if condition is true\n}\n```\n\n### If-Else Statement\n\n```javascript\nif (condition) {\n  // code to execute if condition is true\n} else {\n  // code to execute if condition is false\n}\n```\n\n---\n\n## 3. Example: If Statement\n\n```javascript\nlet age = 20;\n\nif (age >= 18) {\n  console.log('You are an adult.');\n}\n\n// Output: You are an adult.\n```\n\n---\n\n## 4. Example: If-Else Statement\n\n```javascript\nlet isRaining = false;\n\nif (isRaining) {\n  console.log('Take an umbrella.');\n} else {\n  console.log('No need for an umbrella.');\n}\n\n// Output: No need for an umbrella.\n```\n\n---\n\n## 5. Multiple Conditions (If-Else If-Else)\n\n```javascript\nlet score = 75;\n\nif (score >= 90) {\n  console.log('Grade: A');\n} else if (score >= 75) {\n  console.log('Grade: B');\n} else {\n  console.log('Grade: C');\n}\n\n// Output: Grade: B\n```\n\n---\n\n## 6. Practice Exercise\n\nWhat will be the output?\n\n```javascript\nlet temperature = 15;\n\nif (temperature > 25) {\n  console.log('Hot day');\n} else {\n  console.log('Cool day');\n}\n```\n\n> **Expected Output:**\n> Cool day\n\n---\n\n## 7. Summary\n\n| Statement Type | Purpose                                  |\n|----------------|------------------------------------------|\n| `if`           | Executes code if the condition is true    |\n| `if-else`      | Chooses between two blocks of code       |\n| `if-else if-else` | Checks multiple conditions sequentially |\n\n> **Next Up:** Explore **switch-case statements for handling multiple choices efficiently! **\n",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-4-1",
                                "question": "What does an if statement do?",
                                "options": ["Loops code", "Executes code conditionally", "Declares a variable"],
                                "correctAnswer": "Executes code conditionally",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-4-2",
                                "question": "What keyword is used for alternative execution in a condition?",
                                "options": ["otherwise", "else", "elseif"],
                                "correctAnswer": "else",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-4-3",
                                "question": "Which of the following is the correct syntax for an if statement?",
                                "options": ["if x > 10 then", "if (x > 10)", "if x > 10:"],
                                "correctAnswer": "if (x > 10)",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-4-2",
                        "title": "else if Ladder",
                        "content": "## Use 'else if' to Check Multiple Conditions in Sequence\n\n## 1. Introduction\n\n- When you have more than two possible conditions to check, using multiple `if` statements can be inefficient.\n- The `else if` clause helps you check multiple conditions in order until one is true.\n- It improves readability and control over program flow.\n\n---\n\n## 2. Syntax\n\n```javascript\nif (condition1) {\n  // code if condition1 is true\n} else if (condition2) {\n  // code if condition2 is true\n} else if (condition3) {\n  // code if condition3 is true\n} else {\n  // code if none of the above conditions are true\n}\n```\n\n---\n\n## 3. Example: Grading System\n\n```javascript\nlet score = 82;\n\nif (score >= 90) {\n  console.log('Grade: A');\n} else if (score >= 80) {\n  console.log('Grade: B');\n} else if (score >= 70) {\n  console.log('Grade: C');\n} else {\n  console.log('Grade: D');\n}\n\n// Output: Grade: B\n```\n\n---\n\n## 4. Example: Weather Check\n\n```javascript\nlet temperature = 30;\n\nif (temperature > 35) {\n  console.log('It is extremely hot!');\n} else if (temperature > 25) {\n  console.log('It is warm.');\n} else if (temperature > 15) {\n  console.log('It is cool.');\n} else {\n  console.log('It is cold.');\n}\n\n// Output: It is warm.\n```\n\n---\n\n## 5. Practice Exercise\n\nWhat will be the output?\n\n```javascript\nlet marks = 68;\n\nif (marks >= 90) {\n  console.log('Excellent');\n} else if (marks >= 75) {\n  console.log('Very Good');\n} else if (marks >= 60) {\n  console.log('Good');\n} else {\n  console.log('Needs Improvement');\n}\n```\n\n> **Expected Output:**\n> Good\n\n---\n\n## 6. Summary\n\n| Statement Type         | Purpose                                     |\n|------------------------|---------------------------------------------|\n| `if`                   | First condition check                      |\n| `else if`              | Additional condition checks in sequence    |\n| `else`                 | Default block if none of the conditions are true |\n\n> **Next Up:** Learn how to use **switch-case statements** for even cleaner multi-condition handling!\n",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-4-4",
                                "question": "When do you use else if?",
                                "options": ["To execute code repeatedly", "To check another condition when previous is false", "To declare variables"],
                                "correctAnswer": "To check another condition when previous is false",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-4-5",
                                "question": "Can you have multiple else if blocks?",
                                "options": ["No", "Yes", "Only in loops"],
                                "correctAnswer": "Yes",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-4-6",
                                "question": "What happens if none of the conditions in if-else-if ladder are true?",
                                "options": ["First block runs", "Error is thrown", "else block runs (if present)"],
                                "correctAnswer": "else block runs (if present)",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-4-3",
                        "title": "Nested if Statements",
                        "content": "## Learn How to Nest 'if' Statements for Complex Decision-Making\n\n## 1. Introduction\n\n- Nested `if` statements allow you to place one `if` statement inside another.\n- They are useful for making complex decisions where multiple conditions depend on each other.\n- Helps to manage situations where one condition leads to further specific checks.\n\n---\n\n## 2. Syntax\n\n```javascript\nif (condition1) {\n  if (condition2) {\n    // code if both condition1 and condition2 are true\n  } else {\n    // code if condition1 is true but condition2 is false\n  }\n} else {\n  // code if condition1 is false\n}\n```\n\n---\n\n## 3. Example: Checking Eligibility\n\n```javascript\nlet age = 20;\nlet hasVoterID = true;\n\nif (age >= 18) {\n  if (hasVoterID) {\n    console.log('Eligible to vote');\n  } else {\n    console.log('Need to get a Voter ID');\n  }\n} else {\n  console.log('Not eligible to vote');\n}\n\n// Output: Eligible to vote\n```\n\n---\n\n## 4. Example: Product Discount Eligibility\n\n```javascript\nlet isMember = true;\nlet purchaseAmount = 1200;\n\nif (isMember) {\n  if (purchaseAmount > 1000) {\n    console.log('Eligible for 20% discount');\n  } else {\n    console.log('Eligible for 10% discount');\n  }\n} else {\n  console.log('No discount for non-members');\n}\n\n// Output: Eligible for 20% discount\n```\n\n---\n\n## 5. Practice Exercise\n\nPredict the output:\n\n```javascript\nlet day = 'Sunday';\nlet isHoliday = true;\n\nif (day === 'Sunday') {\n  if (isHoliday) {\n    console.log('Relax, it\n's a holiday!');\n  } else {\n    console.log('Time to prepare for the week ahead.');\n  }\n} else {\n  console.log('It\n's a weekday, keep going!');\n}\n```\n\n> **Expected Output:**\n> Relax, it's a holiday!\n\n---\n\n## 6. Summary\n\n- **Nested `if`** helps in handling dependent conditions.\n- Keep nesting levels minimal to maintain readability.\n- Alternative: use logical operators (`&&`, `||`) to simplify where possible.\n\n> **Next Up:** Learn about using **switch-case** for managing multiple conditions efficiently!\n",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-4-7",
                                "question": "What is a nested if statement?",
                                "options": ["An if inside another if", "A loop inside an if", "Two ifs running together"],
                                "correctAnswer": "An if inside another if",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-4-8",
                                "question": "What is a key concern with nested if statements?",
                                "options": ["Speed", "Memory", "Readability"],
                                "correctAnswer": "Readability",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-4-9",
                                "question": "Can else be used with nested if?",
                                "options": ["Yes", "No", "Only in modern JavaScript"],
                                "correctAnswer": "Yes",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-4-4",
                        "title": "switch Statement",
                        "content": "## Use 'switch' for Cleaner Multiple Condition Checks Instead of Many 'else if' Blocks\n\n## 1. Introduction\n\n- When you have several conditions to check against the same variable, `switch` is a cleaner alternative to multiple `else if` statements.\n- It improves readability and makes the code easier to maintain.\n\n---\n\n## 2. Syntax\n\n```javascript\nswitch (expression) {\n  case value1:\n    // code to execute if expression === value1\n    break;\n  case value2:\n    // code to execute if expression === value2\n    break;\n  default:\n    // code to execute if no case matches\n}\n```\n\n- **expression**: The value you are testing.\n- **case**: Possible matches for the expression.\n- **break**: Ends the case block to prevent fall-through.\n- **default**: Optional block if no cases match.\n\n---\n\n## 3. Example: Day of the Week\n\n```javascript\nlet day = 'Tuesday';\n\nswitch (day) {\n  case 'Monday':\n    console.log('Start of the work week!');\n    break;\n  case 'Tuesday':\n    console.log('Second day hustle!');\n    break;\n  case 'Friday':\n    console.log('Almost weekend!');\n    break;\n  default:\n    console.log('Regular day.');\n}\n\n// Output: Second day hustle!\n```\n\n---\n\n## 4. Example: Grading System\n\n```javascript\nlet grade = 'B';\n\nswitch (grade) {\n  case 'A':\n    console.log('Excellent!');\n    break;\n  case 'B':\n    console.log('Good job!');\n    break;\n  case 'C':\n    console.log('You can do better.');\n    break;\n  default:\n    console.log('Grade not recognized.');\n}\n\n// Output: Good job!\n```\n\n---\n\n## 5. Practice Exercise\n\nPredict the output:\n\n```javascript\nlet fruit = 'Apple';\n\nswitch (fruit) {\n  case 'Banana':\n    console.log('Banana is full of potassium!');\n    break;\n  case 'Apple':\n    console.log('An apple a day keeps the doctor away!');\n    break;\n  default:\n    console.log('Unknown fruit.');\n}\n```\n\n> **Expected Output:**\n> An apple a day keeps the doctor away!\n\n---\n\n## 6. Summary\n\n- Use `switch` when checking multiple values of the same expression.\n- Improves readability over long `else if` chains.\n- Don't forget to use `break` to avoid fall-through!\n\n> **Next Up:** Learn about **loops in JavaScript** to perform repetitive tasks efficiently!\n",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-4-10",
                                "question": "What keyword is used to exit a switch case?",
                                "options": ["continue", "exit", "break"],
                                "correctAnswer": "break",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-4-11",
                                "question": "What does default do in a switch?",
                                "options": ["Ends the switch", "Runs when no case matches", "Breaks the loop"],
                                "correctAnswer": "Runs when no case matches",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-4-12",
                                "question": "Can you have multiple cases for the same block?",
                                "options": ["No", "Yes", "Only with default"],
                                "correctAnswer": "Yes",
                                "userAnswer": ""
                            }
                        ]
                    }
                ],
                "assessment": {
                    "questions": [
                        {
                            "questionId": "assess-4-1",
                            "question": "What is the output of if (false) { console.log('Hi') }?",
                            "options": ["Hi", "Nothing", "Error"],
                            "correctAnswer": "Nothing",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-4-2",
                            "question": "Which statement allows you to handle multiple conditions more clearly?",
                            "options": ["Nested if", "switch", "if only"],
                            "correctAnswer": "switch",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-4-3",
                            "question": "Which block is executed when no condition in switch matches?",
                            "options": ["First", "default", "else"],
                            "correctAnswer": "default",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-4-4",
                            "question": "What happens if you forget break in a switch case?",
                            "options": ["Only that case runs", "All subsequent cases run", "Error"],
                            "correctAnswer": "All subsequent cases run",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-4-5",
                            "question": "Can you nest if statements inside switch?",
                            "options": ["Yes", "No", "Only with default"],
                            "correctAnswer": "Yes",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-4-6",
                            "question": "Which of the following improves readability in multiple conditions?",
                            "options": ["else-if", "for loop", "switch"],
                            "correctAnswer": "switch",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-4-7",
                            "question": "How many else blocks can you have with an if statement?",
                            "options": ["1", "Multiple", "None"],
                            "correctAnswer": "1",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-4-8",
                            "question": "What is the correct syntax for else if?",
                            "options": ["else if (condition)", "elseif(condition)", "else: if"],
                            "correctAnswer": "else if (condition)",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-4-9",
                            "question": "Can switch handle boolean values?",
                            "options": ["Yes", "No", "Only in modern JS"],
                            "correctAnswer": "Yes",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-4-10",
                            "question": "When should you use nested ifs?",
                            "options": ["Always", "For multiple levels of condition", "Never"],
                            "correctAnswer": "For multiple levels of condition",
                            "userAnswer": ""
                        }
                    ]
                }
            }
        ,
            {
                "chapterId": "ch-5",
                "title": "Loops and Iteration",
                "unlocked": false,
                "modules": [
                    {
                        "moduleId": "mod-5-1",
                        "title": "for Loop",
                        "content": "## Learn How to Use 'for' Loops to Execute a Block of Code Multiple Times\n\n## 1. Introduction\n\n- A `for` loop is used to repeat a block of code a specific number of times.\n- It consists of three parts: initialization, condition, and increment/decrement.\n\n---\n\n## 2. Syntax\n\n```javascript\nfor (initialization; condition; increment) {\n  // code to execute in each iteration\n}\n```\n\n- **initialization**: Declare and set the starting value.\n- **condition**: The loop runs as long as this condition is `true`.\n- **increment**: Update the counter after each iteration.\n\n---\n\n## 3. Example: Print Numbers 1 to 5\n\n```javascript\nfor (let i = 1; i <= 5; i++) {\n  console.log(i);\n}\n\n// Output:\n// 1\n// 2\n// 3\n// 4\n// 5\n```\n\n---\n\n## 4. Example: Print Even Numbers from 2 to 10\n\n```javascript\nfor (let i = 2; i <= 10; i += 2) {\n  console.log(i);\n}\n\n// Output:\n// 2\n// 4\n// 6\n// 8\n// 10\n```\n\n---\n\n## 5. Practice Exercise\n\nWhat will this code output?\n\n```javascript\nfor (let i = 3; i > 0; i--) {\n  console.log('Countdown:', i);\n}\n```\n\n> **Expected Output:**\n> Countdown: 3\n> Countdown: 2\n> Countdown: 1\n\n---\n\n## 6. Summary\n\n- The `for` loop is perfect when you know how many times you need to repeat an action.\n- Remember to define initialization, condition, and increment to control the loop flow.\n\n> **Next Up:** Explore **while loops** to repeat code based on conditions!\n",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-5-1",
                                "question": "Which loop is best when you know the number of iterations?",
                                "options": ["while", "for", "do-while"],
                                "correctAnswer": "for",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-5-2",
                                "question": "What is the correct syntax of a for loop?",
                                "options": ["for (i=0; i<5; i++)", "for i=0 to 5", "loop i in 5"],
                                "correctAnswer": "for (i=0; i<5; i++)",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-5-3",
                                "question": "What happens if the increment is missing?",
                                "options": ["Error", "Infinite loop", "It runs once"],
                                "correctAnswer": "Infinite loop",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-5-2",
                        "title": "while Loop",
                        "content": "## Understand the While Loop Which Runs as Long as the Condition is True\n\n## 1. Introduction\n\n- A `while` loop is used to repeat a block of code **as long as** a specified condition remains `true`.\n- Unlike `for` loops, `while` loops are typically used when the number of iterations is **unknown** in advance.\n\n---\n\n## 2. Syntax\n\n```javascript\nwhile (condition) {\n  // code to execute repeatedly\n}\n```\n\n- **condition**: The loop keeps running as long as this evaluates to `true`.\n\n---\n\n## 3. Example: Print Numbers 1 to 5\n\n```javascript\nlet i = 1;\nwhile (i <= 5) {\n  console.log(i);\n  i++;\n}\n\n// Output:\n// 1\n// 2\n// 3\n// 4\n// 5\n```\n\n---\n\n## 4. Example: Countdown from 3 to 1\n\n```javascript\nlet count = 3;\nwhile (count > 0) {\n  console.log('Countdown:', count);\n  count--;\n}\n\n// Output:\n// Countdown: 3\n// Countdown: 2\n// Countdown: 1\n```\n\n---\n\n## 5. Important: Avoid Infinite Loops\n\n- Ensure the condition will eventually become `false`, or the loop will run forever!\n\n```javascript\nlet i = 1;\nwhile (i <= 3) {\n  console.log(i);\n  // Missing increment: i++\n  // This will cause an infinite loop!\n}\n```\n\n---\n\n## 6. Practice Exercise\n\nWhat will this code output?\n\n```javascript\nlet number = 5;\nwhile (number >= 1) {\n  console.log(number * 2);\n  number--;\n}\n```\n\n> **Expected Output:**\n> 10\n> 8\n> 6\n> 4\n> 2\n\n---\n\n## 7. Summary\n\n- Use `while` loops when you want to repeat a block of code **until a condition changes**.\n- Make sure to update variables inside the loop to avoid infinite loops.\n\n> **Next Up:** Learn how to use **do...while loops** for at least one guaranteed execution!\n",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-5-4",
                                "question": "When is the condition checked in a while loop?",
                                "options": ["After execution", "Before each iteration", "Only at the beginning"],
                                "correctAnswer": "Before each iteration",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-5-5",
                                "question": "Which loop may never run if the condition is false initially?",
                                "options": ["for", "while", "do-while"],
                                "correctAnswer": "while",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-5-6",
                                "question": "What can cause an infinite loop in while?",
                                "options": ["No increment", "Condition is always true", "Both"],
                                "correctAnswer": "Both",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-5-3",
                        "title": "do-while Loop",
                        "content": "## Learn How do-while Loop Works and When to Use It\n\n## 1. Introduction\n\n- A `do-while` loop is a variation of the `while` loop.\n- The main difference: **The block of code runs at least once**, even if the condition is `false` at the beginning.\n\n---\n\n## 2. Syntax\n\n```javascript\ndo {\n  // code to execute\n} while (condition);\n```\n\n- The loop executes the block **first**, then checks the condition.\n\n---\n\n## 3. Example: Print Numbers 1 to 3\n\n```javascript\nlet i = 1;\ndo {\n  console.log(i);\n  i++;\n} while (i <= 3);\n\n// Output:\n// 1\n// 2\n// 3\n```\n\n---\n\n## 4. Example: Condition False Initially\n\n```javascript\nlet num = 10;\ndo {\n  console.log('Executed once even if condition is false');\n} while (num < 5);\n\n// Output:\n// Executed once even if condition is false\n```\n\n- The block runs once **before** checking `num < 5`.\n\n---\n\n## 5. When to Use do-while Loops\n\n- When you want the loop body to execute **at least once**, regardless of the condition.\n- Examples:\n  - Prompting user input and validating.\n  - Menu-driven programs.\n\n**Example: User Input Simulation**\n\n```javascript\nlet password;\ndo {\n  password = prompt('Enter password:');\n} while (password !== '1234');\nconsole.log('Access granted!');\n```\n\n---\n\n## 6. Practice Exercise\n\nWhat will this code output?\n\n```javascript\nlet count = 5;\ndo {\n  console.log('Count is:', count);\n  count--;\n} while (count > 3);\n```\n\n> **Expected Output:**\n> Count is: 5\n> Count is: 4\n\n---\n\n## 7. Summary\n\n- `do-while` guarantees the loop body runs **at least once**.\n- Useful when the first execution must happen before condition checking.\n\n> **Next Up:** Discover how to use **break and continue** statements to control loop flow!\n",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-5-7",
                                "question": "When does a do-while loop check the condition?",
                                "options": ["Before execution", "After execution", "Never"],
                                "correctAnswer": "After execution",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-5-8",
                                "question": "Which loop guarantees at least one execution?",
                                "options": ["for", "while", "do-while"],
                                "correctAnswer": "do-while",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-5-9",
                                "question": "Is a semicolon required after do-while loop?",
                                "options": ["Yes", "No", "Only in some cases"],
                                "correctAnswer": "Yes",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-5-4",
                        "title": "break and continue",
                        "content": "## Control the Loop Flow Using break and continue Statements\n\n## 1. Introduction\n\n- In JavaScript, you can control how loops behave using special statements:\n  - **break**: Exit the loop immediately.\n  - **continue**: Skip the current iteration and move to the next one.\n\n---\n\n## 2. The break Statement\n\n- **Purpose:** To terminate the loop entirely when a certain condition is met.\n\n### Syntax\n\n```javascript\nfor (let i = 1; i <= 5; i++) {\n  if (i === 3) {\n    break;\n  }\n  console.log(i);\n}\n\n// Output:\n// 1\n// 2\n```\n\n- When `i` becomes 3, the loop stops immediately.\n\n---\n\n## 3. The continue Statement\n\n- **Purpose:** To skip the current iteration and continue with the next one.\n\n### Syntax\n\n```javascript\nfor (let i = 1; i <= 5; i++) {\n  if (i === 3) {\n    continue;\n  }\n  console.log(i);\n}\n\n// Output:\n// 1\n// 2\n// 4\n// 5\n```\n\n- When `i` is 3, it skips printing and continues with the next value.\n\n---\n\n## 4. Using break and continue in while loops\n\n### Example with break\n\n```javascript\nlet i = 1;\nwhile (i <= 5) {\n  if (i === 4) {\n    break;\n  }\n  console.log(i);\n  i++;\n}\n\n// Output:\n// 1\n// 2\n// 3\n```\n\n### Example with continue\n\n```javascript\nlet i = 0;\nwhile (i < 5) {\n  i++;\n  if (i === 3) {\n    continue;\n  }\n  console.log(i);\n}\n\n// Output:\n// 1\n// 2\n// 4\n// 5\n```\n\n---\n\n## 5. When to Use\n\n- **break**\n  - Stop the loop early when a condition is met.\n  - Example: Searching for an item in a list.\n\n- **continue**\n  - Skip specific cases during iteration.\n  - Example: Skip even numbers or invalid input.\n\n---\n\n## 6. Practice Question\n\nWhat will be the output?\n\n```javascript\nfor (let i = 1; i <= 5; i++) {\n  if (i % 2 === 0) {\n    continue;\n  }\n  console.log(i);\n}\n```\n\n> **Expected Output:**\n> 1\n> 3\n> 5\n\n---\n\n## 7. Summary\n\n- **break** exits the loop completely.\n- **continue** skips the current iteration and moves to the next.\n- Both help control the flow of loops effectively.\n\n> **Next Up:** Learn how to write cleaner code by using **functions**!\n",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-5-10",
                                "question": "What does break do in a loop?",
                                "options": ["Skips to next iteration", "Exits the loop", "Pauses the loop"],
                                "correctAnswer": "Exits the loop",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-5-11",
                                "question": "What does continue do?",
                                "options": ["Restarts loop", "Skips remaining code and goes to next iteration", "Ends loop"],
                                "correctAnswer": "Skips remaining code and goes to next iteration",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-5-12",
                                "question": "Can break be used inside nested loops?",
                                "options": ["Yes", "No", "Only in for loops"],
                                "correctAnswer": "Yes",
                                "userAnswer": ""
                            }
                        ]
                    }
                ],
                "assessment": {
                    "questions": [
                        {
                            "questionId": "assess-5-1",
                            "question": "What is the output of for (let i = 0; i < 3; i++) { console.log(i); }?",
                            "options": ["0 1 2", "1 2 3", "0 1 2 3"],
                            "correctAnswer": "0 1 2",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-5-2",
                            "question": "Which loop runs even if the condition is initially false?",
                            "options": ["while", "do-while", "for"],
                            "correctAnswer": "do-while",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-5-3",
                            "question": "What keyword skips the current loop iteration?",
                            "options": ["skip", "continue", "break"],
                            "correctAnswer": "continue",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-5-4",
                            "question": "When do you use break in loops?",
                            "options": ["To pause", "To exit early", "To continue"],
                            "correctAnswer": "To exit early",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-5-5",
                            "question": "What is the default starting point in a for loop?",
                            "options": ["1", "0", "Depends on condition"],
                            "correctAnswer": "Depends on condition",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-5-6",
                            "question": "Which loop is best for iterating over arrays with known length?",
                            "options": ["while", "for", "do-while"],
                            "correctAnswer": "for",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-5-7",
                            "question": "What causes an infinite loop?",
                            "options": ["false condition", "true condition with no change", "no initialization"],
                            "correctAnswer": "true condition with no change",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-5-8",
                            "question": "Can you nest loops in JavaScript?",
                            "options": ["Yes", "No", "Only with for loop"],
                            "correctAnswer": "Yes",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-5-9",
                            "question": "Where is the condition checked in do-while?",
                            "options": ["Before", "After", "Both"],
                            "correctAnswer": "After",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-5-10",
                            "question": "Which of the following is true about continue?",
                            "options": ["Exits the loop", "Skips the loop entirely", "Skips to next iteration"],
                            "correctAnswer": "Skips to next iteration",
                            "userAnswer": ""
                        }
                    ]
                }
            }
        ,
            {
                "chapterId": "ch-6",
                "title": "Functions in JavaScript",
                "unlocked": false,
                "modules": [
                    {
                        "moduleId": "mod-6-1",
                        "title": "Function Basics",
                        "content": "## Learn How to Declare and Call Functions in JavaScript\n\n## 1. Introduction\n\n- **Functions** are reusable blocks of code that perform specific tasks.\n- They help in organizing and reusing code efficiently.\n\n---\n\n## 2. Declaring a Function\n\n### Syntax\n\n```javascript\nfunction functionName(parameters) {\n  // code to be executed\n}\n```\n\n### Example\n\n```javascript\nfunction greet() {\n  console.log(\"Hello, welcome to JavaScript!\");\n}\n```\n\n---\n\n## 3. Calling a Function\n\n- To execute the code inside a function, you \"call\" it by its name followed by parentheses.\n\n### Example\n\n```javascript\ngreet();\n\n// Output:\n// Hello, welcome to JavaScript!\n```\n\n---\n\n## 4. Functions with Parameters\n\n- Functions can take inputs called **parameters**.\n\n### Example\n\n```javascript\nfunction greet(name) {\n  console.log(\"Hello, \" + name + \"!\");\n}\n\ngreet(\"Alice\");\n\n// Output:\n// Hello, Alice!\n```\n\n---\n\n## 5. Functions with Return Values\n\n- Functions can return values using the **return** statement.\n\n### Example\n\n```javascript\nfunction add(a, b) {\n  return a + b;\n}\n\nlet sum = add(3, 4);\nconsole.log(sum);\n\n// Output:\n// 7\n```\n\n---\n\n## 6. Function Expressions\n\n- Functions can also be assigned to variables.\n\n### Example\n\n```javascript\nconst multiply = function(x, y) {\n  return x * y;\n};\n\nconsole.log(multiply(2, 3));\n\n// Output:\n// 6\n```\n\n---\n\n## 7. Arrow Functions (Modern Syntax)\n\n- A shorter way to write functions.\n\n### Example\n\n```javascript\nconst subtract = (a, b) => a - b;\n\nconsole.log(subtract(10, 4));\n\n// Output:\n// 6\n```\n\n---\n\n## 8. Summary\n\n- Functions help in organizing code into reusable blocks.\n- Declare functions using `function`, function expressions, or arrow functions.\n- Call functions by using their name followed by parentheses.\n- Use parameters to pass values and `return` to get outputs from functions.\n\n> **Next Up:** Learn about **function scope and closures** to understand where variables live!\n",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-6-1",
                                "question": "How do you declare a function in JavaScript?",
                                "options": ["function myFunc()", "def myFunc()", "func myFunc()"],
                                "correctAnswer": "function myFunc()",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-6-2",
                                "question": "What keyword is used to define a function?",
                                "options": ["define", "function", "method"],
                                "correctAnswer": "function",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-6-3",
                                "question": "How do you call a function named sayHello?",
                                "options": ["call sayHello()", "sayHello()", "function sayHello"],
                                "correctAnswer": "sayHello()",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-6-2",
                        "title": "Function Parameters and Return",
                        "content": "## Understand How to Use Parameters and Return Values in Functions\n\n## 1. What Are Parameters?\n\n- **Parameters** are variables listed in the function definition.\n- They act as placeholders for the values (called **arguments**) passed to the function when it is called.\n\n### Example\n\n```javascript\nfunction greet(name) {\n  console.log(\"Hello, \" + name + \"!\");\n}\n\ngreet(\"Alice\");\n// Output:\n// Hello, Alice!\n```\n\n---\n\n## 2. Using Multiple Parameters\n\n- You can define more than one parameter by separating them with commas.\n\n### Example\n\n```javascript\nfunction add(a, b) {\n  console.log(a + b);\n}\n\nadd(5, 3);\n// Output:\n// 8\n```\n\n---\n\n## 3. What Is a Return Value?\n\n- Functions can send back a value to the place where they were called using the **return** statement.\n\n### Example\n\n```javascript\nfunction multiply(x, y) {\n  return x * y;\n}\n\nlet result = multiply(4, 5);\nconsole.log(result);\n// Output:\n// 20\n```\n\n---\n\n## 4. Storing Return Values\n\n- Return values can be stored in variables for later use.\n\n### Example\n\n```javascript\nfunction square(number) {\n  return number * number;\n}\n\nlet squaredNumber = square(6);\nconsole.log(squaredNumber);\n// Output:\n// 36\n```\n\n---\n\n## 5. Functions Without Return Values\n\n- Functions don't have to return a value. If they don't, they just perform an action.\n\n### Example\n\n```javascript\nfunction showMessage() {\n  console.log(\"This is a message.\");\n}\n\nshowMessage();\n// Output:\n// This is a message.\n```\n\n---\n\n## 6. Summary\n\n- **Parameters** make functions flexible by allowing input values.\n- Use **return** to send a value back from a function.\n- Functions can have multiple parameters and may or may not return a value depending on the need.\n\n> **Next Up:** Explore **function scope** to understand where your variables live inside functions! \n",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-6-4",
                                "question": "What is a parameter in a function?",
                                "options": ["Variable passed into function", "Return value", "Function name"],
                                "correctAnswer": "Variable passed into function",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-6-5",
                                "question": "What does the return statement do?",
                                "options": ["Ends loop", "Exits program", "Returns a value from function"],
                                "correctAnswer": "Returns a value from function",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-6-6",
                                "question": "Can a function return multiple values?",
                                "options": ["No", "Yes, as an array or object", "Only in loops"],
                                "correctAnswer": "Yes, as an array or object",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-6-3",
                        "title": "Arrow Functions",
                        "content": "## Explore Arrow Function Syntax and Differences from Traditional Functions\n\n## 1. What Are Arrow Functions?\n\n- Arrow functions are a concise way to write functions in JavaScript.\n- Introduced in **ES6**, they are shorter and behave differently in some situations.\n\n### Basic Syntax\n\n```javascript\nconst add = (a, b) => a + b;\nconsole.log(add(3, 4));\n// Output:\n// 7\n```\n\n---\n\n## 2. Writing Arrow Functions\n\n### Single Parameter (No Parentheses Needed)\n\n```javascript\nconst square = x => x * x;\nconsole.log(square(5));\n// Output:\n// 25\n```\n\n### Multiple Parameters (Parentheses Required)\n\n```javascript\nconst multiply = (a, b) => a * b;\nconsole.log(multiply(2, 3));\n// Output:\n// 6\n```\n\n### No Parameters (Use Empty Parentheses)\n\n```javascript\nconst greet = () => console.log(\"Hello!\");\ngreet();\n// Output:\n// Hello!\n```\n\n### With Block Body (For Multiple Statements or Return)\n\n```javascript\nconst addNumbers = (a, b) => {\n  const sum = a + b;\n  return sum;\n};\nconsole.log(addNumbers(4, 7));\n// Output:\n// 11\n```\n\n---\n\n## 3. Differences from Traditional Functions\n\n| Aspect | Traditional Function | Arrow Function |\n|--------|-------------------|-----------------|\n| **Syntax** | Longer | Shorter, cleaner |\n| **`this` Binding** | Dynamic (depends on how function is called) | Lexical (inherits from parent scope) |\n| **Arguments Object** | Has `arguments` object | Does **not** have `arguments` object |\n| **Constructors** | Can be used as constructors | Cannot be used as constructors |\n\n> **Important:** Arrow functions do **not** have their own `this`. They use `this` from their surrounding context.\n\n### Example: `this` Difference\n\n```javascript\nfunction traditional() {\n  console.log(this);\n}\n\nconst arrow = () => {\n  console.log(this);\n};\n\ntraditional(); // 'this' depends on how function is called\narrow();       // 'this' refers to the parent scope\n```\n\n---\n\n## 4. When to Use Arrow Functions\n\n- When you need **shorter syntax**.\n- When you want to **inherit `this`** from the parent scope.\n- For **callbacks**, like in array methods:\n\n```javascript\nconst numbers = [1, 2, 3];\nconst doubled = numbers.map(n => n * 2);\nconsole.log(doubled);\n// Output:\n// [2, 4, 6]\n```\n\n---\n\n## 5. Summary\n\n- Arrow functions offer a **cleaner** syntax.\n- They behave differently in terms of **`this`**, **arguments**, and **constructor usage**.\n- Best used for **short functions** and **callbacks**.\n\n> **Next Up:** Learn about **default parameters** to make your functions even more flexible! \n",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-6-7",
                                "question": "What symbol is used in arrow functions?",
                                "options": ["=>", "->", "::"],
                                "correctAnswer": "=>",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-6-8",
                                "question": "Which is a valid arrow function?",
                                "options": ["let x = () => {}", "let x = -> () {}", "let x = :=> {}"],
                                "correctAnswer": "let x = () => {}",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-6-9",
                                "question": "Are arrow functions hoisted?",
                                "options": ["Yes", "No", "Only in strict mode"],
                                "correctAnswer": "No",
                                "userAnswer": ""
                            }
                        ]
                    },
                    {
                        "moduleId": "mod-6-4",
                        "title": "Function Scope",
                        "content": "## Understand Local and Global Scopes in the Context of Functions\n\n## 1. What is Scope?\n\n- **Scope** refers to the accessibility or visibility of variables in different parts of your code.\n- In JavaScript, variables can have either **global scope** or **local scope**.\n\n---\n\n## 2. Global Scope\n\n- A variable declared **outside** of any function is in the global scope.\n- It can be accessed and modified from anywhere in your code.\n\n```javascript\nlet globalVar = \"I am global\";\n\nfunction showGlobal() {\n  console.log(globalVar);\n}\n\nshowGlobal();\n// Output:\n// I am global\n\nconsole.log(globalVar);\n// Output:\n// I am global\n```\n\n---\n\n## 3. Local Scope\n\n- A variable declared **inside** a function is in the local scope.\n- It can **only** be accessed within that function.\n\n```javascript\nfunction localExample() {\n  let localVar = \"I am local\";\n  console.log(localVar);\n}\n\nlocalExample();\n// Output:\n// I am local\n\nconsole.log(localVar);\n// Output:\n// ReferenceError: localVar is not defined\n```\n\n---\n\n## 4. Block Scope (Using `let` and `const`)\n\n- Variables declared with `let` or `const` inside **curly braces** `{}` have block scope.\n\n```javascript\nif (true) {\n  let blockVar = \"I am block scoped\";\n  console.log(blockVar);\n  // Output:\n  // I am block scoped\n}\n\nconsole.log(blockVar);\n// Output:\n// ReferenceError: blockVar is not defined\n```\n\n> Note: Variables declared with `var` do **not** have block scope, only function scope.\n\n---\n\n## 5. Global vs Local: Same Variable Name\n\n- If a local variable has the same name as a global variable, the local one **shadows** the global one inside the function.\n\n```javascript\nlet message = \"Global message\";\n\nfunction showMessage() {\n  let message = \"Local message\";\n  console.log(message);\n}\n\nshowMessage();\n// Output:\n// Local message\n\nconsole.log(message);\n// Output:\n// Global message\n```\n\n---\n\n## 6. Best Practices\n\n- Minimize the use of global variables to avoid conflicts.\n- Prefer **local** and **block scope** variables for better control and fewer bugs.\n\n---\n\n## 7. Summary\n\n- **Global Scope**: Declared outside functions, accessible anywhere.\n- **Local Scope**: Declared inside functions, accessible only within.\n- **Block Scope**: Declared inside `{}`, accessible only within that block.\n- Prefer local and block scope for cleaner, safer code!\n\n> **Next Tip:** Explore **closures** to understand how functions remember variables from their outer scope! \n",
                        "unlocked": false,
                        "questions": [
                            {
                                "questionId": "q-6-10",
                                "question": "What is local scope?",
                                "options": ["Scope inside a function", "Global variable", "Loop variable"],
                                "correctAnswer": "Scope inside a function",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-6-11",
                                "question": "What happens when you declare a variable inside a function?",
                                "options": ["Global variable", "Local to function", "Shared globally"],
                                "correctAnswer": "Local to function",
                                "userAnswer": ""
                            },
                            {
                                "questionId": "q-6-12",
                                "question": "What is the scope of variables declared with var inside a function?",
                                "options": ["Global", "Function scope", "Block scope"],
                                "correctAnswer": "Function scope",
                                "userAnswer": ""
                            }
                        ]
                    }
                ],
                "assessment": {
                    "questions": [
                        {
                            "questionId": "assess-6-1",
                            "question": "What keyword defines a function in JavaScript?",
                            "options": ["function", "method", "define"],
                            "correctAnswer": "function",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-6-2",
                            "question": "Which is the correct way to return a value from a function?",
                            "options": ["give", "return", "output"],
                            "correctAnswer": "return",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-6-3",
                            "question": "What will console.log(sum(2, 3)) return if sum is a function adding two numbers?",
                            "options": ["23", "5", "undefined"],
                            "correctAnswer": "5",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-6-4",
                            "question": "Which is the correct arrow function syntax?",
                            "options": ["() => {}", "-> () {}", "function => {}"],
                            "correctAnswer": "() => {}",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-6-5",
                            "question": "Which function is not hoisted?",
                            "options": ["Arrow function", "Function declaration", "All are hoisted"],
                            "correctAnswer": "Arrow function",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-6-6",
                            "question": "Where is a variable declared inside a function accessible?",
                            "options": ["Everywhere", "Only in that function", "Globally"],
                            "correctAnswer": "Only in that function",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-6-7",
                            "question": "How do you pass a parameter to a function?",
                            "options": ["Inside curly braces", "Inside parentheses", "With a colon"],
                            "correctAnswer": "Inside parentheses",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-6-8",
                            "question": "What happens if a function does not have a return statement?",
                            "options": ["Returns undefined", "Throws error", "Returns 0"],
                            "correctAnswer": "Returns undefined",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-6-9",
                            "question": "What is the scope of a variable defined with var in a function?",
                            "options": ["Global", "Block", "Function"],
                            "correctAnswer": "Function",
                            "userAnswer": ""
                        },
                        {
                            "questionId": "assess-6-10",
                            "question": "Which is an advantage of using functions?",
                            "options": ["Code repetition", "Code reusability", "Longer code"],
                            "correctAnswer": "Code reusability",
                            "userAnswer": ""
                        }
                    ]
                }
            }
        ]
    }
]